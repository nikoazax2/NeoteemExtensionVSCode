{
  "version": 3,
  "sources": ["../node_modules/debug/node_modules/ms/index.js", "../node_modules/debug/src/common.js", "../node_modules/debug/src/browser.js", "../node_modules/has-flag/index.js", "../node_modules/supports-color/index.js", "../node_modules/debug/src/node.js", "../node_modules/debug/src/index.js", "../node_modules/@kwsites/file-exists/src/index.ts", "../node_modules/@kwsites/file-exists/index.ts", "../node_modules/@kwsites/promise-deferred/src/index.ts", "../node_modules/simple-git/src/lib/errors/git-error.ts", "../node_modules/simple-git/src/lib/errors/git-response-error.ts", "../node_modules/simple-git/src/lib/args/pathspec.ts", "../node_modules/simple-git/src/lib/errors/git-construct-error.ts", "../node_modules/simple-git/src/lib/errors/git-plugin-error.ts", "../node_modules/simple-git/src/lib/errors/task-configuration-error.ts", "../node_modules/simple-git/src/lib/utils/util.ts", "../node_modules/simple-git/src/lib/utils/argument-filters.ts", "../node_modules/simple-git/src/lib/utils/exit-codes.ts", "../node_modules/simple-git/src/lib/utils/git-output-streams.ts", "../node_modules/simple-git/src/lib/utils/line-parser.ts", "../node_modules/simple-git/src/lib/utils/simple-git-options.ts", "../node_modules/simple-git/src/lib/utils/task-options.ts", "../node_modules/simple-git/src/lib/utils/task-parser.ts", "../node_modules/simple-git/src/lib/utils/index.ts", "../node_modules/simple-git/src/lib/tasks/check-is-repo.ts", "../node_modules/simple-git/src/lib/responses/CleanSummary.ts", "../node_modules/simple-git/src/lib/tasks/task.ts", "../node_modules/simple-git/src/lib/tasks/clean.ts", "../node_modules/simple-git/src/lib/responses/ConfigList.ts", "../node_modules/simple-git/src/lib/tasks/config.ts", "../node_modules/simple-git/src/lib/tasks/grep.ts", "../node_modules/simple-git/src/lib/tasks/reset.ts", "../node_modules/simple-git/src/lib/api.ts", "../node_modules/simple-git/src/lib/plugins/abort-plugin.ts", "../node_modules/simple-git/src/lib/plugins/block-unsafe-operations-plugin.ts", "../node_modules/simple-git/src/lib/plugins/command-config-prefixing-plugin.ts", "../node_modules/simple-git/src/lib/plugins/completion-detection.plugin.ts", "../node_modules/simple-git/src/lib/plugins/error-detection.plugin.ts", "../node_modules/simple-git/src/lib/plugins/plugin-store.ts", "../node_modules/simple-git/src/lib/plugins/progress-monitor-plugin.ts", "../node_modules/simple-git/src/lib/plugins/simple-git-plugin.ts", "../node_modules/simple-git/src/lib/plugins/spawn-options-plugin.ts", "../node_modules/simple-git/src/lib/plugins/timout-plugin.ts", "../node_modules/simple-git/src/lib/plugins/index.ts", "../node_modules/simple-git/src/lib/plugins/suffix-paths.plugin.ts", "../node_modules/simple-git/src/lib/git-logger.ts", "../node_modules/simple-git/src/lib/runners/tasks-pending-queue.ts", "../node_modules/simple-git/src/lib/runners/git-executor-chain.ts", "../node_modules/simple-git/src/lib/runners/git-executor.ts", "../node_modules/simple-git/src/lib/task-callback.ts", "../node_modules/simple-git/src/lib/tasks/change-working-directory.ts", "../node_modules/simple-git/src/lib/tasks/checkout.ts", "../node_modules/simple-git/src/lib/parsers/parse-commit.ts", "../node_modules/simple-git/src/lib/tasks/commit.ts", "../node_modules/simple-git/src/lib/tasks/hash-object.ts", "../node_modules/simple-git/src/lib/responses/InitSummary.ts", "../node_modules/simple-git/src/lib/tasks/init.ts", "../node_modules/simple-git/src/lib/args/log-format.ts", "../node_modules/simple-git/src/lib/responses/DiffSummary.ts", "../node_modules/simple-git/src/lib/parsers/parse-diff-summary.ts", "../node_modules/simple-git/src/lib/parsers/parse-list-log-summary.ts", "../node_modules/simple-git/src/lib/tasks/diff.ts", "../node_modules/simple-git/src/lib/tasks/log.ts", "../node_modules/simple-git/src/lib/responses/MergeSummary.ts", "../node_modules/simple-git/src/lib/responses/PullSummary.ts", "../node_modules/simple-git/src/lib/parsers/parse-remote-objects.ts", "../node_modules/simple-git/src/lib/parsers/parse-remote-messages.ts", "../node_modules/simple-git/src/lib/parsers/parse-pull.ts", "../node_modules/simple-git/src/lib/parsers/parse-merge.ts", "../node_modules/simple-git/src/lib/tasks/merge.ts", "../node_modules/simple-git/src/lib/parsers/parse-push.ts", "../node_modules/simple-git/src/lib/tasks/push.ts", "../node_modules/simple-git/src/lib/tasks/show.ts", "../node_modules/simple-git/src/lib/responses/FileStatusSummary.ts", "../node_modules/simple-git/src/lib/responses/StatusSummary.ts", "../node_modules/simple-git/src/lib/tasks/status.ts", "../node_modules/simple-git/src/lib/tasks/version.ts", "../node_modules/simple-git/src/lib/simple-git-api.ts", "../node_modules/simple-git/src/lib/runners/scheduler.ts", "../node_modules/simple-git/src/lib/tasks/apply-patch.ts", "../node_modules/simple-git/src/lib/responses/BranchDeleteSummary.ts", "../node_modules/simple-git/src/lib/parsers/parse-branch-delete.ts", "../node_modules/simple-git/src/lib/responses/BranchSummary.ts", "../node_modules/simple-git/src/lib/parsers/parse-branch.ts", "../node_modules/simple-git/src/lib/tasks/branch.ts", "../node_modules/simple-git/src/lib/responses/CheckIgnore.ts", "../node_modules/simple-git/src/lib/tasks/check-ignore.ts", "../node_modules/simple-git/src/lib/tasks/clone.ts", "../node_modules/simple-git/src/lib/parsers/parse-fetch.ts", "../node_modules/simple-git/src/lib/tasks/fetch.ts", "../node_modules/simple-git/src/lib/parsers/parse-move.ts", "../node_modules/simple-git/src/lib/tasks/move.ts", "../node_modules/simple-git/src/lib/tasks/pull.ts", "../node_modules/simple-git/src/lib/responses/GetRemoteSummary.ts", "../node_modules/simple-git/src/lib/tasks/remote.ts", "../node_modules/simple-git/src/lib/tasks/stash-list.ts", "../node_modules/simple-git/src/lib/tasks/sub-module.ts", "../node_modules/simple-git/src/lib/responses/TagList.ts", "../node_modules/simple-git/src/lib/tasks/tag.ts", "../node_modules/simple-git/src/git.js", "../node_modules/simple-git/src/lib/git-factory.ts", "../node_modules/simple-git/src/lib/runners/promise-wrapped.ts", "../node_modules/simple-git/src/index.js", "../extension.js"],
  "sourcesContent": ["/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n", "\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = require('ms');\n\tcreateDebug.destroy = destroy;\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\t\tlet enableOverride = null;\n\t\tlet namespacesCache;\n\t\tlet enabledCache;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn '%';\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = createDebug.selectColor(namespace);\n\t\tdebug.extend = extend;\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n\t\tObject.defineProperty(debug, 'enabled', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: () => {\n\t\t\t\tif (enableOverride !== null) {\n\t\t\t\t\treturn enableOverride;\n\t\t\t\t}\n\t\t\t\tif (namespacesCache !== createDebug.namespaces) {\n\t\t\t\t\tnamespacesCache = createDebug.namespaces;\n\t\t\t\t\tenabledCache = createDebug.enabled(namespace);\n\t\t\t\t}\n\n\t\t\t\treturn enabledCache;\n\t\t\t},\n\t\t\tset: v => {\n\t\t\t\tenableOverride = v;\n\t\t\t}\n\t\t});\n\n\t\t// Env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\treturn debug;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\t\tcreateDebug.namespaces = namespaces;\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tlet i;\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n\t\tconst len = split.length;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (!split[i]) {\n\t\t\t\t// ignore empty strings\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\n\n\t\t\tif (namespaces[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names.map(toNamespace),\n\t\t\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tif (name[name.length - 1] === '*') {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet i;\n\t\tlet len;\n\n\t\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\n\t\t\tif (createDebug.skips[i].test(name)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\n\t\t\tif (createDebug.names[i].test(name)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Convert regexp to namespace\n\t*\n\t* @param {RegExp} regxep\n\t* @return {String} namespace\n\t* @api private\n\t*/\n\tfunction toNamespace(regexp) {\n\t\treturn regexp.toString()\n\t\t\t.substring(2, regexp.toString().length - 2)\n\t\t\t.replace(/\\.\\*\\?$/, '*');\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t* XXX DO NOT USE. This is a temporary stub function.\n\t* XXX It WILL be removed in the next major release.\n\t*/\n\tfunction destroy() {\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n", "/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\nexports.destroy = (() => {\n\tlet warned = false;\n\n\treturn () => {\n\t\tif (!warned) {\n\t\t\twarned = true;\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t\t}\n\t};\n})();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.debug()` when available.\n * No-op when `console.debug` is not a \"function\".\n * If `console.debug` is not available, falls back\n * to `console.log`.\n *\n * @api public\n */\nexports.log = console.debug || console.log || (() => {});\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug');\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n", "'use strict';\n\nmodule.exports = (flag, argv = process.argv) => {\n\tconst prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');\n\tconst position = argv.indexOf(prefix + flag);\n\tconst terminatorPosition = argv.indexOf('--');\n\treturn position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);\n};\n", "'use strict';\nconst os = require('os');\nconst tty = require('tty');\nconst hasFlag = require('has-flag');\n\nconst {env} = process;\n\nlet flagForceColor;\nif (hasFlag('no-color') ||\n\thasFlag('no-colors') ||\n\thasFlag('color=false') ||\n\thasFlag('color=never')) {\n\tflagForceColor = 0;\n} else if (hasFlag('color') ||\n\thasFlag('colors') ||\n\thasFlag('color=true') ||\n\thasFlag('color=always')) {\n\tflagForceColor = 1;\n}\n\nfunction envForceColor() {\n\tif ('FORCE_COLOR' in env) {\n\t\tif (env.FORCE_COLOR === 'true') {\n\t\t\treturn 1;\n\t\t}\n\n\t\tif (env.FORCE_COLOR === 'false') {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn env.FORCE_COLOR.length === 0 ? 1 : Math.min(Number.parseInt(env.FORCE_COLOR, 10), 3);\n\t}\n}\n\nfunction translateLevel(level) {\n\tif (level === 0) {\n\t\treturn false;\n\t}\n\n\treturn {\n\t\tlevel,\n\t\thasBasic: true,\n\t\thas256: level >= 2,\n\t\thas16m: level >= 3\n\t};\n}\n\nfunction supportsColor(haveStream, {streamIsTTY, sniffFlags = true} = {}) {\n\tconst noFlagForceColor = envForceColor();\n\tif (noFlagForceColor !== undefined) {\n\t\tflagForceColor = noFlagForceColor;\n\t}\n\n\tconst forceColor = sniffFlags ? flagForceColor : noFlagForceColor;\n\n\tif (forceColor === 0) {\n\t\treturn 0;\n\t}\n\n\tif (sniffFlags) {\n\t\tif (hasFlag('color=16m') ||\n\t\t\thasFlag('color=full') ||\n\t\t\thasFlag('color=truecolor')) {\n\t\t\treturn 3;\n\t\t}\n\n\t\tif (hasFlag('color=256')) {\n\t\t\treturn 2;\n\t\t}\n\t}\n\n\tif (haveStream && !streamIsTTY && forceColor === undefined) {\n\t\treturn 0;\n\t}\n\n\tconst min = forceColor || 0;\n\n\tif (env.TERM === 'dumb') {\n\t\treturn min;\n\t}\n\n\tif (process.platform === 'win32') {\n\t\t// Windows 10 build 10586 is the first Windows release that supports 256 colors.\n\t\t// Windows 10 build 14931 is the first release that supports 16m/TrueColor.\n\t\tconst osRelease = os.release().split('.');\n\t\tif (\n\t\t\tNumber(osRelease[0]) >= 10 &&\n\t\t\tNumber(osRelease[2]) >= 10586\n\t\t) {\n\t\t\treturn Number(osRelease[2]) >= 14931 ? 3 : 2;\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\tif ('CI' in env) {\n\t\tif (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI', 'GITHUB_ACTIONS', 'BUILDKITE', 'DRONE'].some(sign => sign in env) || env.CI_NAME === 'codeship') {\n\t\t\treturn 1;\n\t\t}\n\n\t\treturn min;\n\t}\n\n\tif ('TEAMCITY_VERSION' in env) {\n\t\treturn /^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;\n\t}\n\n\tif (env.COLORTERM === 'truecolor') {\n\t\treturn 3;\n\t}\n\n\tif ('TERM_PROGRAM' in env) {\n\t\tconst version = Number.parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);\n\n\t\tswitch (env.TERM_PROGRAM) {\n\t\t\tcase 'iTerm.app':\n\t\t\t\treturn version >= 3 ? 3 : 2;\n\t\t\tcase 'Apple_Terminal':\n\t\t\t\treturn 2;\n\t\t\t// No default\n\t\t}\n\t}\n\n\tif (/-256(color)?$/i.test(env.TERM)) {\n\t\treturn 2;\n\t}\n\n\tif (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {\n\t\treturn 1;\n\t}\n\n\tif ('COLORTERM' in env) {\n\t\treturn 1;\n\t}\n\n\treturn min;\n}\n\nfunction getSupportLevel(stream, options = {}) {\n\tconst level = supportsColor(stream, {\n\t\tstreamIsTTY: stream && stream.isTTY,\n\t\t...options\n\t});\n\n\treturn translateLevel(level);\n}\n\nmodule.exports = {\n\tsupportsColor: getSupportLevel,\n\tstdout: getSupportLevel({isTTY: tty.isatty(1)}),\n\tstderr: getSupportLevel({isTTY: tty.isatty(2)})\n};\n", "/**\n * Module dependencies.\n */\n\nconst tty = require('tty');\nconst util = require('util');\n\n/**\n * This is the Node.js implementation of `debug()`.\n */\n\nexports.init = init;\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.destroy = util.deprecate(\n\t() => {},\n\t'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.'\n);\n\n/**\n * Colors.\n */\n\nexports.colors = [6, 2, 3, 4, 5, 1];\n\ntry {\n\t// Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)\n\t// eslint-disable-next-line import/no-extraneous-dependencies\n\tconst supportsColor = require('supports-color');\n\n\tif (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {\n\t\texports.colors = [\n\t\t\t20,\n\t\t\t21,\n\t\t\t26,\n\t\t\t27,\n\t\t\t32,\n\t\t\t33,\n\t\t\t38,\n\t\t\t39,\n\t\t\t40,\n\t\t\t41,\n\t\t\t42,\n\t\t\t43,\n\t\t\t44,\n\t\t\t45,\n\t\t\t56,\n\t\t\t57,\n\t\t\t62,\n\t\t\t63,\n\t\t\t68,\n\t\t\t69,\n\t\t\t74,\n\t\t\t75,\n\t\t\t76,\n\t\t\t77,\n\t\t\t78,\n\t\t\t79,\n\t\t\t80,\n\t\t\t81,\n\t\t\t92,\n\t\t\t93,\n\t\t\t98,\n\t\t\t99,\n\t\t\t112,\n\t\t\t113,\n\t\t\t128,\n\t\t\t129,\n\t\t\t134,\n\t\t\t135,\n\t\t\t148,\n\t\t\t149,\n\t\t\t160,\n\t\t\t161,\n\t\t\t162,\n\t\t\t163,\n\t\t\t164,\n\t\t\t165,\n\t\t\t166,\n\t\t\t167,\n\t\t\t168,\n\t\t\t169,\n\t\t\t170,\n\t\t\t171,\n\t\t\t172,\n\t\t\t173,\n\t\t\t178,\n\t\t\t179,\n\t\t\t184,\n\t\t\t185,\n\t\t\t196,\n\t\t\t197,\n\t\t\t198,\n\t\t\t199,\n\t\t\t200,\n\t\t\t201,\n\t\t\t202,\n\t\t\t203,\n\t\t\t204,\n\t\t\t205,\n\t\t\t206,\n\t\t\t207,\n\t\t\t208,\n\t\t\t209,\n\t\t\t214,\n\t\t\t215,\n\t\t\t220,\n\t\t\t221\n\t\t];\n\t}\n} catch (error) {\n\t// Swallow - we only care if `supports-color` is available; it doesn't have to be.\n}\n\n/**\n * Build up the default `inspectOpts` object from the environment variables.\n *\n *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js\n */\n\nexports.inspectOpts = Object.keys(process.env).filter(key => {\n\treturn /^debug_/i.test(key);\n}).reduce((obj, key) => {\n\t// Camel-case\n\tconst prop = key\n\t\t.substring(6)\n\t\t.toLowerCase()\n\t\t.replace(/_([a-z])/g, (_, k) => {\n\t\t\treturn k.toUpperCase();\n\t\t});\n\n\t// Coerce string value into JS value\n\tlet val = process.env[key];\n\tif (/^(yes|on|true|enabled)$/i.test(val)) {\n\t\tval = true;\n\t} else if (/^(no|off|false|disabled)$/i.test(val)) {\n\t\tval = false;\n\t} else if (val === 'null') {\n\t\tval = null;\n\t} else {\n\t\tval = Number(val);\n\t}\n\n\tobj[prop] = val;\n\treturn obj;\n}, {});\n\n/**\n * Is stdout a TTY? Colored output is enabled when `true`.\n */\n\nfunction useColors() {\n\treturn 'colors' in exports.inspectOpts ?\n\t\tBoolean(exports.inspectOpts.colors) :\n\t\ttty.isatty(process.stderr.fd);\n}\n\n/**\n * Adds ANSI color escape codes if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\tconst {namespace: name, useColors} = this;\n\n\tif (useColors) {\n\t\tconst c = this.color;\n\t\tconst colorCode = '\\u001B[3' + (c < 8 ? c : '8;5;' + c);\n\t\tconst prefix = `  ${colorCode};1m${name} \\u001B[0m`;\n\n\t\targs[0] = prefix + args[0].split('\\n').join('\\n' + prefix);\n\t\targs.push(colorCode + 'm+' + module.exports.humanize(this.diff) + '\\u001B[0m');\n\t} else {\n\t\targs[0] = getDate() + name + ' ' + args[0];\n\t}\n}\n\nfunction getDate() {\n\tif (exports.inspectOpts.hideDate) {\n\t\treturn '';\n\t}\n\treturn new Date().toISOString() + ' ';\n}\n\n/**\n * Invokes `util.format()` with the specified arguments and writes to stderr.\n */\n\nfunction log(...args) {\n\treturn process.stderr.write(util.format(...args) + '\\n');\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\tif (namespaces) {\n\t\tprocess.env.DEBUG = namespaces;\n\t} else {\n\t\t// If you set a process.env field to null or undefined, it gets cast to the\n\t\t// string 'null' or 'undefined'. Just delete instead.\n\t\tdelete process.env.DEBUG;\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n\treturn process.env.DEBUG;\n}\n\n/**\n * Init logic for `debug` instances.\n *\n * Create a new `inspectOpts` object in case `useColors` is set\n * differently for a particular `debug` instance.\n */\n\nfunction init(debug) {\n\tdebug.inspectOpts = {};\n\n\tconst keys = Object.keys(exports.inspectOpts);\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tdebug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %o to `util.inspect()`, all on a single line.\n */\n\nformatters.o = function (v) {\n\tthis.inspectOpts.colors = this.useColors;\n\treturn util.inspect(v, this.inspectOpts)\n\t\t.split('\\n')\n\t\t.map(str => str.trim())\n\t\t.join(' ');\n};\n\n/**\n * Map %O to `util.inspect()`, allowing multiple lines if needed.\n */\n\nformatters.O = function (v) {\n\tthis.inspectOpts.colors = this.useColors;\n\treturn util.inspect(v, this.inspectOpts);\n};\n", "/**\n * Detect Electron renderer / nwjs process, which is node, but we should\n * treat as a browser.\n */\n\nif (typeof process === 'undefined' || process.type === 'renderer' || process.browser === true || process.__nwjs) {\n\tmodule.exports = require('./browser.js');\n} else {\n\tmodule.exports = require('./node.js');\n}\n", null, null, null, "import type { SimpleGitTask } from '../types';\n\n/**\n * The `GitError` is thrown when the underlying `git` process throws a\n * fatal exception (eg an `ENOENT` exception when attempting to use a\n * non-writable directory as the root for your repo), and acts as the\n * base class for more specific errors thrown by the parsing of the\n * git response or errors in the configuration of the task about to\n * be run.\n *\n * When an exception is thrown, pending tasks in the same instance will\n * not be executed. The recommended way to run a series of tasks that\n * can independently fail without needing to prevent future tasks from\n * running is to catch them individually:\n *\n * ```typescript\n import { gitP, SimpleGit, GitError, PullResult } from 'simple-git';\n\n function catchTask (e: GitError) {\n   return e.\n }\n\n const git = gitP(repoWorkingDir);\n const pulled: PullResult | GitError = await git.pull().catch(catchTask);\n const pushed: string | GitError = await git.pushTags().catch(catchTask);\n ```\n */\nexport class GitError extends Error {\n   constructor(\n      public task?: SimpleGitTask<any>,\n      message?: string\n   ) {\n      super(message);\n      Object.setPrototypeOf(this, new.target.prototype);\n   }\n}\n", "import { GitError } from './git-error';\n\n/**\n * The `GitResponseError` is the wrapper for a parsed response that is treated as\n * a fatal error, for example attempting a `merge` can leave the repo in a corrupted\n * state when there are conflicts so the task will reject rather than resolve.\n *\n * For example, catching the merge conflict exception:\n *\n * ```typescript\n import { gitP, SimpleGit, GitResponseError, MergeSummary } from 'simple-git';\n\n const git = gitP(repoRoot);\n const mergeOptions: string[] = ['--no-ff', 'other-branch'];\n const mergeSummary: MergeSummary = await git.merge(mergeOptions)\n      .catch((e: GitResponseError<MergeSummary>) => e.git);\n\n if (mergeSummary.failed) {\n   // deal with the error\n }\n ```\n */\nexport class GitResponseError<T = any> extends GitError {\n   constructor(\n      /**\n       * `.git` access the parsed response that is treated as being an error\n       */\n      public readonly git: T,\n      message?: string\n   ) {\n      super(undefined, message || String(git));\n   }\n}\n", "const cache = new WeakMap<String, string[]>();\n\nexport function pathspec(...paths: string[]) {\n   const key = new String(paths);\n   cache.set(key, paths);\n\n   return key as string;\n}\n\nexport function isPathSpec(path: string | unknown): path is string {\n   return path instanceof String && cache.has(path);\n}\n\nexport function toPaths(pathSpec: string): string[] {\n   return cache.get(pathSpec) || [];\n}\n", "import { GitError } from './git-error';\nimport { SimpleGitOptions } from '../types';\n\n/**\n * The `GitConstructError` is thrown when an error occurs in the constructor\n * of the `simple-git` instance itself. Most commonly as a result of using\n * a `baseDir` option that points to a folder that either does not exist,\n * or cannot be read by the user the node script is running as.\n *\n * Check the `.message` property for more detail including the properties\n * passed to the constructor.\n */\nexport class GitConstructError extends GitError {\n   constructor(\n      public readonly config: SimpleGitOptions,\n      message: string\n   ) {\n      super(undefined, message);\n   }\n}\n", "import { SimpleGitOptions, SimpleGitTask } from '../types';\nimport { GitError } from './git-error';\n\nexport class GitPluginError extends GitError {\n   constructor(\n      public task?: SimpleGitTask<any>,\n      public readonly plugin?: keyof SimpleGitOptions,\n      message?: string\n   ) {\n      super(task, message);\n      Object.setPrototypeOf(this, new.target.prototype);\n   }\n}\n", "import { GitError } from './git-error';\n\n/**\n * The `TaskConfigurationError` is thrown when a command was incorrectly\n * configured. An error of this kind means that no attempt was made to\n * run your command through the underlying `git` binary.\n *\n * Check the `.message` property for more detail on why your configuration\n * resulted in an error.\n */\nexport class TaskConfigurationError extends GitError {\n   constructor(message?: string) {\n      super(undefined, message);\n   }\n}\n", "import { exists, FOLDER } from '@kwsites/file-exists';\nimport { Maybe } from '../types';\n\nexport const NULL = '\\0';\n\nexport const NOOP: (...args: any[]) => void = () => {};\n\n/**\n * Returns either the source argument when it is a `Function`, or the default\n * `NOOP` function constant\n */\nexport function asFunction<T extends () => any>(source: T | any): T {\n   return typeof source === 'function' ? source : NOOP;\n}\n\n/**\n * Determines whether the supplied argument is both a function, and is not\n * the `NOOP` function.\n */\nexport function isUserFunction<T extends Function>(source: T | any): source is T {\n   return typeof source === 'function' && source !== NOOP;\n}\n\nexport function splitOn(input: string, char: string): [string, string] {\n   const index = input.indexOf(char);\n   if (index <= 0) {\n      return [input, ''];\n   }\n\n   return [input.substr(0, index), input.substr(index + 1)];\n}\n\nexport function first<T extends any[]>(input: T, offset?: number): Maybe<T[number]>;\nexport function first<T extends IArguments>(input: T, offset?: number): Maybe<unknown>;\nexport function first(input: any[] | IArguments, offset = 0): Maybe<unknown> {\n   return isArrayLike(input) && input.length > offset ? input[offset] : undefined;\n}\n\nexport function last<T extends any[]>(input: T, offset?: number): Maybe<T[number]>;\nexport function last<T extends IArguments>(input: T, offset?: number): Maybe<unknown>;\nexport function last<T>(input: T, offset?: number): Maybe<unknown>;\nexport function last(input: unknown, offset = 0) {\n   if (isArrayLike(input) && input.length > offset) {\n      return input[input.length - 1 - offset];\n   }\n}\n\ntype ArrayLike<T = any> = T[] | IArguments | { [index: number]: T; length: number };\n\nfunction isArrayLike(input: any): input is ArrayLike {\n   return !!(input && typeof input.length === 'number');\n}\n\nexport function toLinesWithContent(input = '', trimmed = true, separator = '\\n'): string[] {\n   return input.split(separator).reduce((output, line) => {\n      const lineContent = trimmed ? line.trim() : line;\n      if (lineContent) {\n         output.push(lineContent);\n      }\n      return output;\n   }, [] as string[]);\n}\n\ntype LineWithContentCallback<T = void> = (line: string) => T;\n\nexport function forEachLineWithContent<T>(\n   input: string,\n   callback: LineWithContentCallback<T>\n): T[] {\n   return toLinesWithContent(input, true).map((line) => callback(line));\n}\n\nexport function folderExists(path: string): boolean {\n   return exists(path, FOLDER);\n}\n\n/**\n * Adds `item` into the `target` `Array` or `Set` when it is not already present and returns the `item`.\n */\nexport function append<T>(target: T[] | Set<T>, item: T): typeof item {\n   if (Array.isArray(target)) {\n      if (!target.includes(item)) {\n         target.push(item);\n      }\n   } else {\n      target.add(item);\n   }\n   return item;\n}\n\n/**\n * Adds `item` into the `target` `Array` when it is not already present and returns the `target`.\n */\nexport function including<T>(target: T[], item: T): typeof target {\n   if (Array.isArray(target) && !target.includes(item)) {\n      target.push(item);\n   }\n\n   return target;\n}\n\nexport function remove<T>(target: Set<T> | T[], item: T): T {\n   if (Array.isArray(target)) {\n      const index = target.indexOf(item);\n      if (index >= 0) {\n         target.splice(index, 1);\n      }\n   } else {\n      target.delete(item);\n   }\n   return item;\n}\n\nexport const objectToString = Object.prototype.toString.call.bind(Object.prototype.toString) as (\n   input: any\n) => string;\n\nexport function asArray<T>(source: T | T[]): T[] {\n   return Array.isArray(source) ? source : [source];\n}\n\nexport function asStringArray<T>(source: T | T[]): string[] {\n   return asArray(source).map(String);\n}\n\nexport function asNumber(source: string | null | undefined, onNaN = 0) {\n   if (source == null) {\n      return onNaN;\n   }\n\n   const num = parseInt(source, 10);\n   return isNaN(num) ? onNaN : num;\n}\n\nexport function prefixedArray<T>(input: T[], prefix: T): T[] {\n   const output: T[] = [];\n   for (let i = 0, max = input.length; i < max; i++) {\n      output.push(prefix, input[i]);\n   }\n   return output;\n}\n\nexport function bufferToString(input: Buffer | Buffer[]): string {\n   return (Array.isArray(input) ? Buffer.concat(input) : input).toString('utf-8');\n}\n\n/**\n * Get a new object from a source object with only the listed properties.\n */\nexport function pick(source: Record<string, any>, properties: string[]) {\n   return Object.assign(\n      {},\n      ...properties.map((property) => (property in source ? { [property]: source[property] } : {}))\n   );\n}\n\nexport function delay(duration = 0): Promise<void> {\n   return new Promise((done) => setTimeout(done, duration));\n}\n", "import { Maybe, Options, Primitives } from '../types';\nimport { objectToString } from './util';\nimport { isPathSpec } from '../args/pathspec';\n\nexport interface ArgumentFilterPredicate<T> {\n   (input: any): input is T;\n}\n\nexport function filterType<T, K>(\n   input: K,\n   filter: ArgumentFilterPredicate<T>\n): K extends T ? T : undefined;\nexport function filterType<T, K>(input: K, filter: ArgumentFilterPredicate<T>, def: T): T;\nexport function filterType<T, K>(input: K, filter: ArgumentFilterPredicate<T>, def?: T): Maybe<T> {\n   if (filter(input)) {\n      return input;\n   }\n   return arguments.length > 2 ? def : undefined;\n}\n\nexport const filterArray: ArgumentFilterPredicate<Array<any>> = (input): input is Array<any> => {\n   return Array.isArray(input);\n};\n\nexport function filterPrimitives(\n   input: unknown,\n   omit?: Array<'boolean' | 'string' | 'number'>\n): input is Primitives {\n   const type = isPathSpec(input) ? 'string' : typeof input;\n\n   return (\n      /number|string|boolean/.test(type) &&\n      (!omit || !omit.includes(type as 'boolean' | 'string' | 'number'))\n   );\n}\n\nexport const filterString: ArgumentFilterPredicate<string> = (input): input is string => {\n   return typeof input === 'string';\n};\n\nexport const filterStringArray: ArgumentFilterPredicate<string[]> = (input): input is string[] => {\n   return Array.isArray(input) && input.every(filterString);\n};\n\nexport const filterStringOrStringArray: ArgumentFilterPredicate<string | string[]> = (\n   input\n): input is string | string[] => {\n   return filterString(input) || (Array.isArray(input) && input.every(filterString));\n};\n\nexport function filterPlainObject<T extends Options>(input: T | unknown): input is T;\nexport function filterPlainObject<T extends Object>(input: T | unknown): input is T {\n   return !!input && objectToString(input) === '[object Object]';\n}\n\nexport function filterFunction(input: unknown): input is Function {\n   return typeof input === 'function';\n}\n\nexport const filterHasLength: ArgumentFilterPredicate<{ length: number }> = (\n   input\n): input is { length: number } => {\n   if (input == null || 'number|boolean|function'.includes(typeof input)) {\n      return false;\n   }\n   return Array.isArray(input) || typeof input === 'string' || typeof input.length === 'number';\n};\n", "/**\n * Known process exit codes used by the task parsers to determine whether an error\n * was one they can automatically handle\n */\nexport enum ExitCodes {\n   SUCCESS,\n   ERROR,\n   NOT_FOUND = -2,\n   UNCLEAN = 128,\n}\n", "import { TaskResponseFormat } from '../types';\n\nexport class GitOutputStreams<T extends TaskResponseFormat = Buffer> {\n   constructor(\n      public readonly stdOut: T,\n      public readonly stdErr: T\n   ) {}\n\n   asStrings(): GitOutputStreams<string> {\n      return new GitOutputStreams(this.stdOut.toString('utf8'), this.stdErr.toString('utf8'));\n   }\n}\n", "export class LineParser<T> {\n   protected matches: string[] = [];\n\n   private _regExp: RegExp[];\n\n   constructor(\n      regExp: RegExp | RegExp[],\n      useMatches?: (target: T, match: string[]) => boolean | void\n   ) {\n      this._regExp = Array.isArray(regExp) ? regExp : [regExp];\n      if (useMatches) {\n         this.useMatches = useMatches;\n      }\n   }\n\n   parse = (line: (offset: number) => string | undefined, target: T): boolean => {\n      this.resetMatches();\n\n      if (!this._regExp.every((reg, index) => this.addMatch(reg, index, line(index)))) {\n         return false;\n      }\n\n      return this.useMatches(target, this.prepareMatches()) !== false;\n   };\n\n   // @ts-ignore\n   protected useMatches(target: T, match: string[]): boolean | void {\n      throw new Error(`LineParser:useMatches not implemented`);\n   }\n\n   protected resetMatches() {\n      this.matches.length = 0;\n   }\n\n   protected prepareMatches() {\n      return this.matches;\n   }\n\n   protected addMatch(reg: RegExp, index: number, line?: string) {\n      const matched = line && reg.exec(line);\n      if (matched) {\n         this.pushMatch(index, matched);\n      }\n\n      return !!matched;\n   }\n\n   protected pushMatch(_index: number, matched: string[]) {\n      this.matches.push(...matched.slice(1));\n   }\n}\n\nexport class RemoteLineParser<T> extends LineParser<T> {\n   protected addMatch(reg: RegExp, index: number, line?: string): boolean {\n      return /^remote:\\s/.test(String(line)) && super.addMatch(reg, index, line);\n   }\n\n   protected pushMatch(index: number, matched: string[]) {\n      if (index > 0 || matched.length > 1) {\n         super.pushMatch(index, matched);\n      }\n   }\n}\n", "import { SimpleGitOptions } from '../types';\n\nconst defaultOptions: Omit<SimpleGitOptions, 'baseDir'> = {\n   binary: 'git',\n   maxConcurrentProcesses: 5,\n   config: [],\n   trimmed: false,\n};\n\nexport function createInstanceConfig(\n   ...options: Array<Partial<SimpleGitOptions> | undefined>\n): SimpleGitOptions {\n   const baseDir = process.cwd();\n   const config: SimpleGitOptions = Object.assign(\n      { baseDir, ...defaultOptions },\n      ...options.filter((o) => typeof o === 'object' && o)\n   );\n\n   config.baseDir = config.baseDir || baseDir;\n   config.trimmed = config.trimmed === true;\n\n   return config;\n}\n", "import {\n   filterArray,\n   filterFunction,\n   filterPlainObject,\n   filterPrimitives,\n   filterType,\n} from './argument-filters';\nimport { asFunction, isUserFunction, last } from './util';\nimport { Maybe, Options, OptionsValues } from '../types';\nimport { isPathSpec } from '../args/pathspec';\n\nexport function appendTaskOptions<T extends Options = Options>(\n   options: Maybe<T>,\n   commands: string[] = []\n): string[] {\n   if (!filterPlainObject<Options>(options)) {\n      return commands;\n   }\n\n   return Object.keys(options).reduce((commands: string[], key: string) => {\n      const value: OptionsValues = options[key];\n\n      if (isPathSpec(value)) {\n         commands.push(value);\n      } else if (filterPrimitives(value, ['boolean'])) {\n         commands.push(key + '=' + value);\n      } else {\n         commands.push(key);\n      }\n\n      return commands;\n   }, commands);\n}\n\nexport function getTrailingOptions(\n   args: IArguments,\n   initialPrimitive = 0,\n   objectOnly = false\n): string[] {\n   const command: string[] = [];\n\n   for (let i = 0, max = initialPrimitive < 0 ? args.length : initialPrimitive; i < max; i++) {\n      if ('string|number'.includes(typeof args[i])) {\n         command.push(String(args[i]));\n      }\n   }\n\n   appendTaskOptions(trailingOptionsArgument(args), command);\n   if (!objectOnly) {\n      command.push(...trailingArrayArgument(args));\n   }\n\n   return command;\n}\n\nfunction trailingArrayArgument(args: IArguments) {\n   const hasTrailingCallback = typeof last(args) === 'function';\n   return filterType(last(args, hasTrailingCallback ? 1 : 0), filterArray, []);\n}\n\n/**\n * Given any number of arguments, returns the trailing options argument, ignoring a trailing function argument\n * if there is one. When not found, the return value is null.\n */\nexport function trailingOptionsArgument(args: IArguments): Maybe<Options> {\n   const hasTrailingCallback = filterFunction(last(args));\n   return filterType(last(args, hasTrailingCallback ? 1 : 0), filterPlainObject);\n}\n\n/**\n * Returns either the source argument when it is a `Function`, or the default\n * `NOOP` function constant\n */\nexport function trailingFunctionArgument(\n   args: unknown[] | IArguments | unknown,\n   includeNoop = true\n): Maybe<(...args: any[]) => unknown> {\n   const callback = asFunction(last(args));\n   return includeNoop || isUserFunction(callback) ? callback : undefined;\n}\n", "import type { MaybeArray, TaskParser, TaskResponseFormat } from '../types';\nimport { GitOutputStreams } from './git-output-streams';\nimport { LineParser } from './line-parser';\nimport { asArray, toLinesWithContent } from './util';\n\nexport function callTaskParser<INPUT extends TaskResponseFormat, RESPONSE>(\n   parser: TaskParser<INPUT, RESPONSE>,\n   streams: GitOutputStreams<INPUT>\n) {\n   return parser(streams.stdOut, streams.stdErr);\n}\n\nexport function parseStringResponse<T>(\n   result: T,\n   parsers: LineParser<T>[],\n   texts: MaybeArray<string>,\n   trim = true\n): T {\n   asArray(texts).forEach((text) => {\n      for (let lines = toLinesWithContent(text, trim), i = 0, max = lines.length; i < max; i++) {\n         const line = (offset = 0) => {\n            if (i + offset >= max) {\n               return;\n            }\n            return lines[i + offset];\n         };\n\n         parsers.some(({ parse }) => parse(line, result));\n      }\n   });\n\n   return result;\n}\n", "export * from './argument-filters';\nexport * from './exit-codes';\nexport * from './git-output-streams';\nexport * from './line-parser';\nexport * from './simple-git-options';\nexport * from './task-options';\nexport * from './task-parser';\nexport * from './util';\n", "import { ExitCodes } from '../utils';\nimport { Maybe, StringTask } from '../types';\n\nexport enum CheckRepoActions {\n   BARE = 'bare',\n   IN_TREE = 'tree',\n   IS_REPO_ROOT = 'root',\n}\n\nconst onError: StringTask<boolean>['onError'] = ({ exitCode }, error, done, fail) => {\n   if (exitCode === ExitCodes.UNCLEAN && isNotRepoMessage(error)) {\n      return done(Buffer.from('false'));\n   }\n\n   fail(error);\n};\n\nconst parser: StringTask<boolean>['parser'] = (text) => {\n   return text.trim() === 'true';\n};\n\nexport function checkIsRepoTask(action: Maybe<CheckRepoActions>): StringTask<boolean> {\n   switch (action) {\n      case CheckRepoActions.BARE:\n         return checkIsBareRepoTask();\n      case CheckRepoActions.IS_REPO_ROOT:\n         return checkIsRepoRootTask();\n   }\n\n   const commands = ['rev-parse', '--is-inside-work-tree'];\n\n   return {\n      commands,\n      format: 'utf-8',\n      onError,\n      parser,\n   };\n}\n\nexport function checkIsRepoRootTask(): StringTask<boolean> {\n   const commands = ['rev-parse', '--git-dir'];\n\n   return {\n      commands,\n      format: 'utf-8',\n      onError,\n      parser(path) {\n         return /^\\.(git)?$/.test(path.trim());\n      },\n   };\n}\n\nexport function checkIsBareRepoTask(): StringTask<boolean> {\n   const commands = ['rev-parse', '--is-bare-repository'];\n\n   return {\n      commands,\n      format: 'utf-8',\n      onError,\n      parser,\n   };\n}\n\nfunction isNotRepoMessage(error: Error): boolean {\n   return /(Not a git repository|Kein Git-Repository)/i.test(String(error));\n}\n", "import { CleanSummary } from '../../../typings';\nimport { toLinesWithContent } from '../utils';\n\nexport class CleanResponse implements CleanSummary {\n   public paths: string[] = [];\n   public files: string[] = [];\n   public folders: string[] = [];\n\n   constructor(public readonly dryRun: boolean) {}\n}\n\nconst removalRegexp = /^[a-z]+\\s*/i;\nconst dryRunRemovalRegexp = /^[a-z]+\\s+[a-z]+\\s*/i;\nconst isFolderRegexp = /\\/$/;\n\nexport function cleanSummaryParser(dryRun: boolean, text: string): CleanSummary {\n   const summary = new CleanResponse(dryRun);\n   const regexp = dryRun ? dryRunRemovalRegexp : removalRegexp;\n\n   toLinesWithContent(text).forEach((line) => {\n      const removed = line.replace(regexp, '');\n\n      summary.paths.push(removed);\n      (isFolderRegexp.test(removed) ? summary.folders : summary.files).push(removed);\n   });\n\n   return summary;\n}\n", "import { TaskConfigurationError } from '../errors/task-configuration-error';\nimport type { BufferTask, EmptyTaskParser, SimpleGitTask, StringTask } from '../types';\n\nexport const EMPTY_COMMANDS: [] = [];\n\nexport type EmptyTask = {\n   commands: typeof EMPTY_COMMANDS;\n   format: 'empty';\n   parser: EmptyTaskParser;\n   onError?: undefined;\n};\n\nexport function adhocExecTask(parser: EmptyTaskParser): EmptyTask {\n   return {\n      commands: EMPTY_COMMANDS,\n      format: 'empty',\n      parser,\n   };\n}\n\nexport function configurationErrorTask(error: Error | string): EmptyTask {\n   return {\n      commands: EMPTY_COMMANDS,\n      format: 'empty',\n      parser() {\n         throw typeof error === 'string' ? new TaskConfigurationError(error) : error;\n      },\n   };\n}\n\nexport function straightThroughStringTask(commands: string[], trimmed = false): StringTask<string> {\n   return {\n      commands,\n      format: 'utf-8',\n      parser(text) {\n         return trimmed ? String(text).trim() : text;\n      },\n   };\n}\n\nexport function straightThroughBufferTask(commands: string[]): BufferTask<any> {\n   return {\n      commands,\n      format: 'buffer',\n      parser(buffer) {\n         return buffer;\n      },\n   };\n}\n\nexport function isBufferTask<R>(task: SimpleGitTask<R>): task is BufferTask<R> {\n   return task.format === 'buffer';\n}\n\nexport function isEmptyTask<R>(task: SimpleGitTask<R>): task is EmptyTask {\n   return task.format === 'empty' || !task.commands.length;\n}\n", "import { CleanSummary } from '../../../typings';\nimport { cleanSummaryParser } from '../responses/CleanSummary';\nimport { Maybe, StringTask } from '../types';\nimport { asStringArray } from '../utils';\nimport { configurationErrorTask } from './task';\n\nexport const CONFIG_ERROR_INTERACTIVE_MODE = 'Git clean interactive mode is not supported';\nexport const CONFIG_ERROR_MODE_REQUIRED = 'Git clean mode parameter (\"n\" or \"f\") is required';\nexport const CONFIG_ERROR_UNKNOWN_OPTION = 'Git clean unknown option found in: ';\n\n/**\n * All supported option switches available for use in a `git.clean` operation\n */\nexport enum CleanOptions {\n   DRY_RUN = 'n',\n   FORCE = 'f',\n   IGNORED_INCLUDED = 'x',\n   IGNORED_ONLY = 'X',\n   EXCLUDING = 'e',\n   QUIET = 'q',\n   RECURSIVE = 'd',\n}\n\n/**\n * The two modes `git.clean` can run in - one of these must be supplied in order\n * for the command to not throw a `TaskConfigurationError`\n */\nexport type CleanMode = CleanOptions.FORCE | CleanOptions.DRY_RUN;\n\nconst CleanOptionValues: Set<string> = new Set([\n   'i',\n   ...asStringArray(Object.values(CleanOptions as any)),\n]);\n\nexport function cleanWithOptionsTask(mode: CleanMode | string, customArgs: string[]) {\n   const { cleanMode, options, valid } = getCleanOptions(mode);\n\n   if (!cleanMode) {\n      return configurationErrorTask(CONFIG_ERROR_MODE_REQUIRED);\n   }\n\n   if (!valid.options) {\n      return configurationErrorTask(CONFIG_ERROR_UNKNOWN_OPTION + JSON.stringify(mode));\n   }\n\n   options.push(...customArgs);\n\n   if (options.some(isInteractiveMode)) {\n      return configurationErrorTask(CONFIG_ERROR_INTERACTIVE_MODE);\n   }\n\n   return cleanTask(cleanMode, options);\n}\n\nexport function cleanTask(mode: CleanMode, customArgs: string[]): StringTask<CleanSummary> {\n   const commands: string[] = ['clean', `-${mode}`, ...customArgs];\n\n   return {\n      commands,\n      format: 'utf-8',\n      parser(text: string): CleanSummary {\n         return cleanSummaryParser(mode === CleanOptions.DRY_RUN, text);\n      },\n   };\n}\n\nexport function isCleanOptionsArray(input: string[]): input is CleanOptions[] {\n   return Array.isArray(input) && input.every((test) => CleanOptionValues.has(test));\n}\n\nfunction getCleanOptions(input: string) {\n   let cleanMode: Maybe<CleanMode>;\n   let options: string[] = [];\n   let valid = { cleanMode: false, options: true };\n\n   input\n      .replace(/[^a-z]i/g, '')\n      .split('')\n      .forEach((char) => {\n         if (isCleanMode(char)) {\n            cleanMode = char;\n            valid.cleanMode = true;\n         } else {\n            valid.options = valid.options && isKnownOption((options[options.length] = `-${char}`));\n         }\n      });\n\n   return {\n      cleanMode,\n      options,\n      valid,\n   };\n}\n\nfunction isCleanMode(cleanMode?: string): cleanMode is CleanMode {\n   return cleanMode === CleanOptions.FORCE || cleanMode === CleanOptions.DRY_RUN;\n}\n\nfunction isKnownOption(option: string): boolean {\n   return /^-[a-z]$/i.test(option) && CleanOptionValues.has(option.charAt(1));\n}\n\nfunction isInteractiveMode(option: string): boolean {\n   if (/^-[^\\-]/.test(option)) {\n      return option.indexOf('i') > 0;\n   }\n\n   return option === '--interactive';\n}\n", "import { ConfigGetResult, ConfigListSummary, ConfigValues } from '../../../typings';\nimport { last, splitOn } from '../utils';\n\nexport class ConfigList implements ConfigListSummary {\n   public files: string[] = [];\n   public values: { [fileName: string]: ConfigValues } = Object.create(null);\n\n   private _all: ConfigValues | undefined;\n\n   public get all(): ConfigValues {\n      if (!this._all) {\n         this._all = this.files.reduce((all: ConfigValues, file: string) => {\n            return Object.assign(all, this.values[file]);\n         }, {});\n      }\n\n      return this._all;\n   }\n\n   public addFile(file: string): ConfigValues {\n      if (!(file in this.values)) {\n         const latest = last(this.files);\n         this.values[file] = latest ? Object.create(this.values[latest]) : {};\n\n         this.files.push(file);\n      }\n\n      return this.values[file];\n   }\n\n   public addValue(file: string, key: string, value: string) {\n      const values = this.addFile(file);\n\n      if (!values.hasOwnProperty(key)) {\n         values[key] = value;\n      } else if (Array.isArray(values[key])) {\n         (values[key] as string[]).push(value);\n      } else {\n         values[key] = [values[key] as string, value];\n      }\n\n      this._all = undefined;\n   }\n}\n\nexport function configListParser(text: string): ConfigList {\n   const config = new ConfigList();\n\n   for (const item of configParser(text)) {\n      config.addValue(item.file, String(item.key), item.value);\n   }\n\n   return config;\n}\n\nexport function configGetParser(text: string, key: string): ConfigGetResult {\n   let value: string | null = null;\n   const values: string[] = [];\n   const scopes: Map<string, string[]> = new Map();\n\n   for (const item of configParser(text, key)) {\n      if (item.key !== key) {\n         continue;\n      }\n\n      values.push((value = item.value));\n\n      if (!scopes.has(item.file)) {\n         scopes.set(item.file, []);\n      }\n\n      scopes.get(item.file)!.push(value);\n   }\n\n   return {\n      key,\n      paths: Array.from(scopes.keys()),\n      scopes,\n      value,\n      values,\n   };\n}\n\nfunction configFilePath(filePath: string): string {\n   return filePath.replace(/^(file):/, '');\n}\n\nfunction* configParser(text: string, requestedKey: string | null = null) {\n   const lines = text.split('\\0');\n\n   for (let i = 0, max = lines.length - 1; i < max; ) {\n      const file = configFilePath(lines[i++]);\n\n      let value = lines[i++];\n      let key = requestedKey;\n\n      if (value.includes('\\n')) {\n         const line = splitOn(value, '\\n');\n         key = line[0];\n         value = line[1];\n      }\n\n      yield { file, key, value };\n   }\n}\n", "import type { ConfigGetResult, ConfigListSummary, SimpleGit } from '../../../typings';\nimport { configGetParser, configListParser } from '../responses/ConfigList';\nimport type { SimpleGitApi } from '../simple-git-api';\nimport type { StringTask } from '../types';\nimport { trailingFunctionArgument } from '../utils';\n\nexport enum GitConfigScope {\n   system = 'system',\n   global = 'global',\n   local = 'local',\n   worktree = 'worktree',\n}\n\nfunction asConfigScope<T extends GitConfigScope | undefined>(\n   scope: GitConfigScope | unknown,\n   fallback: T\n): GitConfigScope | T {\n   if (typeof scope === 'string' && GitConfigScope.hasOwnProperty(scope)) {\n      return scope as GitConfigScope;\n   }\n   return fallback;\n}\n\nfunction addConfigTask(\n   key: string,\n   value: string,\n   append: boolean,\n   scope: GitConfigScope\n): StringTask<string> {\n   const commands: string[] = ['config', `--${scope}`];\n\n   if (append) {\n      commands.push('--add');\n   }\n\n   commands.push(key, value);\n\n   return {\n      commands,\n      format: 'utf-8',\n      parser(text: string): string {\n         return text;\n      },\n   };\n}\n\nfunction getConfigTask(key: string, scope?: GitConfigScope): StringTask<ConfigGetResult> {\n   const commands: string[] = ['config', '--null', '--show-origin', '--get-all', key];\n\n   if (scope) {\n      commands.splice(1, 0, `--${scope}`);\n   }\n\n   return {\n      commands,\n      format: 'utf-8',\n      parser(text) {\n         return configGetParser(text, key);\n      },\n   };\n}\n\nfunction listConfigTask(scope?: GitConfigScope): StringTask<ConfigListSummary> {\n   const commands = ['config', '--list', '--show-origin', '--null'];\n\n   if (scope) {\n      commands.push(`--${scope}`);\n   }\n\n   return {\n      commands,\n      format: 'utf-8',\n      parser(text: string) {\n         return configListParser(text);\n      },\n   };\n}\n\nexport default function (): Pick<SimpleGit, 'addConfig' | 'getConfig' | 'listConfig'> {\n   return {\n      addConfig(this: SimpleGitApi, key: string, value: string, ...rest: unknown[]) {\n         return this._runTask(\n            addConfigTask(\n               key,\n               value,\n               rest[0] === true,\n               asConfigScope(rest[1], GitConfigScope.local)\n            ),\n            trailingFunctionArgument(arguments)\n         );\n      },\n\n      getConfig(this: SimpleGitApi, key: string, scope?: GitConfigScope) {\n         return this._runTask(\n            getConfigTask(key, asConfigScope(scope, undefined)),\n            trailingFunctionArgument(arguments)\n         );\n      },\n\n      listConfig(this: SimpleGitApi, ...rest: unknown[]) {\n         return this._runTask(\n            listConfigTask(asConfigScope(rest[0], undefined)),\n            trailingFunctionArgument(arguments)\n         );\n      },\n   };\n}\n", "import { GrepResult, SimpleGit } from '../../../typings';\nimport { SimpleGitApi } from '../simple-git-api';\nimport {\n   asNumber,\n   forEachLineWithContent,\n   getTrailingOptions,\n   NULL,\n   prefixedArray,\n   trailingFunctionArgument,\n} from '../utils';\n\nimport { configurationErrorTask } from './task';\n\nconst disallowedOptions = ['-h'];\n\nconst Query = Symbol('grepQuery');\n\nexport interface GitGrepQuery extends Iterable<string> {\n   /** Adds one or more terms to be grouped as an \"and\" to any other terms */\n   and(...and: string[]): this;\n\n   /** Adds one or more search terms - git.grep will \"or\" this to other terms */\n   param(...param: string[]): this;\n}\n\nclass GrepQuery implements GitGrepQuery {\n   private [Query]: string[] = [];\n\n   *[Symbol.iterator]() {\n      for (const query of this[Query]) {\n         yield query;\n      }\n   }\n\n   and(...and: string[]) {\n      and.length && this[Query].push('--and', '(', ...prefixedArray(and, '-e'), ')');\n      return this;\n   }\n\n   param(...param: string[]) {\n      this[Query].push(...prefixedArray(param, '-e'));\n      return this;\n   }\n}\n\n/**\n * Creates a new builder for a `git.grep` query with optional params\n */\nexport function grepQueryBuilder(...params: string[]): GitGrepQuery {\n   return new GrepQuery().param(...params);\n}\n\nfunction parseGrep(grep: string): GrepResult {\n   const paths: GrepResult['paths'] = new Set<string>();\n   const results: GrepResult['results'] = {};\n\n   forEachLineWithContent(grep, (input) => {\n      const [path, line, preview] = input.split(NULL);\n      paths.add(path);\n      (results[path] = results[path] || []).push({\n         line: asNumber(line),\n         path,\n         preview,\n      });\n   });\n\n   return {\n      paths,\n      results,\n   };\n}\n\nexport default function (): Pick<SimpleGit, 'grep'> {\n   return {\n      grep(this: SimpleGitApi, searchTerm: string | GitGrepQuery) {\n         const then = trailingFunctionArgument(arguments);\n         const options = getTrailingOptions(arguments);\n\n         for (const option of disallowedOptions) {\n            if (options.includes(option)) {\n               return this._runTask(\n                  configurationErrorTask(`git.grep: use of \"${option}\" is not supported.`),\n                  then\n               );\n            }\n         }\n\n         if (typeof searchTerm === 'string') {\n            searchTerm = grepQueryBuilder().param(searchTerm);\n         }\n\n         const commands = ['grep', '--null', '-n', '--full-name', ...options, ...searchTerm];\n\n         return this._runTask(\n            {\n               commands,\n               format: 'utf-8',\n               parser(stdOut) {\n                  return parseGrep(stdOut);\n               },\n            },\n            then\n         );\n      },\n   };\n}\n", "import { straightThroughStringTask } from './task';\nimport { Maybe, OptionFlags, Options } from '../types';\n\nexport enum ResetMode {\n   MIXED = 'mixed',\n   SOFT = 'soft',\n   HARD = 'hard',\n   MERGE = 'merge',\n   KEEP = 'keep',\n}\n\nconst ResetModes = Array.from(Object.values(ResetMode));\n\nexport type ResetOptions = Options &\n   OptionFlags<'-q' | '--quiet' | '--no-quiet' | '--pathspec-from-nul'> &\n   OptionFlags<'--pathspec-from-file', string>;\n\nexport function resetTask(mode: Maybe<ResetMode>, customArgs: string[]) {\n   const commands: string[] = ['reset'];\n   if (isValidResetMode(mode)) {\n      commands.push(`--${mode}`);\n   }\n   commands.push(...customArgs);\n\n   return straightThroughStringTask(commands);\n}\n\nexport function getResetMode(mode: ResetMode | any): Maybe<ResetMode> {\n   if (isValidResetMode(mode)) {\n      return mode;\n   }\n\n   switch (typeof mode) {\n      case 'string':\n      case 'undefined':\n         return ResetMode.SOFT;\n   }\n\n   return;\n}\n\nfunction isValidResetMode(mode: ResetMode | any): mode is ResetMode {\n   return ResetModes.includes(mode);\n}\n", "import { pathspec } from './args/pathspec';\nimport { GitConstructError } from './errors/git-construct-error';\nimport { GitError } from './errors/git-error';\nimport { GitPluginError } from './errors/git-plugin-error';\nimport { GitResponseError } from './errors/git-response-error';\nimport { TaskConfigurationError } from './errors/task-configuration-error';\nimport { CheckRepoActions } from './tasks/check-is-repo';\nimport { CleanOptions } from './tasks/clean';\nimport { GitConfigScope } from './tasks/config';\nimport { grepQueryBuilder } from './tasks/grep';\nimport { ResetMode } from './tasks/reset';\n\nexport {\n   CheckRepoActions,\n   CleanOptions,\n   GitConfigScope,\n   GitConstructError,\n   GitError,\n   GitPluginError,\n   GitResponseError,\n   ResetMode,\n   TaskConfigurationError,\n   grepQueryBuilder,\n   pathspec,\n};\n", "import { SimpleGitOptions } from '../types';\nimport { SimpleGitPlugin } from './simple-git-plugin';\nimport { GitPluginError } from '../errors/git-plugin-error';\n\nexport function abortPlugin(signal: SimpleGitOptions['abort']) {\n   if (!signal) {\n      return;\n   }\n\n   const onSpawnAfter: SimpleGitPlugin<'spawn.after'> = {\n      type: 'spawn.after',\n      action(_data, context) {\n         function kill() {\n            context.kill(new GitPluginError(undefined, 'abort', 'Abort signal received'));\n         }\n\n         signal.addEventListener('abort', kill);\n\n         context.spawned.on('close', () => signal.removeEventListener('abort', kill));\n      },\n   };\n\n   const onSpawnBefore: SimpleGitPlugin<'spawn.before'> = {\n      type: 'spawn.before',\n      action(_data, context) {\n         if (signal.aborted) {\n            context.kill(new GitPluginError(undefined, 'abort', 'Abort already signaled'));\n         }\n      },\n   };\n\n   return [onSpawnBefore, onSpawnAfter];\n}\n", "import type { SimpleGitPlugin } from './simple-git-plugin';\n\nimport { GitPluginError } from '../errors/git-plugin-error';\nimport type { SimpleGitPluginConfig } from '../types';\n\nfunction isConfigSwitch(arg: string | unknown) {\n   return typeof arg === 'string' && arg.trim().toLowerCase() === '-c';\n}\n\nfunction preventProtocolOverride(arg: string, next: string) {\n   if (!isConfigSwitch(arg)) {\n      return;\n   }\n\n   if (!/^\\s*protocol(.[a-z]+)?.allow/.test(next)) {\n      return;\n   }\n\n   throw new GitPluginError(\n      undefined,\n      'unsafe',\n      'Configuring protocol.allow is not permitted without enabling allowUnsafeExtProtocol'\n   );\n}\n\nfunction preventUploadPack(arg: string, method: string) {\n   if (/^\\s*--(upload|receive)-pack/.test(arg)) {\n      throw new GitPluginError(\n         undefined,\n         'unsafe',\n         `Use of --upload-pack or --receive-pack is not permitted without enabling allowUnsafePack`\n      );\n   }\n\n   if (method === 'clone' && /^\\s*-u\\b/.test(arg)) {\n      throw new GitPluginError(\n         undefined,\n         'unsafe',\n         `Use of clone with option -u is not permitted without enabling allowUnsafePack`\n      );\n   }\n\n   if (method === 'push' && /^\\s*--exec\\b/.test(arg)) {\n      throw new GitPluginError(\n         undefined,\n         'unsafe',\n         `Use of push with option --exec is not permitted without enabling allowUnsafePack`\n      );\n   }\n}\n\nexport function blockUnsafeOperationsPlugin({\n   allowUnsafeProtocolOverride = false,\n   allowUnsafePack = false,\n}: SimpleGitPluginConfig['unsafe'] = {}): SimpleGitPlugin<'spawn.args'> {\n   return {\n      type: 'spawn.args',\n      action(args, context) {\n         args.forEach((current, index) => {\n            const next = index < args.length ? args[index + 1] : '';\n\n            allowUnsafeProtocolOverride || preventProtocolOverride(current, next);\n            allowUnsafePack || preventUploadPack(current, context.method);\n         });\n\n         return args;\n      },\n   };\n}\n", "import { prefixedArray } from '../utils';\nimport { SimpleGitPlugin } from './simple-git-plugin';\n\nexport function commandConfigPrefixingPlugin(\n   configuration: string[]\n): SimpleGitPlugin<'spawn.args'> {\n   const prefix = prefixedArray(configuration, '-c');\n\n   return {\n      type: 'spawn.args',\n      action(data) {\n         return [...prefix, ...data];\n      },\n   };\n}\n", "import { deferred, DeferredPromise } from '@kwsites/promise-deferred';\nimport { SimpleGitPluginConfig } from '../types';\nimport { delay } from '../utils';\nimport { SimpleGitPlugin } from './simple-git-plugin';\n\nconst never = deferred().promise;\n\nexport function completionDetectionPlugin({\n   onClose = true,\n   onExit = 50,\n}: SimpleGitPluginConfig['completion'] = {}): SimpleGitPlugin<'spawn.after'> {\n   function createEvents() {\n      let exitCode = -1;\n      const events = {\n         close: deferred(),\n         closeTimeout: deferred(),\n         exit: deferred(),\n         exitTimeout: deferred(),\n      };\n\n      const result = Promise.race([\n         onClose === false ? never : events.closeTimeout.promise,\n         onExit === false ? never : events.exitTimeout.promise,\n      ]);\n\n      configureTimeout(onClose, events.close, events.closeTimeout);\n      configureTimeout(onExit, events.exit, events.exitTimeout);\n\n      return {\n         close(code: number) {\n            exitCode = code;\n            events.close.done();\n         },\n         exit(code: number) {\n            exitCode = code;\n            events.exit.done();\n         },\n         get exitCode() {\n            return exitCode;\n         },\n         result,\n      };\n   }\n\n   function configureTimeout(\n      flag: boolean | number,\n      event: DeferredPromise<void>,\n      timeout: DeferredPromise<void>\n   ) {\n      if (flag === false) {\n         return;\n      }\n\n      (flag === true ? event.promise : event.promise.then(() => delay(flag))).then(timeout.done);\n   }\n\n   return {\n      type: 'spawn.after',\n      async action(_data, { spawned, close }) {\n         const events = createEvents();\n\n         let deferClose = true;\n         let quickClose = () => void (deferClose = false);\n\n         spawned.stdout?.on('data', quickClose);\n         spawned.stderr?.on('data', quickClose);\n         spawned.on('error', quickClose);\n\n         spawned.on('close', (code: number) => events.close(code));\n         spawned.on('exit', (code: number) => events.exit(code));\n\n         try {\n            await events.result;\n            if (deferClose) {\n               await delay(50);\n            }\n            close(events.exitCode);\n         } catch (err) {\n            close(events.exitCode, err as Error);\n         }\n      },\n   };\n}\n", "import { GitError } from '../errors/git-error';\nimport { GitExecutorResult, SimpleGitPluginConfig } from '../types';\nimport { SimpleGitPlugin } from './simple-git-plugin';\n\ntype TaskResult = Omit<GitExecutorResult, 'rejection'>;\n\nfunction isTaskError(result: TaskResult) {\n   return !!(result.exitCode && result.stdErr.length);\n}\n\nfunction getErrorMessage(result: TaskResult) {\n   return Buffer.concat([...result.stdOut, ...result.stdErr]);\n}\n\nexport function errorDetectionHandler(\n   overwrite = false,\n   isError = isTaskError,\n   errorMessage: (result: TaskResult) => Buffer | Error = getErrorMessage\n) {\n   return (error: Buffer | Error | undefined, result: TaskResult) => {\n      if ((!overwrite && error) || !isError(result)) {\n         return error;\n      }\n\n      return errorMessage(result);\n   };\n}\n\nexport function errorDetectionPlugin(\n   config: SimpleGitPluginConfig['errors']\n): SimpleGitPlugin<'task.error'> {\n   return {\n      type: 'task.error',\n      action(data, context) {\n         const error = config(data.error, {\n            stdErr: context.stdErr,\n            stdOut: context.stdOut,\n            exitCode: context.exitCode,\n         });\n\n         if (Buffer.isBuffer(error)) {\n            return { error: new GitError(undefined, error.toString('utf-8')) };\n         }\n\n         return {\n            error,\n         };\n      },\n   };\n}\n", "import { SimpleGitPlugin, SimpleGitPluginType, SimpleGitPluginTypes } from './simple-git-plugin';\nimport { append, asArray } from '../utils';\n\nexport class PluginStore {\n   private plugins: Set<SimpleGitPlugin<SimpleGitPluginType>> = new Set();\n\n   public add<T extends SimpleGitPluginType>(\n      plugin: void | SimpleGitPlugin<T> | SimpleGitPlugin<T>[]\n   ) {\n      const plugins: SimpleGitPlugin<T>[] = [];\n\n      asArray(plugin).forEach((plugin) => plugin && this.plugins.add(append(plugins, plugin)));\n\n      return () => {\n         plugins.forEach((plugin) => this.plugins.delete(plugin));\n      };\n   }\n\n   public exec<T extends SimpleGitPluginType>(\n      type: T,\n      data: SimpleGitPluginTypes[T]['data'],\n      context: SimpleGitPluginTypes[T]['context']\n   ): typeof data {\n      let output = data;\n      const contextual = Object.freeze(Object.create(context));\n\n      for (const plugin of this.plugins) {\n         if (plugin.type === type) {\n            output = plugin.action(output, contextual);\n         }\n      }\n\n      return output;\n   }\n}\n", "import { SimpleGitOptions } from '../types';\nimport { asNumber, including } from '../utils';\n\nimport { SimpleGitPlugin } from './simple-git-plugin';\n\nexport function progressMonitorPlugin(progress: Exclude<SimpleGitOptions['progress'], void>) {\n   const progressCommand = '--progress';\n   const progressMethods = ['checkout', 'clone', 'fetch', 'pull', 'push'];\n\n   const onProgress: SimpleGitPlugin<'spawn.after'> = {\n      type: 'spawn.after',\n      action(_data, context) {\n         if (!context.commands.includes(progressCommand)) {\n            return;\n         }\n\n         context.spawned.stderr?.on('data', (chunk: Buffer) => {\n            const message = /^([\\s\\S]+?):\\s*(\\d+)% \\((\\d+)\\/(\\d+)\\)/.exec(chunk.toString('utf8'));\n            if (!message) {\n               return;\n            }\n\n            progress({\n               method: context.method,\n               stage: progressEventStage(message[1]),\n               progress: asNumber(message[2]),\n               processed: asNumber(message[3]),\n               total: asNumber(message[4]),\n            });\n         });\n      },\n   };\n\n   const onArgs: SimpleGitPlugin<'spawn.args'> = {\n      type: 'spawn.args',\n      action(args, context) {\n         if (!progressMethods.includes(context.method)) {\n            return args;\n         }\n\n         return including(args, progressCommand);\n      },\n   };\n\n   return [onArgs, onProgress];\n}\n\nfunction progressEventStage(input: string) {\n   return String(input.toLowerCase().split(' ', 1)) || 'unknown';\n}\n", "import { ChildProcess, SpawnOptions } from 'child_process';\nimport { GitExecutorResult } from '../types';\n\ntype SimpleGitTaskPluginContext = {\n   readonly method: string;\n   readonly commands: string[];\n};\n\nexport interface SimpleGitPluginTypes {\n   'spawn.args': {\n      data: string[];\n      context: SimpleGitTaskPluginContext & {};\n   };\n   'spawn.options': {\n      data: Partial<SpawnOptions>;\n      context: SimpleGitTaskPluginContext & {};\n   };\n   'spawn.before': {\n      data: void;\n      context: SimpleGitTaskPluginContext & {\n         kill(reason: Error): void;\n      };\n   };\n   'spawn.after': {\n      data: void;\n      context: SimpleGitTaskPluginContext & {\n         spawned: ChildProcess;\n         close(exitCode: number, reason?: Error): void;\n         kill(reason: Error): void;\n      };\n   };\n   'task.error': {\n      data: { error?: Error };\n      context: SimpleGitTaskPluginContext & GitExecutorResult;\n   };\n}\n\nexport type SimpleGitPluginType = keyof SimpleGitPluginTypes;\n\nexport interface SimpleGitPlugin<T extends SimpleGitPluginType> {\n   action(\n      data: SimpleGitPluginTypes[T]['data'],\n      context: SimpleGitPluginTypes[T]['context']\n   ): typeof data;\n\n   type: T;\n}\n", "import { SpawnOptions } from 'child_process';\nimport { pick } from '../utils';\nimport { SimpleGitPlugin } from './simple-git-plugin';\n\nexport function spawnOptionsPlugin(\n   spawnOptions: Partial<SpawnOptions>\n): SimpleGitPlugin<'spawn.options'> {\n   const options = pick(spawnOptions, ['uid', 'gid']);\n\n   return {\n      type: 'spawn.options',\n      action(data) {\n         return { ...options, ...data };\n      },\n   };\n}\n", "import type { SimpleGitPlugin } from './simple-git-plugin';\n\nimport type { SimpleGitOptions } from '../types';\nimport { GitPluginError } from '../errors/git-plugin-error';\n\nexport function timeoutPlugin({\n   block,\n   stdErr = true,\n   stdOut = true,\n}: Exclude<SimpleGitOptions['timeout'], undefined>): SimpleGitPlugin<'spawn.after'> | void {\n   if (block > 0) {\n      return {\n         type: 'spawn.after',\n         action(_data, context) {\n            let timeout: NodeJS.Timeout;\n\n            function wait() {\n               timeout && clearTimeout(timeout);\n               timeout = setTimeout(kill, block);\n            }\n\n            function stop() {\n               context.spawned.stdout?.off('data', wait);\n               context.spawned.stderr?.off('data', wait);\n               context.spawned.off('exit', stop);\n               context.spawned.off('close', stop);\n               timeout && clearTimeout(timeout);\n            }\n\n            function kill() {\n               stop();\n               context.kill(new GitPluginError(undefined, 'timeout', `block timeout reached`));\n            }\n\n            stdOut && context.spawned.stdout?.on('data', wait);\n            stdErr && context.spawned.stderr?.on('data', wait);\n            context.spawned.on('exit', stop);\n            context.spawned.on('close', stop);\n\n            wait();\n         },\n      };\n   }\n}\n", "export * from './abort-plugin';\nexport * from './block-unsafe-operations-plugin';\nexport * from './command-config-prefixing-plugin';\nexport * from './completion-detection.plugin';\nexport * from './error-detection.plugin';\nexport * from './plugin-store';\nexport * from './progress-monitor-plugin';\nexport * from './simple-git-plugin';\nexport * from './spawn-options-plugin';\nexport * from './timout-plugin';\n", "import { SimpleGitPlugin } from './simple-git-plugin';\nimport { isPathSpec, toPaths } from '../args/pathspec';\n\nexport function suffixPathsPlugin(): SimpleGitPlugin<'spawn.args'> {\n   return {\n      type: 'spawn.args',\n      action(data) {\n         const prefix: string[] = [];\n         let suffix: undefined | string[];\n         function append(args: string[]) {\n            (suffix = suffix || []).push(...args);\n         }\n\n         for (let i = 0; i < data.length; i++) {\n            const param = data[i];\n\n            if (isPathSpec(param)) {\n               append(toPaths(param));\n               continue;\n            }\n\n            if (param === '--') {\n               append(\n                  data.slice(i + 1).flatMap((item) => (isPathSpec(item) && toPaths(item)) || item)\n               );\n               break;\n            }\n\n            prefix.push(param);\n         }\n\n         return !suffix ? prefix : [...prefix, '--', ...suffix.map(String)];\n      },\n   };\n}\n", "import debug, { Debugger } from 'debug';\nimport {\n   append,\n   filterHasLength,\n   filterString,\n   filterType,\n   NOOP,\n   objectToString,\n   remove,\n} from './utils';\nimport { Maybe } from './types';\n\ndebug.formatters.L = (value: any) => String(filterHasLength(value) ? value.length : '-');\ndebug.formatters.B = (value: Buffer) => {\n   if (Buffer.isBuffer(value)) {\n      return value.toString('utf8');\n   }\n   return objectToString(value);\n};\n\ntype OutputLoggingHandler = (message: string, ...args: any[]) => void;\n\nfunction createLog() {\n   return debug('simple-git');\n}\n\nexport interface OutputLogger extends OutputLoggingHandler {\n   readonly label: string;\n\n   info: OutputLoggingHandler;\n   step(nextStep?: string): OutputLogger;\n   sibling(name: string): OutputLogger;\n}\n\nfunction prefixedLogger(\n   to: Debugger,\n   prefix: string,\n   forward?: OutputLoggingHandler\n): OutputLoggingHandler {\n   if (!prefix || !String(prefix).replace(/\\s*/, '')) {\n      return !forward\n         ? to\n         : (message, ...args) => {\n              to(message, ...args);\n              forward(message, ...args);\n           };\n   }\n\n   return (message, ...args) => {\n      to(`%s ${message}`, prefix, ...args);\n      if (forward) {\n         forward(message, ...args);\n      }\n   };\n}\n\nfunction childLoggerName(\n   name: Maybe<string>,\n   childDebugger: Maybe<Debugger>,\n   { namespace: parentNamespace }: Debugger\n): string {\n   if (typeof name === 'string') {\n      return name;\n   }\n   const childNamespace = (childDebugger && childDebugger.namespace) || '';\n\n   if (childNamespace.startsWith(parentNamespace)) {\n      return childNamespace.substr(parentNamespace.length + 1);\n   }\n\n   return childNamespace || parentNamespace;\n}\n\nexport function createLogger(\n   label: string,\n   verbose?: string | Debugger,\n   initialStep?: string,\n   infoDebugger = createLog()\n): OutputLogger {\n   const labelPrefix = (label && `[${label}]`) || '';\n\n   const spawned: OutputLogger[] = [];\n   const debugDebugger: Maybe<Debugger> =\n      typeof verbose === 'string' ? infoDebugger.extend(verbose) : verbose;\n   const key = childLoggerName(filterType(verbose, filterString), debugDebugger, infoDebugger);\n\n   return step(initialStep);\n\n   function sibling(name: string, initial?: string) {\n      return append(\n         spawned,\n         createLogger(label, key.replace(/^[^:]+/, name), initial, infoDebugger)\n      );\n   }\n\n   function step(phase?: string) {\n      const stepPrefix = (phase && `[${phase}]`) || '';\n      const debug = (debugDebugger && prefixedLogger(debugDebugger, stepPrefix)) || NOOP;\n      const info = prefixedLogger(infoDebugger, `${labelPrefix} ${stepPrefix}`, debug);\n\n      return Object.assign(debugDebugger ? debug : info, {\n         label,\n         sibling,\n         info,\n         step,\n      });\n   }\n}\n\n/**\n * The `GitLogger` is used by the main `SimpleGit` runner to handle logging\n * any warnings or errors.\n */\nexport class GitLogger {\n   public error: OutputLoggingHandler;\n\n   public warn: OutputLoggingHandler;\n\n   constructor(private _out: Debugger = createLog()) {\n      this.error = prefixedLogger(_out, '[ERROR]');\n      this.warn = prefixedLogger(_out, '[WARN]');\n   }\n\n   silent(silence = false) {\n      if (silence !== this._out.enabled) {\n         return;\n      }\n\n      const { namespace } = this._out;\n      const env = (process.env.DEBUG || '').split(',').filter((s) => !!s);\n      const hasOn = env.includes(namespace);\n      const hasOff = env.includes(`-${namespace}`);\n\n      // enabling the log\n      if (!silence) {\n         if (hasOff) {\n            remove(env, `-${namespace}`);\n         } else {\n            env.push(namespace);\n         }\n      } else {\n         if (hasOn) {\n            remove(env, namespace);\n         } else {\n            env.push(`-${namespace}`);\n         }\n      }\n\n      debug.enable(env.join(','));\n   }\n}\n", "import { SimpleGitTask } from '../types';\nimport { GitError } from '../errors/git-error';\nimport { createLogger, OutputLogger } from '../git-logger';\n\ntype AnySimpleGitTask = SimpleGitTask<any>;\n\ntype TaskInProgress = {\n   name: string;\n   logger: OutputLogger;\n   task: AnySimpleGitTask;\n};\n\nexport class TasksPendingQueue {\n   private _queue: Map<AnySimpleGitTask, TaskInProgress> = new Map();\n\n   constructor(private logLabel = 'GitExecutor') {}\n\n   private withProgress(task: AnySimpleGitTask) {\n      return this._queue.get(task);\n   }\n\n   private createProgress(task: AnySimpleGitTask): TaskInProgress {\n      const name = TasksPendingQueue.getName(task.commands[0]);\n      const logger = createLogger(this.logLabel, name);\n\n      return {\n         task,\n         logger,\n         name,\n      };\n   }\n\n   push(task: AnySimpleGitTask): TaskInProgress {\n      const progress = this.createProgress(task);\n      progress.logger('Adding task to the queue, commands = %o', task.commands);\n\n      this._queue.set(task, progress);\n\n      return progress;\n   }\n\n   fatal(err: GitError) {\n      for (const [task, { logger }] of Array.from(this._queue.entries())) {\n         if (task === err.task) {\n            logger.info(`Failed %o`, err);\n            logger(\n               `Fatal exception, any as-yet un-started tasks run through this executor will not be attempted`\n            );\n         } else {\n            logger.info(\n               `A fatal exception occurred in a previous task, the queue has been purged: %o`,\n               err.message\n            );\n         }\n\n         this.complete(task);\n      }\n\n      if (this._queue.size !== 0) {\n         throw new Error(`Queue size should be zero after fatal: ${this._queue.size}`);\n      }\n   }\n\n   complete(task: AnySimpleGitTask) {\n      const progress = this.withProgress(task);\n      if (progress) {\n         this._queue.delete(task);\n      }\n   }\n\n   attempt(task: AnySimpleGitTask): TaskInProgress {\n      const progress = this.withProgress(task);\n      if (!progress) {\n         throw new GitError(undefined, 'TasksPendingQueue: attempt called for an unknown task');\n      }\n      progress.logger('Starting task');\n\n      return progress;\n   }\n\n   static getName(name = 'empty') {\n      return `task:${name}:${++TasksPendingQueue.counter}`;\n   }\n\n   private static counter = 0;\n}\n", "import { spawn, SpawnOptions } from 'child_process';\nimport { GitError } from '../errors/git-error';\nimport { OutputLogger } from '../git-logger';\nimport { PluginStore } from '../plugins';\nimport { EmptyTask, isBufferTask, isEmptyTask } from '../tasks/task';\nimport {\n   GitExecutorResult,\n   Maybe,\n   outputHandler,\n   RunnableTask,\n   SimpleGitExecutor,\n   SimpleGitTask,\n} from '../types';\nimport { callTaskParser, first, GitOutputStreams, objectToString } from '../utils';\nimport { Scheduler } from './scheduler';\nimport { TasksPendingQueue } from './tasks-pending-queue';\n\nexport class GitExecutorChain implements SimpleGitExecutor {\n   private _chain: Promise<any> = Promise.resolve();\n   private _queue = new TasksPendingQueue();\n   private _cwd: string | undefined;\n\n   public get binary() {\n      return this._executor.binary;\n   }\n\n   public get cwd() {\n      return this._cwd || this._executor.cwd;\n   }\n\n   public set cwd(cwd: string) {\n      this._cwd = cwd;\n   }\n\n   public get env() {\n      return this._executor.env;\n   }\n\n   public get outputHandler() {\n      return this._executor.outputHandler;\n   }\n\n   constructor(\n      private _executor: SimpleGitExecutor,\n      private _scheduler: Scheduler,\n      private _plugins: PluginStore\n   ) {}\n\n   public chain() {\n      return this;\n   }\n\n   public push<R>(task: SimpleGitTask<R>): Promise<R> {\n      this._queue.push(task);\n\n      return (this._chain = this._chain.then(() => this.attemptTask(task)));\n   }\n\n   private async attemptTask<R>(task: SimpleGitTask<R>): Promise<void | R> {\n      const onScheduleComplete = await this._scheduler.next();\n      const onQueueComplete = () => this._queue.complete(task);\n\n      try {\n         const { logger } = this._queue.attempt(task);\n         return (await (isEmptyTask(task)\n            ? this.attemptEmptyTask(task, logger)\n            : this.attemptRemoteTask(task, logger))) as R;\n      } catch (e) {\n         throw this.onFatalException(task, e as Error);\n      } finally {\n         onQueueComplete();\n         onScheduleComplete();\n      }\n   }\n\n   private onFatalException<R>(task: SimpleGitTask<R>, e: Error) {\n      const gitError =\n         e instanceof GitError ? Object.assign(e, { task }) : new GitError(task, e && String(e));\n\n      this._chain = Promise.resolve();\n      this._queue.fatal(gitError);\n\n      return gitError;\n   }\n\n   private async attemptRemoteTask<R>(task: RunnableTask<R>, logger: OutputLogger) {\n      const args = this._plugins.exec(\n         'spawn.args',\n         [...task.commands],\n         pluginContext(task, task.commands)\n      );\n\n      const raw = await this.gitResponse(\n         task,\n         this.binary,\n         args,\n         this.outputHandler,\n         logger.step('SPAWN')\n      );\n      const outputStreams = await this.handleTaskData(task, args, raw, logger.step('HANDLE'));\n\n      logger(`passing response to task's parser as a %s`, task.format);\n\n      if (isBufferTask(task)) {\n         return callTaskParser(task.parser, outputStreams);\n      }\n\n      return callTaskParser(task.parser, outputStreams.asStrings());\n   }\n\n   private async attemptEmptyTask(task: EmptyTask, logger: OutputLogger) {\n      logger(`empty task bypassing child process to call to task's parser`);\n      return task.parser(this);\n   }\n\n   private handleTaskData<R>(\n      task: SimpleGitTask<R>,\n      args: string[],\n      result: GitExecutorResult,\n      logger: OutputLogger\n   ): Promise<GitOutputStreams> {\n      const { exitCode, rejection, stdOut, stdErr } = result;\n\n      return new Promise((done, fail) => {\n         logger(`Preparing to handle process response exitCode=%d stdOut=`, exitCode);\n\n         const { error } = this._plugins.exec(\n            'task.error',\n            { error: rejection },\n            {\n               ...pluginContext(task, args),\n               ...result,\n            }\n         );\n\n         if (error && task.onError) {\n            logger.info(`exitCode=%s handling with custom error handler`);\n\n            return task.onError(\n               result,\n               error,\n               (newStdOut) => {\n                  logger.info(`custom error handler treated as success`);\n                  logger(`custom error returned a %s`, objectToString(newStdOut));\n\n                  done(\n                     new GitOutputStreams(\n                        Array.isArray(newStdOut) ? Buffer.concat(newStdOut) : newStdOut,\n                        Buffer.concat(stdErr)\n                     )\n                  );\n               },\n               fail\n            );\n         }\n\n         if (error) {\n            logger.info(\n               `handling as error: exitCode=%s stdErr=%s rejection=%o`,\n               exitCode,\n               stdErr.length,\n               rejection\n            );\n            return fail(error);\n         }\n\n         logger.info(`retrieving task output complete`);\n         done(new GitOutputStreams(Buffer.concat(stdOut), Buffer.concat(stdErr)));\n      });\n   }\n\n   private async gitResponse<R>(\n      task: SimpleGitTask<R>,\n      command: string,\n      args: string[],\n      outputHandler: Maybe<outputHandler>,\n      logger: OutputLogger\n   ): Promise<GitExecutorResult> {\n      const outputLogger = logger.sibling('output');\n      const spawnOptions: SpawnOptions = this._plugins.exec(\n         'spawn.options',\n         {\n            cwd: this.cwd,\n            env: this.env,\n            windowsHide: true,\n         },\n         pluginContext(task, task.commands)\n      );\n\n      return new Promise((done) => {\n         const stdOut: Buffer[] = [];\n         const stdErr: Buffer[] = [];\n\n         logger.info(`%s %o`, command, args);\n         logger('%O', spawnOptions);\n\n         let rejection = this._beforeSpawn(task, args);\n         if (rejection) {\n            return done({\n               stdOut,\n               stdErr,\n               exitCode: 9901,\n               rejection,\n            });\n         }\n\n         this._plugins.exec('spawn.before', undefined, {\n            ...pluginContext(task, args),\n            kill(reason) {\n               rejection = reason || rejection;\n            },\n         });\n\n         const spawned = spawn(command, args, spawnOptions);\n\n         spawned.stdout!.on(\n            'data',\n            onDataReceived(stdOut, 'stdOut', logger, outputLogger.step('stdOut'))\n         );\n         spawned.stderr!.on(\n            'data',\n            onDataReceived(stdErr, 'stdErr', logger, outputLogger.step('stdErr'))\n         );\n\n         spawned.on('error', onErrorReceived(stdErr, logger));\n\n         if (outputHandler) {\n            logger(`Passing child process stdOut/stdErr to custom outputHandler`);\n            outputHandler(command, spawned.stdout!, spawned.stderr!, [...args]);\n         }\n\n         this._plugins.exec('spawn.after', undefined, {\n            ...pluginContext(task, args),\n            spawned,\n            close(exitCode: number, reason?: Error) {\n               done({\n                  stdOut,\n                  stdErr,\n                  exitCode,\n                  rejection: rejection || reason,\n               });\n            },\n            kill(reason: Error) {\n               if (spawned.killed) {\n                  return;\n               }\n\n               rejection = reason;\n               spawned.kill('SIGINT');\n            },\n         });\n      });\n   }\n\n   private _beforeSpawn<R>(task: SimpleGitTask<R>, args: string[]) {\n      let rejection: Maybe<Error>;\n      this._plugins.exec('spawn.before', undefined, {\n         ...pluginContext(task, args),\n         kill(reason) {\n            rejection = reason || rejection;\n         },\n      });\n\n      return rejection;\n   }\n}\n\nfunction pluginContext<R>(task: SimpleGitTask<R>, commands: string[]) {\n   return {\n      method: first(task.commands) || '',\n      commands,\n   };\n}\n\nfunction onErrorReceived(target: Buffer[], logger: OutputLogger) {\n   return (err: Error) => {\n      logger(`[ERROR] child process exception %o`, err);\n      target.push(Buffer.from(String(err.stack), 'ascii'));\n   };\n}\n\nfunction onDataReceived(\n   target: Buffer[],\n   name: string,\n   logger: OutputLogger,\n   output: OutputLogger\n) {\n   return (buffer: Buffer) => {\n      logger(`%s received %L bytes`, name, buffer);\n      output(`%B`, buffer);\n      target.push(buffer);\n   };\n}\n", "import type { PluginStore } from '../plugins';\nimport type { GitExecutorEnv, outputHandler, SimpleGitExecutor, SimpleGitTask } from '../types';\n\nimport { GitExecutorChain } from './git-executor-chain';\nimport { Scheduler } from './scheduler';\n\nexport class GitExecutor implements SimpleGitExecutor {\n   private _chain = new GitExecutorChain(this, this._scheduler, this._plugins);\n\n   public env: GitExecutorEnv;\n   public outputHandler?: outputHandler;\n\n   constructor(\n      public binary: string = 'git',\n      public cwd: string,\n      private _scheduler: Scheduler,\n      private _plugins: PluginStore\n   ) {}\n\n   chain(): SimpleGitExecutor {\n      return new GitExecutorChain(this, this._scheduler, this._plugins);\n   }\n\n   push<R>(task: SimpleGitTask<R>): Promise<R> {\n      return this._chain.push(task);\n   }\n}\n", "import { GitError } from './errors/git-error';\nimport { GitResponseError } from './errors/git-response-error';\nimport { SimpleGitTask, SimpleGitTaskCallback } from './types';\nimport { NOOP } from './utils';\n\nexport function taskCallback<R>(\n   task: SimpleGitTask<R>,\n   response: Promise<R>,\n   callback: SimpleGitTaskCallback<R> = NOOP\n) {\n   const onSuccess = (data: R) => {\n      callback(null, data);\n   };\n\n   const onError = (err: GitError | GitResponseError) => {\n      if (err?.task === task) {\n         callback(\n            err instanceof GitResponseError ? addDeprecationNoticeToError(err) : err,\n            undefined as any\n         );\n      }\n   };\n\n   response.then(onSuccess, onError);\n}\n\nfunction addDeprecationNoticeToError(err: GitResponseError) {\n   let log = (name: string) => {\n      console.warn(\n         `simple-git deprecation notice: accessing GitResponseError.${name} should be GitResponseError.git.${name}, this will no longer be available in version 3`\n      );\n      log = NOOP;\n   };\n\n   return Object.create(err, Object.getOwnPropertyNames(err.git).reduce(descriptorReducer, {}));\n\n   function descriptorReducer(all: PropertyDescriptorMap, name: string): typeof all {\n      if (name in err) {\n         return all;\n      }\n\n      all[name] = {\n         enumerable: false,\n         configurable: false,\n         get() {\n            log(name);\n            return err.git[name];\n         },\n      };\n\n      return all;\n   }\n}\n", "import { folderExists } from '../utils';\nimport { SimpleGitExecutor } from '../types';\nimport { adhocExecTask } from './task';\n\nexport function changeWorkingDirectoryTask(directory: string, root?: SimpleGitExecutor) {\n   return adhocExecTask((instance: SimpleGitExecutor) => {\n      if (!folderExists(directory)) {\n         throw new Error(`Git.cwd: cannot change to non-directory \"${directory}\"`);\n      }\n\n      return ((root || instance).cwd = directory);\n   });\n}\n", "import type { SimpleGit } from '../../../typings';\nimport type { SimpleGitApi } from '../simple-git-api';\nimport { getTrailingOptions, remove, trailingFunctionArgument } from '../utils';\nimport { straightThroughStringTask } from './task';\n\nfunction checkoutTask(args: string[]) {\n   const commands = ['checkout', ...args];\n   if (commands[1] === '-b' && commands.includes('-B')) {\n      commands[1] = remove(commands, '-B');\n   }\n\n   return straightThroughStringTask(commands);\n}\n\nexport default function (): Pick<SimpleGit, 'checkout' | 'checkoutBranch' | 'checkoutLocalBranch'> {\n   return {\n      checkout(this: SimpleGitApi) {\n         return this._runTask(\n            checkoutTask(getTrailingOptions(arguments, 1)),\n            trailingFunctionArgument(arguments)\n         );\n      },\n\n      checkoutBranch(this: SimpleGitApi, branchName, startPoint) {\n         return this._runTask(\n            checkoutTask(['-b', branchName, startPoint, ...getTrailingOptions(arguments)]),\n            trailingFunctionArgument(arguments)\n         );\n      },\n\n      checkoutLocalBranch(this: SimpleGitApi, branchName) {\n         return this._runTask(\n            checkoutTask(['-b', branchName, ...getTrailingOptions(arguments)]),\n            trailingFunctionArgument(arguments)\n         );\n      },\n   };\n}\n", "import { CommitResult } from '../../../typings';\nimport { LineParser, parseStringResponse } from '../utils';\n\nconst parsers: LineParser<CommitResult>[] = [\n   new LineParser(/^\\[([^\\s]+)( \\([^)]+\\))? ([^\\]]+)/, (result, [branch, root, commit]) => {\n      result.branch = branch;\n      result.commit = commit;\n      result.root = !!root;\n   }),\n   new LineParser(/\\s*Author:\\s(.+)/i, (result, [author]) => {\n      const parts = author.split('<');\n      const email = parts.pop();\n\n      if (!email || !email.includes('@')) {\n         return;\n      }\n\n      result.author = {\n         email: email.substr(0, email.length - 1),\n         name: parts.join('<').trim(),\n      };\n   }),\n   new LineParser(\n      /(\\d+)[^,]*(?:,\\s*(\\d+)[^,]*)(?:,\\s*(\\d+))/g,\n      (result, [changes, insertions, deletions]) => {\n         result.summary.changes = parseInt(changes, 10) || 0;\n         result.summary.insertions = parseInt(insertions, 10) || 0;\n         result.summary.deletions = parseInt(deletions, 10) || 0;\n      }\n   ),\n   new LineParser(\n      /^(\\d+)[^,]*(?:,\\s*(\\d+)[^(]+\\(([+-]))?/,\n      (result, [changes, lines, direction]) => {\n         result.summary.changes = parseInt(changes, 10) || 0;\n         const count = parseInt(lines, 10) || 0;\n         if (direction === '-') {\n            result.summary.deletions = count;\n         } else if (direction === '+') {\n            result.summary.insertions = count;\n         }\n      }\n   ),\n];\n\nexport function parseCommitResult(stdOut: string): CommitResult {\n   const result: CommitResult = {\n      author: null,\n      branch: '',\n      commit: '',\n      root: false,\n      summary: {\n         changes: 0,\n         insertions: 0,\n         deletions: 0,\n      },\n   };\n   return parseStringResponse(result, parsers, stdOut);\n}\n", "import type { CommitResult, SimpleGit } from '../../../typings';\nimport type { SimpleGitApi } from '../simple-git-api';\nimport type { StringTask } from '../types';\nimport { parseCommitResult } from '../parsers/parse-commit';\nimport {\n   asArray,\n   filterArray,\n   filterStringOrStringArray,\n   filterType,\n   getTrailingOptions,\n   prefixedArray,\n   trailingFunctionArgument,\n} from '../utils';\nimport { configurationErrorTask } from './task';\n\nexport function commitTask(\n   message: string[],\n   files: string[],\n   customArgs: string[]\n): StringTask<CommitResult> {\n   const commands: string[] = [\n      '-c',\n      'core.abbrev=40',\n      'commit',\n      ...prefixedArray(message, '-m'),\n      ...files,\n      ...customArgs,\n   ];\n\n   return {\n      commands,\n      format: 'utf-8',\n      parser: parseCommitResult,\n   };\n}\n\nexport default function (): Pick<SimpleGit, 'commit'> {\n   return {\n      commit(this: SimpleGitApi, message: string | string[], ...rest: unknown[]) {\n         const next = trailingFunctionArgument(arguments);\n         const task =\n            rejectDeprecatedSignatures(message) ||\n            commitTask(\n               asArray(message),\n               asArray(filterType(rest[0], filterStringOrStringArray, [])),\n               [...filterType(rest[1], filterArray, []), ...getTrailingOptions(arguments, 0, true)]\n            );\n\n         return this._runTask(task, next);\n      },\n   };\n\n   function rejectDeprecatedSignatures(message?: unknown) {\n      return (\n         !filterStringOrStringArray(message) &&\n         configurationErrorTask(\n            `git.commit: requires the commit message to be supplied as a string/string[]`\n         )\n      );\n   }\n}\n", "import { straightThroughStringTask } from './task';\nimport { StringTask } from '../types';\n\n/**\n * Task used by `git.hashObject`\n */\nexport function hashObjectTask(filePath: string, write: boolean): StringTask<string> {\n   const commands = ['hash-object', filePath];\n   if (write) {\n      commands.push('-w');\n   }\n\n   return straightThroughStringTask(commands, true);\n}\n", "import { InitResult } from '../../../typings';\n\nexport class InitSummary implements InitResult {\n   constructor(\n      public readonly bare: boolean,\n      public readonly path: string,\n      public readonly existing: boolean,\n      public readonly gitDir: string\n   ) {}\n}\n\nconst initResponseRegex = /^Init.+ repository in (.+)$/;\nconst reInitResponseRegex = /^Rein.+ in (.+)$/;\n\nexport function parseInit(bare: boolean, path: string, text: string) {\n   const response = String(text).trim();\n   let result;\n\n   if ((result = initResponseRegex.exec(response))) {\n      return new InitSummary(bare, path, false, result[1]);\n   }\n\n   if ((result = reInitResponseRegex.exec(response))) {\n      return new InitSummary(bare, path, true, result[1]);\n   }\n\n   let gitDir = '';\n   const tokens = response.split(' ');\n   while (tokens.length) {\n      const token = tokens.shift();\n      if (token === 'in') {\n         gitDir = tokens.join(' ');\n         break;\n      }\n   }\n\n   return new InitSummary(bare, path, /^re/i.test(response), gitDir);\n}\n", "import { InitResult } from '../../../typings';\nimport { parseInit } from '../responses/InitSummary';\nimport { StringTask } from '../types';\n\nconst bareCommand = '--bare';\n\nfunction hasBareCommand(command: string[]) {\n   return command.includes(bareCommand);\n}\n\nexport function initTask(bare = false, path: string, customArgs: string[]): StringTask<InitResult> {\n   const commands = ['init', ...customArgs];\n   if (bare && !hasBareCommand(commands)) {\n      commands.splice(1, 0, bareCommand);\n   }\n\n   return {\n      commands,\n      format: 'utf-8',\n      parser(text: string): InitResult {\n         return parseInit(commands.includes('--bare'), path, text);\n      },\n   };\n}\n", "export enum LogFormat {\n   NONE = '',\n   STAT = '--stat',\n   NUM_STAT = '--numstat',\n   NAME_ONLY = '--name-only',\n   NAME_STATUS = '--name-status',\n}\n\nconst logFormatRegex = /^--(stat|numstat|name-only|name-status)(=|$)/;\n\nexport function logFormatFromCommand(customArgs: string[]) {\n   for (let i = 0; i < customArgs.length; i++) {\n      const format = logFormatRegex.exec(customArgs[i]);\n      if (format) {\n         return `--${format[1]}` as LogFormat;\n      }\n   }\n\n   return LogFormat.NONE;\n}\n\nexport function isLogFormat(customArg: string | unknown) {\n   return logFormatRegex.test(customArg as string);\n}\n", "import { DiffResult, DiffResultBinaryFile, DiffResultTextFile } from '../../../typings';\n\n/***\n * The DiffSummary is returned as a response to getting `git().status()`\n */\nexport class DiffSummary implements DiffResult {\n   changed = 0;\n   deletions = 0;\n   insertions = 0;\n\n   files: Array<DiffResultTextFile | DiffResultBinaryFile> = [];\n}\n", "import { DiffResult } from '../../../typings';\nimport { LogFormat } from '../args/log-format';\nimport { DiffSummary } from '../responses/DiffSummary';\nimport { asNumber, LineParser, parseStringResponse } from '../utils';\n\nconst statParser = [\n   new LineParser<DiffResult>(\n      /(.+)\\s+\\|\\s+(\\d+)(\\s+[+\\-]+)?$/,\n      (result, [file, changes, alterations = '']) => {\n         result.files.push({\n            file: file.trim(),\n            changes: asNumber(changes),\n            insertions: alterations.replace(/[^+]/g, '').length,\n            deletions: alterations.replace(/[^-]/g, '').length,\n            binary: false,\n         });\n      }\n   ),\n   new LineParser<DiffResult>(\n      /(.+) \\|\\s+Bin ([0-9.]+) -> ([0-9.]+) ([a-z]+)/,\n      (result, [file, before, after]) => {\n         result.files.push({\n            file: file.trim(),\n            before: asNumber(before),\n            after: asNumber(after),\n            binary: true,\n         });\n      }\n   ),\n   new LineParser<DiffResult>(\n      /(\\d+) files? changed\\s*((?:, \\d+ [^,]+){0,2})/,\n      (result, [changed, summary]) => {\n         const inserted = /(\\d+) i/.exec(summary);\n         const deleted = /(\\d+) d/.exec(summary);\n\n         result.changed = asNumber(changed);\n         result.insertions = asNumber(inserted?.[1]);\n         result.deletions = asNumber(deleted?.[1]);\n      }\n   ),\n];\n\nconst numStatParser = [\n   new LineParser<DiffResult>(\n      /(\\d+)\\t(\\d+)\\t(.+)$/,\n      (result, [changesInsert, changesDelete, file]) => {\n         const insertions = asNumber(changesInsert);\n         const deletions = asNumber(changesDelete);\n\n         result.changed++;\n         result.insertions += insertions;\n         result.deletions += deletions;\n\n         result.files.push({\n            file,\n            changes: insertions + deletions,\n            insertions,\n            deletions,\n            binary: false,\n         });\n      }\n   ),\n   new LineParser<DiffResult>(/-\\t-\\t(.+)$/, (result, [file]) => {\n      result.changed++;\n\n      result.files.push({\n         file,\n         after: 0,\n         before: 0,\n         binary: true,\n      });\n   }),\n];\n\nconst nameOnlyParser = [\n   new LineParser<DiffResult>(/(.+)$/, (result, [file]) => {\n      result.changed++;\n      result.files.push({\n         file,\n         changes: 0,\n         insertions: 0,\n         deletions: 0,\n         binary: false,\n      });\n   }),\n];\n\nconst nameStatusParser = [\n   new LineParser<DiffResult>(/([ACDMRTUXB])\\s*(.+)$/, (result, [_status, file]) => {\n      result.changed++;\n      result.files.push({\n         file,\n         changes: 0,\n         insertions: 0,\n         deletions: 0,\n         binary: false,\n      });\n   }),\n];\n\nconst diffSummaryParsers: Record<LogFormat, LineParser<DiffResult>[]> = {\n   [LogFormat.NONE]: statParser,\n   [LogFormat.STAT]: statParser,\n   [LogFormat.NUM_STAT]: numStatParser,\n   [LogFormat.NAME_STATUS]: nameStatusParser,\n   [LogFormat.NAME_ONLY]: nameOnlyParser,\n};\n\nexport function getDiffParser(format = LogFormat.NONE) {\n   const parser = diffSummaryParsers[format];\n\n   return (stdOut: string) => parseStringResponse(new DiffSummary(), parser, stdOut, false);\n}\n", "import { ListLogLine, LogResult } from '../../../typings';\nimport { toLinesWithContent } from '../utils';\nimport { getDiffParser } from './parse-diff-summary';\nimport { LogFormat } from '../args/log-format';\n\nexport const START_BOUNDARY = '\u00F2\u00F2\u00F2\u00F2\u00F2\u00F2 ';\n\nexport const COMMIT_BOUNDARY = ' \u00F2\u00F2';\n\nexport const SPLITTER = ' \u00F2 ';\n\nconst defaultFieldNames = ['hash', 'date', 'message', 'refs', 'author_name', 'author_email'];\n\nfunction lineBuilder(tokens: string[], fields: string[]): any {\n   return fields.reduce(\n      (line, field, index) => {\n         line[field] = tokens[index] || '';\n         return line;\n      },\n      Object.create({ diff: null }) as any\n   );\n}\n\nexport function createListLogSummaryParser<T = any>(\n   splitter = SPLITTER,\n   fields = defaultFieldNames,\n   logFormat = LogFormat.NONE\n) {\n   const parseDiffResult = getDiffParser(logFormat);\n\n   return function (stdOut: string): LogResult<T> {\n      const all: ReadonlyArray<T & ListLogLine> = toLinesWithContent(\n         stdOut,\n         true,\n         START_BOUNDARY\n      ).map(function (item) {\n         const lineDetail = item.trim().split(COMMIT_BOUNDARY);\n         const listLogLine: T & ListLogLine = lineBuilder(\n            lineDetail[0].trim().split(splitter),\n            fields\n         );\n\n         if (lineDetail.length > 1 && !!lineDetail[1].trim()) {\n            listLogLine.diff = parseDiffResult(lineDetail[1]);\n         }\n\n         return listLogLine;\n      });\n\n      return {\n         all,\n         latest: (all.length && all[0]) || null,\n         total: all.length,\n      };\n   };\n}\n", "import { StringTask } from '../types';\nimport { DiffResult } from '../../../typings';\nimport { isLogFormat, LogFormat, logFormatFromCommand } from '../args/log-format';\nimport { getDiffParser } from '../parsers/parse-diff-summary';\nimport { configurationErrorTask, EmptyTask } from './task';\n\nexport function diffSummaryTask(customArgs: string[]): StringTask<DiffResult> | EmptyTask {\n   let logFormat = logFormatFromCommand(customArgs);\n\n   const commands = ['diff'];\n\n   if (logFormat === LogFormat.NONE) {\n      logFormat = LogFormat.STAT;\n      commands.push('--stat=4096');\n   }\n\n   commands.push(...customArgs);\n\n   return (\n      validateLogFormatConfig(commands) || {\n         commands,\n         format: 'utf-8',\n         parser: getDiffParser(logFormat),\n      }\n   );\n}\n\nexport function validateLogFormatConfig(customArgs: unknown[]): EmptyTask | void {\n   const flags = customArgs.filter(isLogFormat);\n\n   if (flags.length > 1) {\n      return configurationErrorTask(\n         `Summary flags are mutually exclusive - pick one of ${flags.join(',')}`\n      );\n   }\n\n   if (flags.length && customArgs.includes('-z')) {\n      return configurationErrorTask(\n         `Summary flag ${flags} parsing is not compatible with null termination option '-z'`\n      );\n   }\n}\n", "import type { Options, StringTask } from '../types';\nimport type { LogResult, SimpleGit } from '../../../typings';\nimport { logFormatFromCommand } from '../args/log-format';\nimport { pathspec } from '../args/pathspec';\nimport {\n   COMMIT_BOUNDARY,\n   createListLogSummaryParser,\n   SPLITTER,\n   START_BOUNDARY,\n} from '../parsers/parse-list-log-summary';\nimport {\n   appendTaskOptions,\n   filterArray,\n   filterPrimitives,\n   filterString,\n   filterType,\n   trailingFunctionArgument,\n   trailingOptionsArgument,\n} from '../utils';\nimport { SimpleGitApi } from '../simple-git-api';\nimport { configurationErrorTask } from './task';\nimport { validateLogFormatConfig } from './diff';\n\nenum excludeOptions {\n   '--pretty',\n   'max-count',\n   'maxCount',\n   'n',\n   'file',\n   'format',\n   'from',\n   'to',\n   'splitter',\n   'symmetric',\n   'mailMap',\n   'multiLine',\n   'strictDate',\n}\n\nexport interface DefaultLogFields {\n   hash: string;\n   date: string;\n   message: string;\n   refs: string;\n   body: string;\n   author_name: string;\n   author_email: string;\n}\n\nexport type LogOptions<T = DefaultLogFields> = {\n   file?: string;\n   format?: T;\n   from?: string;\n   mailMap?: boolean;\n   maxCount?: number;\n   multiLine?: boolean;\n   splitter?: string;\n   strictDate?: boolean;\n   symmetric?: boolean;\n   to?: string;\n};\n\ninterface ParsedLogOptions {\n   fields: string[];\n   splitter: string;\n   commands: string[];\n}\n\nfunction prettyFormat(\n   format: Record<string, string | unknown>,\n   splitter: string\n): [string[], string] {\n   const fields: string[] = [];\n   const formatStr: string[] = [];\n\n   Object.keys(format).forEach((field) => {\n      fields.push(field);\n      formatStr.push(String(format[field]));\n   });\n\n   return [fields, formatStr.join(splitter)];\n}\n\nfunction userOptions<T extends Options>(input: T): Options {\n   return Object.keys(input).reduce((out, key) => {\n      if (!(key in excludeOptions)) {\n         out[key] = input[key];\n      }\n      return out;\n   }, {} as Options);\n}\n\nexport function parseLogOptions<T extends Options>(\n   opt: Options | LogOptions<T> = {},\n   customArgs: string[] = []\n): ParsedLogOptions {\n   const splitter = filterType(opt.splitter, filterString, SPLITTER);\n   const format =\n      !filterPrimitives(opt.format) && opt.format\n         ? opt.format\n         : {\n              hash: '%H',\n              date: opt.strictDate === false ? '%ai' : '%aI',\n              message: '%s',\n              refs: '%D',\n              body: opt.multiLine ? '%B' : '%b',\n              author_name: opt.mailMap !== false ? '%aN' : '%an',\n              author_email: opt.mailMap !== false ? '%aE' : '%ae',\n           };\n\n   const [fields, formatStr] = prettyFormat(format, splitter);\n\n   const suffix: string[] = [];\n   const command: string[] = [\n      `--pretty=format:${START_BOUNDARY}${formatStr}${COMMIT_BOUNDARY}`,\n      ...customArgs,\n   ];\n\n   const maxCount: number | undefined = (opt as any).n || (opt as any)['max-count'] || opt.maxCount;\n   if (maxCount) {\n      command.push(`--max-count=${maxCount}`);\n   }\n\n   if (opt.from || opt.to) {\n      const rangeOperator = opt.symmetric !== false ? '...' : '..';\n      suffix.push(`${opt.from || ''}${rangeOperator}${opt.to || ''}`);\n   }\n\n   if (filterString(opt.file)) {\n      command.push('--follow', pathspec(opt.file));\n   }\n\n   appendTaskOptions(userOptions(opt as Options), command);\n\n   return {\n      fields,\n      splitter,\n      commands: [...command, ...suffix],\n   };\n}\n\nexport function logTask<T>(\n   splitter: string,\n   fields: string[],\n   customArgs: string[]\n): StringTask<LogResult<T>> {\n   const parser = createListLogSummaryParser(splitter, fields, logFormatFromCommand(customArgs));\n\n   return {\n      commands: ['log', ...customArgs],\n      format: 'utf-8',\n      parser,\n   };\n}\n\nexport default function (): Pick<SimpleGit, 'log'> {\n   return {\n      log<T extends Options>(this: SimpleGitApi, ...rest: unknown[]) {\n         const next = trailingFunctionArgument(arguments);\n         const options = parseLogOptions<T>(\n            trailingOptionsArgument(arguments),\n            filterType(arguments[0], filterArray)\n         );\n         const task =\n            rejectDeprecatedSignatures(...rest) ||\n            validateLogFormatConfig(options.commands) ||\n            createLogTask(options);\n\n         return this._runTask(task, next);\n      },\n   };\n\n   function createLogTask(options: ParsedLogOptions) {\n      return logTask(options.splitter, options.fields, options.commands);\n   }\n\n   function rejectDeprecatedSignatures(from?: unknown, to?: unknown) {\n      return (\n         filterString(from) &&\n         filterString(to) &&\n         configurationErrorTask(\n            `git.log(string, string) should be replaced with git.log({ from: string, to: string })`\n         )\n      );\n   }\n}\n", "import {\n   MergeConflict,\n   MergeConflictDeletion,\n   MergeDetail,\n   MergeResultStatus,\n} from '../../../typings';\n\nexport class MergeSummaryConflict implements MergeConflict {\n   constructor(\n      public readonly reason: string,\n      public readonly file: string | null = null,\n      public readonly meta?: MergeConflictDeletion\n   ) {}\n\n   toString() {\n      return `${this.file}:${this.reason}`;\n   }\n}\n\nexport class MergeSummaryDetail implements MergeDetail {\n   public conflicts: MergeConflict[] = [];\n   public merges: string[] = [];\n   public result: MergeResultStatus = 'success';\n\n   get failed() {\n      return this.conflicts.length > 0;\n   }\n\n   get reason() {\n      return this.result;\n   }\n\n   toString() {\n      if (this.conflicts.length) {\n         return `CONFLICTS: ${this.conflicts.join(', ')}`;\n      }\n\n      return 'OK';\n   }\n}\n", "import {\n   PullDetailFileChanges,\n   PullDetailSummary,\n   PullFailedResult,\n   PullResult,\n} from '../../../typings';\n\nexport class PullSummary implements PullResult {\n   public remoteMessages = {\n      all: [],\n   };\n   public created = [];\n   public deleted: string[] = [];\n   public files: string[] = [];\n   public deletions: PullDetailFileChanges = {};\n   public insertions: PullDetailFileChanges = {};\n   public summary: PullDetailSummary = {\n      changes: 0,\n      deletions: 0,\n      insertions: 0,\n   };\n}\n\nexport class PullFailedSummary implements PullFailedResult {\n   remote = '';\n   hash = {\n      local: '',\n      remote: '',\n   };\n   branch = {\n      local: '',\n      remote: '',\n   };\n   message = '';\n\n   toString() {\n      return this.message;\n   }\n}\n", "import {\n   RemoteMessageResult,\n   RemoteMessages,\n   RemoteMessagesObjectEnumeration,\n} from '../../../typings';\nimport { asNumber, RemoteLineParser } from '../utils';\n\nfunction objectEnumerationResult<T extends RemoteMessages = RemoteMessages>(\n   remoteMessages: T\n): RemoteMessagesObjectEnumeration {\n   return (remoteMessages.objects = remoteMessages.objects || {\n      compressing: 0,\n      counting: 0,\n      enumerating: 0,\n      packReused: 0,\n      reused: { count: 0, delta: 0 },\n      total: { count: 0, delta: 0 },\n   });\n}\n\nfunction asObjectCount(source: string) {\n   const count = /^\\s*(\\d+)/.exec(source);\n   const delta = /delta (\\d+)/i.exec(source);\n\n   return {\n      count: asNumber((count && count[1]) || '0'),\n      delta: asNumber((delta && delta[1]) || '0'),\n   };\n}\n\nexport const remoteMessagesObjectParsers: RemoteLineParser<RemoteMessageResult<RemoteMessages>>[] =\n   [\n      new RemoteLineParser(\n         /^remote:\\s*(enumerating|counting|compressing) objects: (\\d+),/i,\n         (result, [action, count]) => {\n            const key = action.toLowerCase();\n            const enumeration = objectEnumerationResult(result.remoteMessages);\n\n            Object.assign(enumeration, { [key]: asNumber(count) });\n         }\n      ),\n      new RemoteLineParser(\n         /^remote:\\s*(enumerating|counting|compressing) objects: \\d+% \\(\\d+\\/(\\d+)\\),/i,\n         (result, [action, count]) => {\n            const key = action.toLowerCase();\n            const enumeration = objectEnumerationResult(result.remoteMessages);\n\n            Object.assign(enumeration, { [key]: asNumber(count) });\n         }\n      ),\n      new RemoteLineParser(\n         /total ([^,]+), reused ([^,]+), pack-reused (\\d+)/i,\n         (result, [total, reused, packReused]) => {\n            const objects = objectEnumerationResult(result.remoteMessages);\n            objects.total = asObjectCount(total);\n            objects.reused = asObjectCount(reused);\n            objects.packReused = asNumber(packReused);\n         }\n      ),\n   ];\n", "import { PushResultRemoteMessages, RemoteMessageResult, RemoteMessages } from '../../../typings';\nimport { asNumber, parseStringResponse, RemoteLineParser } from '../utils';\nimport { remoteMessagesObjectParsers } from './parse-remote-objects';\n\nconst parsers: RemoteLineParser<RemoteMessageResult<PushResultRemoteMessages | RemoteMessages>>[] =\n   [\n      new RemoteLineParser(/^remote:\\s*(.+)$/, (result, [text]) => {\n         result.remoteMessages.all.push(text.trim());\n         return false;\n      }),\n      ...remoteMessagesObjectParsers,\n      new RemoteLineParser(\n         [/create a (?:pull|merge) request/i, /\\s(https?:\\/\\/\\S+)$/],\n         (result, [pullRequestUrl]) => {\n            (result.remoteMessages as PushResultRemoteMessages).pullRequestUrl = pullRequestUrl;\n         }\n      ),\n      new RemoteLineParser(\n         [/found (\\d+) vulnerabilities.+\\(([^)]+)\\)/i, /\\s(https?:\\/\\/\\S+)$/],\n         (result, [count, summary, url]) => {\n            (result.remoteMessages as PushResultRemoteMessages).vulnerabilities = {\n               count: asNumber(count),\n               summary,\n               url,\n            };\n         }\n      ),\n   ];\n\nexport function parseRemoteMessages<T extends RemoteMessages = RemoteMessages>(\n   _stdOut: string,\n   stdErr: string\n): RemoteMessageResult {\n   return parseStringResponse({ remoteMessages: new RemoteMessageSummary() as T }, parsers, stdErr);\n}\n\nexport class RemoteMessageSummary implements RemoteMessages {\n   public readonly all: string[] = [];\n}\n", "import { PullDetail, PullFailedResult, PullResult, RemoteMessages } from '../../../typings';\nimport { PullFailedSummary, PullSummary } from '../responses/PullSummary';\nimport { TaskParser } from '../types';\nimport { append, LineParser, parseStringResponse } from '../utils';\nimport { parseRemoteMessages } from './parse-remote-messages';\n\nconst FILE_UPDATE_REGEX = /^\\s*(.+?)\\s+\\|\\s+\\d+\\s*(\\+*)(-*)/;\nconst SUMMARY_REGEX = /(\\d+)\\D+((\\d+)\\D+\\(\\+\\))?(\\D+(\\d+)\\D+\\(-\\))?/;\nconst ACTION_REGEX = /^(create|delete) mode \\d+ (.+)/;\n\nconst parsers: LineParser<PullResult>[] = [\n   new LineParser(FILE_UPDATE_REGEX, (result, [file, insertions, deletions]) => {\n      result.files.push(file);\n\n      if (insertions) {\n         result.insertions[file] = insertions.length;\n      }\n\n      if (deletions) {\n         result.deletions[file] = deletions.length;\n      }\n   }),\n   new LineParser(SUMMARY_REGEX, (result, [changes, , insertions, , deletions]) => {\n      if (insertions !== undefined || deletions !== undefined) {\n         result.summary.changes = +changes || 0;\n         result.summary.insertions = +insertions || 0;\n         result.summary.deletions = +deletions || 0;\n         return true;\n      }\n      return false;\n   }),\n   new LineParser(ACTION_REGEX, (result, [action, file]) => {\n      append(result.files, file);\n      append(action === 'create' ? result.created : result.deleted, file);\n   }),\n];\n\nconst errorParsers: LineParser<PullFailedResult>[] = [\n   new LineParser(/^from\\s(.+)$/i, (result, [remote]) => void (result.remote = remote)),\n   new LineParser(/^fatal:\\s(.+)$/, (result, [message]) => void (result.message = message)),\n   new LineParser(\n      /([a-z0-9]+)\\.\\.([a-z0-9]+)\\s+(\\S+)\\s+->\\s+(\\S+)$/,\n      (result, [hashLocal, hashRemote, branchLocal, branchRemote]) => {\n         result.branch.local = branchLocal;\n         result.hash.local = hashLocal;\n         result.branch.remote = branchRemote;\n         result.hash.remote = hashRemote;\n      }\n   ),\n];\n\nexport const parsePullDetail: TaskParser<string, PullDetail> = (stdOut, stdErr) => {\n   return parseStringResponse(new PullSummary(), parsers, [stdOut, stdErr]);\n};\n\nexport const parsePullResult: TaskParser<string, PullResult> = (stdOut, stdErr) => {\n   return Object.assign(\n      new PullSummary(),\n      parsePullDetail(stdOut, stdErr),\n      parseRemoteMessages<RemoteMessages>(stdOut, stdErr)\n   );\n};\n\nexport function parsePullErrorResult(stdOut: string, stdErr: string) {\n   const pullError = parseStringResponse(new PullFailedSummary(), errorParsers, [stdOut, stdErr]);\n\n   return pullError.message && pullError;\n}\n", "import { MergeDetail, MergeResult } from '../../../typings';\nimport { MergeSummaryConflict, MergeSummaryDetail } from '../responses/MergeSummary';\nimport { TaskParser } from '../types';\nimport { LineParser, parseStringResponse } from '../utils';\nimport { parsePullResult } from './parse-pull';\n\nconst parsers: LineParser<MergeDetail>[] = [\n   new LineParser(/^Auto-merging\\s+(.+)$/, (summary, [autoMerge]) => {\n      summary.merges.push(autoMerge);\n   }),\n   new LineParser(/^CONFLICT\\s+\\((.+)\\): Merge conflict in (.+)$/, (summary, [reason, file]) => {\n      summary.conflicts.push(new MergeSummaryConflict(reason, file));\n   }),\n   new LineParser(\n      /^CONFLICT\\s+\\((.+\\/delete)\\): (.+) deleted in (.+) and/,\n      (summary, [reason, file, deleteRef]) => {\n         summary.conflicts.push(new MergeSummaryConflict(reason, file, { deleteRef }));\n      }\n   ),\n   new LineParser(/^CONFLICT\\s+\\((.+)\\):/, (summary, [reason]) => {\n      summary.conflicts.push(new MergeSummaryConflict(reason, null));\n   }),\n   new LineParser(/^Automatic merge failed;\\s+(.+)$/, (summary, [result]) => {\n      summary.result = result;\n   }),\n];\n\n/**\n * Parse the complete response from `git.merge`\n */\nexport const parseMergeResult: TaskParser<string, MergeResult> = (stdOut, stdErr) => {\n   return Object.assign(parseMergeDetail(stdOut, stdErr), parsePullResult(stdOut, stdErr));\n};\n\n/**\n * Parse the merge specific detail (ie: not the content also available in the pull detail) from `git.mnerge`\n * @param stdOut\n */\nexport const parseMergeDetail: TaskParser<string, MergeDetail> = (stdOut) => {\n   return parseStringResponse(new MergeSummaryDetail(), parsers, stdOut);\n};\n", "import { MergeResult } from '../../../typings';\nimport { GitResponseError } from '../errors/git-response-error';\nimport { parseMergeResult } from '../parsers/parse-merge';\nimport { StringTask } from '../types';\nimport { configurationErrorTask, EmptyTask } from './task';\n\nexport function mergeTask(customArgs: string[]): EmptyTask | StringTask<MergeResult> {\n   if (!customArgs.length) {\n      return configurationErrorTask('Git.merge requires at least one option');\n   }\n\n   return {\n      commands: ['merge', ...customArgs],\n      format: 'utf-8',\n      parser(stdOut, stdErr): MergeResult {\n         const merge = parseMergeResult(stdOut, stdErr);\n         if (merge.failed) {\n            throw new GitResponseError(merge);\n         }\n\n         return merge;\n      },\n   };\n}\n", "import {\n   PushDetail,\n   PushResult,\n   PushResultPushedItem,\n   PushResultRemoteMessages,\n} from '../../../typings';\nimport { TaskParser } from '../types';\nimport { LineParser, parseStringResponse } from '../utils';\nimport { parseRemoteMessages } from './parse-remote-messages';\n\nfunction pushResultPushedItem(local: string, remote: string, status: string): PushResultPushedItem {\n   const deleted = status.includes('deleted');\n   const tag = status.includes('tag') || /^refs\\/tags/.test(local);\n   const alreadyUpdated = !status.includes('new');\n\n   return {\n      deleted,\n      tag,\n      branch: !tag,\n      new: !alreadyUpdated,\n      alreadyUpdated,\n      local,\n      remote,\n   };\n}\n\nconst parsers: LineParser<PushDetail>[] = [\n   new LineParser(/^Pushing to (.+)$/, (result, [repo]) => {\n      result.repo = repo;\n   }),\n   new LineParser(/^updating local tracking ref '(.+)'/, (result, [local]) => {\n      result.ref = {\n         ...(result.ref || {}),\n         local,\n      };\n   }),\n   new LineParser(/^[=*-]\\s+([^:]+):(\\S+)\\s+\\[(.+)]$/, (result, [local, remote, type]) => {\n      result.pushed.push(pushResultPushedItem(local, remote, type));\n   }),\n   new LineParser(\n      /^Branch '([^']+)' set up to track remote branch '([^']+)' from '([^']+)'/,\n      (result, [local, remote, remoteName]) => {\n         result.branch = {\n            ...(result.branch || {}),\n            local,\n            remote,\n            remoteName,\n         };\n      }\n   ),\n   new LineParser(\n      /^([^:]+):(\\S+)\\s+([a-z0-9]+)\\.\\.([a-z0-9]+)$/,\n      (result, [local, remote, from, to]) => {\n         result.update = {\n            head: {\n               local,\n               remote,\n            },\n            hash: {\n               from,\n               to,\n            },\n         };\n      }\n   ),\n];\n\nexport const parsePushResult: TaskParser<string, PushResult> = (stdOut, stdErr) => {\n   const pushDetail = parsePushDetail(stdOut, stdErr);\n   const responseDetail = parseRemoteMessages<PushResultRemoteMessages>(stdOut, stdErr);\n\n   return {\n      ...pushDetail,\n      ...responseDetail,\n   };\n};\n\nexport const parsePushDetail: TaskParser<string, PushDetail> = (stdOut, stdErr) => {\n   return parseStringResponse({ pushed: [] }, parsers, [stdOut, stdErr]);\n};\n", "import { PushResult } from '../../../typings';\nimport { parsePushResult as parser } from '../parsers/parse-push';\nimport { StringTask } from '../types';\nimport { append, remove } from '../utils';\n\ntype PushRef = { remote?: string; branch?: string };\n\nexport function pushTagsTask(ref: PushRef = {}, customArgs: string[]): StringTask<PushResult> {\n   append(customArgs, '--tags');\n   return pushTask(ref, customArgs);\n}\n\nexport function pushTask(ref: PushRef = {}, customArgs: string[]): StringTask<PushResult> {\n   const commands = ['push', ...customArgs];\n   if (ref.branch) {\n      commands.splice(1, 0, ref.branch);\n   }\n   if (ref.remote) {\n      commands.splice(1, 0, ref.remote);\n   }\n\n   remove(commands, '-v');\n   append(commands, '--verbose');\n   append(commands, '--porcelain');\n\n   return {\n      commands,\n      format: 'utf-8',\n      parser,\n   };\n}\n", "import { SimpleGit } from '../../../typings';\nimport { SimpleGitApi } from '../simple-git-api';\nimport { getTrailingOptions, trailingFunctionArgument } from '../utils';\nimport { straightThroughBufferTask, straightThroughStringTask } from './task';\n\nexport default function (): Pick<SimpleGit, 'showBuffer' | 'show'> {\n   return {\n      showBuffer(this: SimpleGitApi) {\n         const commands = ['show', ...getTrailingOptions(arguments, 1)];\n         if (!commands.includes('--binary')) {\n            commands.splice(1, 0, '--binary');\n         }\n\n         return this._runTask(\n            straightThroughBufferTask(commands),\n            trailingFunctionArgument(arguments)\n         );\n      },\n\n      show(this: SimpleGitApi) {\n         const commands = ['show', ...getTrailingOptions(arguments, 1)];\n         return this._runTask(\n            straightThroughStringTask(commands),\n            trailingFunctionArgument(arguments)\n         );\n      },\n   };\n}\n", "import { FileStatusResult } from '../../../typings';\n\nexport const fromPathRegex = /^(.+) -> (.+)$/;\n\nexport class FileStatusSummary implements FileStatusResult {\n   public readonly from: string | undefined;\n\n   constructor(\n      public path: string,\n      public index: string,\n      public working_dir: string\n   ) {\n      if ('R' === index + working_dir) {\n         const detail = fromPathRegex.exec(path) || [null, path, path];\n         this.from = detail[1] || '';\n         this.path = detail[2] || '';\n      }\n   }\n}\n", "import { StatusResult } from '../../../typings';\nimport { append, NULL } from '../utils';\nimport { FileStatusSummary } from './FileStatusSummary';\n\ntype StatusLineParser = (result: StatusResult, file: string) => void;\n\nexport class StatusSummary implements StatusResult {\n   public not_added = [];\n   public conflicted = [];\n   public created = [];\n   public deleted = [];\n   public ignored = undefined;\n   public modified = [];\n   public renamed = [];\n   public files = [];\n   public staged = [];\n   public ahead = 0;\n   public behind = 0;\n   public current = null;\n   public tracking = null;\n   public detached = false;\n\n   public isClean = () => {\n      return !this.files.length;\n   };\n}\n\nenum PorcelainFileStatus {\n   ADDED = 'A',\n   DELETED = 'D',\n   MODIFIED = 'M',\n   RENAMED = 'R',\n   COPIED = 'C',\n   UNMERGED = 'U',\n   UNTRACKED = '?',\n   IGNORED = '!',\n   NONE = ' ',\n}\n\nfunction renamedFile(line: string) {\n   const [to, from] = line.split(NULL);\n\n   return {\n      from: from || to,\n      to,\n   };\n}\n\nfunction parser(\n   indexX: PorcelainFileStatus,\n   indexY: PorcelainFileStatus,\n   handler: StatusLineParser\n): [string, StatusLineParser] {\n   return [`${indexX}${indexY}`, handler];\n}\n\nfunction conflicts(indexX: PorcelainFileStatus, ...indexY: PorcelainFileStatus[]) {\n   return indexY.map((y) => parser(indexX, y, (result, file) => append(result.conflicted, file)));\n}\n\nconst parsers: Map<string, StatusLineParser> = new Map([\n   parser(PorcelainFileStatus.NONE, PorcelainFileStatus.ADDED, (result, file) =>\n      append(result.created, file)\n   ),\n   parser(PorcelainFileStatus.NONE, PorcelainFileStatus.DELETED, (result, file) =>\n      append(result.deleted, file)\n   ),\n   parser(PorcelainFileStatus.NONE, PorcelainFileStatus.MODIFIED, (result, file) =>\n      append(result.modified, file)\n   ),\n\n   parser(\n      PorcelainFileStatus.ADDED,\n      PorcelainFileStatus.NONE,\n      (result, file) => append(result.created, file) && append(result.staged, file)\n   ),\n   parser(\n      PorcelainFileStatus.ADDED,\n      PorcelainFileStatus.MODIFIED,\n      (result, file) =>\n         append(result.created, file) &&\n         append(result.staged, file) &&\n         append(result.modified, file)\n   ),\n\n   parser(\n      PorcelainFileStatus.DELETED,\n      PorcelainFileStatus.NONE,\n      (result, file) => append(result.deleted, file) && append(result.staged, file)\n   ),\n\n   parser(\n      PorcelainFileStatus.MODIFIED,\n      PorcelainFileStatus.NONE,\n      (result, file) => append(result.modified, file) && append(result.staged, file)\n   ),\n   parser(\n      PorcelainFileStatus.MODIFIED,\n      PorcelainFileStatus.MODIFIED,\n      (result, file) => append(result.modified, file) && append(result.staged, file)\n   ),\n\n   parser(PorcelainFileStatus.RENAMED, PorcelainFileStatus.NONE, (result, file) => {\n      append(result.renamed, renamedFile(file));\n   }),\n   parser(PorcelainFileStatus.RENAMED, PorcelainFileStatus.MODIFIED, (result, file) => {\n      const renamed = renamedFile(file);\n      append(result.renamed, renamed);\n      append(result.modified, renamed.to);\n   }),\n   parser(PorcelainFileStatus.IGNORED, PorcelainFileStatus.IGNORED, (_result, _file) => {\n      append((_result.ignored = _result.ignored || []), _file);\n   }),\n\n   parser(PorcelainFileStatus.UNTRACKED, PorcelainFileStatus.UNTRACKED, (result, file) =>\n      append(result.not_added, file)\n   ),\n\n   ...conflicts(PorcelainFileStatus.ADDED, PorcelainFileStatus.ADDED, PorcelainFileStatus.UNMERGED),\n   ...conflicts(\n      PorcelainFileStatus.DELETED,\n      PorcelainFileStatus.DELETED,\n      PorcelainFileStatus.UNMERGED\n   ),\n   ...conflicts(\n      PorcelainFileStatus.UNMERGED,\n      PorcelainFileStatus.ADDED,\n      PorcelainFileStatus.DELETED,\n      PorcelainFileStatus.UNMERGED\n   ),\n\n   [\n      '##',\n      (result, line) => {\n         const aheadReg = /ahead (\\d+)/;\n         const behindReg = /behind (\\d+)/;\n         const currentReg = /^(.+?(?=(?:\\.{3}|\\s|$)))/;\n         const trackingReg = /\\.{3}(\\S*)/;\n         const onEmptyBranchReg = /\\son\\s([\\S]+)$/;\n         let regexResult;\n\n         regexResult = aheadReg.exec(line);\n         result.ahead = (regexResult && +regexResult[1]) || 0;\n\n         regexResult = behindReg.exec(line);\n         result.behind = (regexResult && +regexResult[1]) || 0;\n\n         regexResult = currentReg.exec(line);\n         result.current = regexResult && regexResult[1];\n\n         regexResult = trackingReg.exec(line);\n         result.tracking = regexResult && regexResult[1];\n\n         regexResult = onEmptyBranchReg.exec(line);\n         result.current = (regexResult && regexResult[1]) || result.current;\n\n         result.detached = /\\(no branch\\)/.test(line);\n      },\n   ],\n]);\n\nexport const parseStatusSummary = function (text: string): StatusResult {\n   const lines = text.split(NULL);\n   const status = new StatusSummary();\n\n   for (let i = 0, l = lines.length; i < l; ) {\n      let line = lines[i++].trim();\n\n      if (!line) {\n         continue;\n      }\n\n      if (line.charAt(0) === PorcelainFileStatus.RENAMED) {\n         line += NULL + (lines[i++] || '');\n      }\n\n      splitLine(status, line);\n   }\n\n   return status;\n};\n\nfunction splitLine(result: StatusResult, lineStr: string) {\n   const trimmed = lineStr.trim();\n   switch (' ') {\n      case trimmed.charAt(2):\n         return data(trimmed.charAt(0), trimmed.charAt(1), trimmed.substr(3));\n      case trimmed.charAt(1):\n         return data(PorcelainFileStatus.NONE, trimmed.charAt(0), trimmed.substr(2));\n      default:\n         return;\n   }\n\n   function data(index: string, workingDir: string, path: string) {\n      const raw = `${index}${workingDir}`;\n      const handler = parsers.get(raw);\n\n      if (handler) {\n         handler(result, path);\n      }\n\n      if (raw !== '##' && raw !== '!!') {\n         result.files.push(new FileStatusSummary(path.replace(/\\0.+$/, ''), index, workingDir));\n      }\n   }\n}\n", "import { StatusResult } from '../../../typings';\nimport { parseStatusSummary } from '../responses/StatusSummary';\nimport { StringTask } from '../types';\n\nconst ignoredOptions = ['--null', '-z'];\n\nexport function statusTask(customArgs: string[]): StringTask<StatusResult> {\n   const commands = [\n      'status',\n      '--porcelain',\n      '-b',\n      '-u',\n      '--null',\n      ...customArgs.filter((arg) => !ignoredOptions.includes(arg)),\n   ];\n\n   return {\n      format: 'utf-8',\n      commands,\n      parser(text: string) {\n         return parseStatusSummary(text);\n      },\n   };\n}\n", "import type { SimpleGitApi } from '../simple-git-api';\nimport type { SimpleGit } from '../../../typings';\nimport { asNumber, ExitCodes, LineParser, parseStringResponse } from '../utils';\n\nexport interface VersionResult {\n   major: number;\n   minor: number;\n   patch: number | string;\n   agent: string;\n   installed: boolean;\n}\n\nconst NOT_INSTALLED = 'installed=false';\n\nfunction versionResponse(\n   major = 0,\n   minor = 0,\n   patch: string | number = 0,\n   agent = '',\n   installed = true\n): VersionResult {\n   return Object.defineProperty(\n      {\n         major,\n         minor,\n         patch,\n         agent,\n         installed,\n      },\n      'toString',\n      {\n         value() {\n            return `${this.major}.${this.minor}.${this.patch}`;\n         },\n         configurable: false,\n         enumerable: false,\n      }\n   );\n}\n\nfunction notInstalledResponse() {\n   return versionResponse(0, 0, 0, '', false);\n}\n\nexport default function (): Pick<SimpleGit, 'version'> {\n   return {\n      version(this: SimpleGitApi) {\n         return this._runTask({\n            commands: ['--version'],\n            format: 'utf-8',\n            parser: versionParser,\n            onError(result, error, done, fail) {\n               if (result.exitCode === ExitCodes.NOT_FOUND) {\n                  return done(Buffer.from(NOT_INSTALLED));\n               }\n\n               fail(error);\n            },\n         });\n      },\n   };\n}\n\nconst parsers: LineParser<VersionResult>[] = [\n   new LineParser(\n      /version (\\d+)\\.(\\d+)\\.(\\d+)(?:\\s*\\((.+)\\))?/,\n      (result, [major, minor, patch, agent = '']) => {\n         Object.assign(\n            result,\n            versionResponse(asNumber(major), asNumber(minor), asNumber(patch), agent)\n         );\n      }\n   ),\n   new LineParser(\n      /version (\\d+)\\.(\\d+)\\.(\\D+)(.+)?$/,\n      (result, [major, minor, patch, agent = '']) => {\n         Object.assign(result, versionResponse(asNumber(major), asNumber(minor), patch, agent));\n      }\n   ),\n];\n\nfunction versionParser(stdOut: string) {\n   if (stdOut === NOT_INSTALLED) {\n      return notInstalledResponse();\n   }\n\n   return parseStringResponse(versionResponse(0, 0, 0, stdOut), parsers, stdOut);\n}\n", "import { SimpleGitBase } from '../../typings';\nimport { taskCallback } from './task-callback';\nimport { changeWorkingDirectoryTask } from './tasks/change-working-directory';\nimport checkout from './tasks/checkout';\nimport commit from './tasks/commit';\nimport config from './tasks/config';\nimport grep from './tasks/grep';\nimport { hashObjectTask } from './tasks/hash-object';\nimport { initTask } from './tasks/init';\nimport log from './tasks/log';\nimport { mergeTask } from './tasks/merge';\nimport { pushTask } from './tasks/push';\nimport show from './tasks/show';\nimport { statusTask } from './tasks/status';\nimport { configurationErrorTask, straightThroughStringTask } from './tasks/task';\nimport version from './tasks/version';\nimport { outputHandler, SimpleGitExecutor, SimpleGitTask, SimpleGitTaskCallback } from './types';\nimport {\n   asArray,\n   filterString,\n   filterType,\n   getTrailingOptions,\n   trailingFunctionArgument,\n} from './utils';\n\nexport class SimpleGitApi implements SimpleGitBase {\n   constructor(private _executor: SimpleGitExecutor) {}\n\n   protected _runTask<T>(task: SimpleGitTask<T>, then?: SimpleGitTaskCallback<T>) {\n      const chain = this._executor.chain();\n      const promise = chain.push(task);\n\n      if (then) {\n         taskCallback(task, promise, then);\n      }\n\n      return Object.create(this, {\n         then: { value: promise.then.bind(promise) },\n         catch: { value: promise.catch.bind(promise) },\n         _executor: { value: chain },\n      });\n   }\n\n   add(files: string | string[]) {\n      return this._runTask(\n         straightThroughStringTask(['add', ...asArray(files)]),\n         trailingFunctionArgument(arguments)\n      );\n   }\n\n   cwd(directory: string | { path: string; root?: boolean }) {\n      const next = trailingFunctionArgument(arguments);\n\n      if (typeof directory === 'string') {\n         return this._runTask(changeWorkingDirectoryTask(directory, this._executor), next);\n      }\n\n      if (typeof directory?.path === 'string') {\n         return this._runTask(\n            changeWorkingDirectoryTask(\n               directory.path,\n               (directory.root && this._executor) || undefined\n            ),\n            next\n         );\n      }\n\n      return this._runTask(\n         configurationErrorTask('Git.cwd: workingDirectory must be supplied as a string'),\n         next\n      );\n   }\n\n   hashObject(path: string, write: boolean | unknown) {\n      return this._runTask(\n         hashObjectTask(path, write === true),\n         trailingFunctionArgument(arguments)\n      );\n   }\n\n   init(bare?: boolean | unknown) {\n      return this._runTask(\n         initTask(bare === true, this._executor.cwd, getTrailingOptions(arguments)),\n         trailingFunctionArgument(arguments)\n      );\n   }\n\n   merge() {\n      return this._runTask(\n         mergeTask(getTrailingOptions(arguments)),\n         trailingFunctionArgument(arguments)\n      );\n   }\n\n   mergeFromTo(remote: string, branch: string) {\n      if (!(filterString(remote) && filterString(branch))) {\n         return this._runTask(\n            configurationErrorTask(\n               `Git.mergeFromTo requires that the 'remote' and 'branch' arguments are supplied as strings`\n            )\n         );\n      }\n\n      return this._runTask(\n         mergeTask([remote, branch, ...getTrailingOptions(arguments)]),\n         trailingFunctionArgument(arguments, false)\n      );\n   }\n\n   outputHandler(handler: outputHandler) {\n      this._executor.outputHandler = handler;\n      return this;\n   }\n\n   push() {\n      const task = pushTask(\n         {\n            remote: filterType(arguments[0], filterString),\n            branch: filterType(arguments[1], filterString),\n         },\n         getTrailingOptions(arguments)\n      );\n\n      return this._runTask(task, trailingFunctionArgument(arguments));\n   }\n\n   stash() {\n      return this._runTask(\n         straightThroughStringTask(['stash', ...getTrailingOptions(arguments)]),\n         trailingFunctionArgument(arguments)\n      );\n   }\n\n   status() {\n      return this._runTask(\n         statusTask(getTrailingOptions(arguments)),\n         trailingFunctionArgument(arguments)\n      );\n   }\n}\n\nObject.assign(\n   SimpleGitApi.prototype,\n   checkout(),\n   commit(),\n   config(),\n   grep(),\n   log(),\n   show(),\n   version()\n);\n", "import { append, remove } from '../utils';\nimport { createDeferred, DeferredPromise } from '@kwsites/promise-deferred';\nimport { createLogger } from '../git-logger';\n\ntype ScheduleCompleteCallback = () => void;\ntype ScheduledTask = Pick<DeferredPromise<ScheduleCompleteCallback>, 'promise' | 'done'> & {\n   id: number;\n};\n\nconst createScheduledTask: () => ScheduledTask = (() => {\n   let id = 0;\n   return () => {\n      id++;\n      const { promise, done } = createDeferred<ScheduleCompleteCallback>();\n\n      return {\n         promise,\n         done,\n         id,\n      };\n   };\n})();\n\nexport class Scheduler {\n   private logger = createLogger('', 'scheduler');\n   private pending: ScheduledTask[] = [];\n   private running: ScheduledTask[] = [];\n\n   constructor(private concurrency = 2) {\n      this.logger(`Constructed, concurrency=%s`, concurrency);\n   }\n\n   private schedule() {\n      if (!this.pending.length || this.running.length >= this.concurrency) {\n         this.logger(\n            `Schedule attempt ignored, pending=%s running=%s concurrency=%s`,\n            this.pending.length,\n            this.running.length,\n            this.concurrency\n         );\n         return;\n      }\n\n      const task = append(this.running, this.pending.shift()!);\n      this.logger(`Attempting id=%s`, task.id);\n      task.done(() => {\n         this.logger(`Completing id=`, task.id);\n         remove(this.running, task);\n         this.schedule();\n      });\n   }\n\n   next(): Promise<ScheduleCompleteCallback> {\n      const { promise, id } = append(this.pending, createScheduledTask());\n      this.logger(`Scheduling id=%s`, id);\n\n      this.schedule();\n\n      return promise;\n   }\n}\n", "import { straightThroughStringTask } from './task';\nimport { OptionFlags, Options, StringTask } from '../types';\n\nexport type ApplyOptions = Options &\n   OptionFlags<\n      | '--stat'\n      | '--numstat'\n      | '--summary'\n      | '--check'\n      | '--index'\n      | '--intent-to-add'\n      | '--3way'\n      | '--apply'\n      | '--no-add'\n      | '-R'\n      | '--reverse'\n      | '--allow-binary-replacement'\n      | '--binary'\n      | '--reject'\n      | '-z'\n      | '--inaccurate-eof'\n      | '--recount'\n      | '--cached'\n      | '--ignore-space-change'\n      | '--ignore-whitespace'\n      | '--verbose'\n      | '--unsafe-paths'\n   > &\n   OptionFlags<'--whitespace', 'nowarn' | 'warn' | 'fix' | 'error' | 'error-all'> &\n   OptionFlags<'--build-fake-ancestor' | '--exclude' | '--include' | '--directory', string> &\n   OptionFlags<'-p' | '-C', number>;\n\nexport function applyPatchTask(patches: string[], customArgs: string[]): StringTask<string> {\n   return straightThroughStringTask(['apply', ...customArgs, ...patches]);\n}\n", "import {\n   BranchMultiDeleteResult,\n   BranchSingleDeleteFailure,\n   BranchSingleDeleteResult,\n   BranchSingleDeleteSuccess,\n} from '../../../typings';\n\nexport class BranchDeletionBatch implements BranchMultiDeleteResult {\n   all: BranchSingleDeleteResult[] = [];\n   branches: { [branchName: string]: BranchSingleDeleteResult } = {};\n   errors: BranchSingleDeleteResult[] = [];\n\n   get success(): boolean {\n      return !this.errors.length;\n   }\n}\n\nexport function branchDeletionSuccess(branch: string, hash: string): BranchSingleDeleteSuccess {\n   return {\n      branch,\n      hash,\n      success: true,\n   };\n}\n\nexport function branchDeletionFailure(branch: string): BranchSingleDeleteFailure {\n   return {\n      branch,\n      hash: null,\n      success: false,\n   };\n}\n\nexport function isSingleBranchDeleteFailure(\n   test: BranchSingleDeleteResult\n): test is BranchSingleDeleteSuccess {\n   return test.success;\n}\n", "import { BranchMultiDeleteResult } from '../../../typings';\nimport {\n   BranchDeletionBatch,\n   branchDeletionFailure,\n   branchDeletionSuccess,\n} from '../responses/BranchDeleteSummary';\nimport { TaskParser } from '../types';\nimport { ExitCodes, LineParser, parseStringResponse } from '../utils';\n\nconst deleteSuccessRegex = /(\\S+)\\s+\\(\\S+\\s([^)]+)\\)/;\nconst deleteErrorRegex = /^error[^']+'([^']+)'/m;\n\nconst parsers: LineParser<BranchMultiDeleteResult>[] = [\n   new LineParser(deleteSuccessRegex, (result, [branch, hash]) => {\n      const deletion = branchDeletionSuccess(branch, hash);\n\n      result.all.push(deletion);\n      result.branches[branch] = deletion;\n   }),\n   new LineParser(deleteErrorRegex, (result, [branch]) => {\n      const deletion = branchDeletionFailure(branch);\n\n      result.errors.push(deletion);\n      result.all.push(deletion);\n      result.branches[branch] = deletion;\n   }),\n];\n\nexport const parseBranchDeletions: TaskParser<string, BranchMultiDeleteResult> = (\n   stdOut,\n   stdErr\n) => {\n   return parseStringResponse(new BranchDeletionBatch(), parsers, [stdOut, stdErr]);\n};\n\nexport function hasBranchDeletionError(data: string, processExitCode: ExitCodes): boolean {\n   return processExitCode === ExitCodes.ERROR && deleteErrorRegex.test(data);\n}\n", "import type { BranchSummary, BranchSummaryBranch } from '../../../typings';\n\nexport enum BranchStatusIdentifier {\n   CURRENT = '*',\n   LINKED = '+',\n}\n\nexport class BranchSummaryResult implements BranchSummary {\n   public all: string[] = [];\n   public branches: { [p: string]: BranchSummaryBranch } = {};\n   public current: string = '';\n   public detached: boolean = false;\n\n   push(\n      status: BranchStatusIdentifier | unknown,\n      detached: boolean,\n      name: string,\n      commit: string,\n      label: string\n   ) {\n      if (status === BranchStatusIdentifier.CURRENT) {\n         this.detached = detached;\n         this.current = name;\n      }\n\n      this.all.push(name);\n      this.branches[name] = {\n         current: status === BranchStatusIdentifier.CURRENT,\n         linkedWorkTree: status === BranchStatusIdentifier.LINKED,\n         name,\n         commit,\n         label,\n      };\n   }\n}\n", "import type { BranchSummary } from '../../../typings';\nimport { BranchSummaryResult } from '../responses/BranchSummary';\nimport { LineParser, parseStringResponse } from '../utils';\n\nconst parsers: LineParser<BranchSummaryResult>[] = [\n   new LineParser(\n      /^([*+]\\s)?\\((?:HEAD )?detached (?:from|at) (\\S+)\\)\\s+([a-z0-9]+)\\s(.*)$/,\n      (result, [current, name, commit, label]) => {\n         result.push(branchStatus(current), true, name, commit, label);\n      }\n   ),\n   new LineParser(\n      /^([*+]\\s)?(\\S+)\\s+([a-z0-9]+)\\s?(.*)$/s,\n      (result, [current, name, commit, label]) => {\n         result.push(branchStatus(current), false, name, commit, label);\n      }\n   ),\n];\n\nfunction branchStatus(input?: string) {\n   return input ? input.charAt(0) : '';\n}\n\nexport function parseBranchSummary(stdOut: string): BranchSummary {\n   return parseStringResponse(new BranchSummaryResult(), parsers, stdOut);\n}\n", "import { BranchMultiDeleteResult, BranchSingleDeleteResult, BranchSummary } from '../../../typings';\nimport { StringTask } from '../types';\nimport { GitResponseError } from '../errors/git-response-error';\nimport { hasBranchDeletionError, parseBranchDeletions } from '../parsers/parse-branch-delete';\nimport { parseBranchSummary } from '../parsers/parse-branch';\nimport { bufferToString } from '../utils';\n\nexport function containsDeleteBranchCommand(commands: string[]) {\n   const deleteCommands = ['-d', '-D', '--delete'];\n   return commands.some((command) => deleteCommands.includes(command));\n}\n\nexport function branchTask(\n   customArgs: string[]\n): StringTask<BranchSummary | BranchSingleDeleteResult> {\n   const isDelete = containsDeleteBranchCommand(customArgs);\n   const commands = ['branch', ...customArgs];\n\n   if (commands.length === 1) {\n      commands.push('-a');\n   }\n\n   if (!commands.includes('-v')) {\n      commands.splice(1, 0, '-v');\n   }\n\n   return {\n      format: 'utf-8',\n      commands,\n      parser(stdOut, stdErr) {\n         if (isDelete) {\n            return parseBranchDeletions(stdOut, stdErr).all[0];\n         }\n\n         return parseBranchSummary(stdOut);\n      },\n   };\n}\n\nexport function branchLocalTask(): StringTask<BranchSummary> {\n   const parser = parseBranchSummary;\n\n   return {\n      format: 'utf-8',\n      commands: ['branch', '-v'],\n      parser,\n   };\n}\n\nexport function deleteBranchesTask(\n   branches: string[],\n   forceDelete = false\n): StringTask<BranchMultiDeleteResult> {\n   return {\n      format: 'utf-8',\n      commands: ['branch', '-v', forceDelete ? '-D' : '-d', ...branches],\n      parser(stdOut, stdErr) {\n         return parseBranchDeletions(stdOut, stdErr);\n      },\n      onError({ exitCode, stdOut }, error, done, fail) {\n         if (!hasBranchDeletionError(String(error), exitCode)) {\n            return fail(error);\n         }\n\n         done(stdOut);\n      },\n   };\n}\n\nexport function deleteBranchTask(\n   branch: string,\n   forceDelete = false\n): StringTask<BranchSingleDeleteResult> {\n   const task: StringTask<BranchSingleDeleteResult> = {\n      format: 'utf-8',\n      commands: ['branch', '-v', forceDelete ? '-D' : '-d', branch],\n      parser(stdOut, stdErr) {\n         return parseBranchDeletions(stdOut, stdErr).branches[branch]!;\n      },\n      onError({ exitCode, stdErr, stdOut }, error, _, fail) {\n         if (!hasBranchDeletionError(String(error), exitCode)) {\n            return fail(error);\n         }\n\n         throw new GitResponseError(\n            task.parser(bufferToString(stdOut), bufferToString(stdErr)),\n            String(error)\n         );\n      },\n   };\n\n   return task;\n}\n", "/**\n * Parser for the `check-ignore` command - returns each file as a string array\n */\nexport const parseCheckIgnore = (text: string): string[] => {\n   return text\n      .split(/\\n/g)\n      .map((line) => line.trim())\n      .filter((file) => !!file);\n};\n", "import { StringTask } from '../types';\nimport { parseCheckIgnore } from '../responses/CheckIgnore';\n\nexport function checkIgnoreTask(paths: string[]): StringTask<string[]> {\n   return {\n      commands: ['check-ignore', ...paths],\n      format: 'utf-8',\n      parser: parseCheckIgnore,\n   };\n}\n", "import { configurationErrorTask, EmptyTask, straightThroughStringTask } from './task';\nimport { OptionFlags, Options, StringTask } from '../types';\nimport { append, filterString } from '../utils';\n\nexport type CloneOptions = Options &\n   OptionFlags<\n      | '--bare'\n      | '--dissociate'\n      | '--mirror'\n      | '--no-checkout'\n      | '--no-remote-submodules'\n      | '--no-shallow-submodules'\n      | '--no-single-branch'\n      | '--no-tags'\n      | '--remote-submodules'\n      | '--single-branch'\n      | '--shallow-submodules'\n      | '--verbose'\n   > &\n   OptionFlags<'--depth' | '-j' | '--jobs', number> &\n   OptionFlags<\n      | '--branch'\n      | '--origin'\n      | '--recurse-submodules'\n      | '--separate-git-dir'\n      | '--shallow-exclude'\n      | '--shallow-since'\n      | '--template',\n      string\n   >;\n\nfunction disallowedCommand(command: string) {\n   return /^--upload-pack(=|$)/.test(command);\n}\n\nexport function cloneTask(\n   repo: string | undefined,\n   directory: string | undefined,\n   customArgs: string[]\n): StringTask<string> | EmptyTask {\n   const commands = ['clone', ...customArgs];\n\n   filterString(repo) && commands.push(repo);\n   filterString(directory) && commands.push(directory);\n\n   const banned = commands.find(disallowedCommand);\n   if (banned) {\n      return configurationErrorTask(`git.fetch: potential exploit argument blocked.`);\n   }\n\n   return straightThroughStringTask(commands);\n}\n\nexport function cloneMirrorTask(\n   repo: string | undefined,\n   directory: string | undefined,\n   customArgs: string[]\n) {\n   append(customArgs, '--mirror');\n\n   return cloneTask(repo, directory, customArgs);\n}\n", "import { FetchResult } from '../../../typings';\nimport { LineParser, parseStringResponse } from '../utils';\n\nconst parsers: LineParser<FetchResult>[] = [\n   new LineParser(/From (.+)$/, (result, [remote]) => {\n      result.remote = remote;\n   }),\n   new LineParser(/\\* \\[new branch]\\s+(\\S+)\\s*-> (.+)$/, (result, [name, tracking]) => {\n      result.branches.push({\n         name,\n         tracking,\n      });\n   }),\n   new LineParser(/\\* \\[new tag]\\s+(\\S+)\\s*-> (.+)$/, (result, [name, tracking]) => {\n      result.tags.push({\n         name,\n         tracking,\n      });\n   }),\n   new LineParser(/- \\[deleted]\\s+\\S+\\s*-> (.+)$/, (result, [tracking]) => {\n      result.deleted.push({\n         tracking,\n      });\n   }),\n   new LineParser(\n      /\\s*([^.]+)\\.\\.(\\S+)\\s+(\\S+)\\s*-> (.+)$/,\n      (result, [from, to, name, tracking]) => {\n         result.updated.push({\n            name,\n            tracking,\n            to,\n            from,\n         });\n      }\n   ),\n];\n\nexport function parseFetchResult(stdOut: string, stdErr: string): FetchResult {\n   const result: FetchResult = {\n      raw: stdOut,\n      remote: null,\n      branches: [],\n      tags: [],\n      updated: [],\n      deleted: [],\n   };\n   return parseStringResponse(result, parsers, [stdOut, stdErr]);\n}\n", "import { FetchResult } from '../../../typings';\nimport { parseFetchResult } from '../parsers/parse-fetch';\nimport { StringTask } from '../types';\n\nimport { configurationErrorTask, EmptyTask } from './task';\n\nfunction disallowedCommand(command: string) {\n   return /^--upload-pack(=|$)/.test(command);\n}\n\nexport function fetchTask(\n   remote: string,\n   branch: string,\n   customArgs: string[]\n): StringTask<FetchResult> | EmptyTask {\n   const commands = ['fetch', ...customArgs];\n   if (remote && branch) {\n      commands.push(remote, branch);\n   }\n\n   const banned = commands.find(disallowedCommand);\n   if (banned) {\n      return configurationErrorTask(`git.fetch: potential exploit argument blocked.`);\n   }\n\n   return {\n      commands,\n      format: 'utf-8',\n      parser: parseFetchResult,\n   };\n}\n", "import { MoveResult } from '../../../typings';\nimport { LineParser, parseStringResponse } from '../utils';\n\nconst parsers: LineParser<MoveResult>[] = [\n   new LineParser(/^Renaming (.+) to (.+)$/, (result, [from, to]) => {\n      result.moves.push({ from, to });\n   }),\n];\n\nexport function parseMoveResult(stdOut: string): MoveResult {\n   return parseStringResponse({ moves: [] }, parsers, stdOut);\n}\n", "import { MoveResult } from '../../../typings';\nimport { parseMoveResult } from '../parsers/parse-move';\nimport { StringTask } from '../types';\nimport { asArray } from '../utils';\n\nexport function moveTask(from: string | string[], to: string): StringTask<MoveResult> {\n   return {\n      commands: ['mv', '-v', ...asArray(from), to],\n      format: 'utf-8',\n      parser: parseMoveResult,\n   };\n}\n", "import { PullResult } from '../../../typings';\nimport { GitResponseError } from '../errors/git-response-error';\nimport { parsePullErrorResult, parsePullResult } from '../parsers/parse-pull';\nimport { Maybe, StringTask } from '../types';\nimport { bufferToString } from '../utils';\n\nexport function pullTask(\n   remote: Maybe<string>,\n   branch: Maybe<string>,\n   customArgs: string[]\n): StringTask<PullResult> {\n   const commands: string[] = ['pull', ...customArgs];\n   if (remote && branch) {\n      commands.splice(1, 0, remote, branch);\n   }\n\n   return {\n      commands,\n      format: 'utf-8',\n      parser(stdOut, stdErr): PullResult {\n         return parsePullResult(stdOut, stdErr);\n      },\n      onError(result, _error, _done, fail) {\n         const pullError = parsePullErrorResult(\n            bufferToString(result.stdOut),\n            bufferToString(result.stdErr)\n         );\n         if (pullError) {\n            return fail(new GitResponseError(pullError));\n         }\n\n         fail(_error);\n      },\n   };\n}\n", "import { forEachLineWithContent } from '../utils';\n\nexport interface RemoteWithoutRefs {\n   name: string;\n}\n\nexport interface RemoteWithRefs extends RemoteWithoutRefs {\n   refs: {\n      fetch: string;\n      push: string;\n   };\n}\n\nexport function parseGetRemotes(text: string): RemoteWithoutRefs[] {\n   const remotes: { [name: string]: RemoteWithoutRefs } = {};\n\n   forEach(text, ([name]) => (remotes[name] = { name }));\n\n   return Object.values(remotes);\n}\n\nexport function parseGetRemotesVerbose(text: string): RemoteWithRefs[] {\n   const remotes: { [name: string]: RemoteWithRefs } = {};\n\n   forEach(text, ([name, url, purpose]) => {\n      if (!remotes.hasOwnProperty(name)) {\n         remotes[name] = {\n            name: name,\n            refs: { fetch: '', push: '' },\n         };\n      }\n\n      if (purpose && url) {\n         remotes[name].refs[purpose.replace(/[^a-z]/g, '') as keyof RemoteWithRefs['refs']] = url;\n      }\n   });\n\n   return Object.values(remotes);\n}\n\nfunction forEach(text: string, handler: (line: string[]) => void) {\n   forEachLineWithContent(text, (line) => handler(line.split(/\\s+/)));\n}\n", "import { parseGetRemotes, parseGetRemotesVerbose } from '../responses/GetRemoteSummary';\nimport { StringTask } from '../types';\nimport { straightThroughStringTask } from './task';\n\nexport function addRemoteTask(\n   remoteName: string,\n   remoteRepo: string,\n   customArgs: string[] = []\n): StringTask<string> {\n   return straightThroughStringTask(['remote', 'add', ...customArgs, remoteName, remoteRepo]);\n}\n\nexport function getRemotesTask(verbose: boolean): StringTask<any> {\n   const commands = ['remote'];\n   if (verbose) {\n      commands.push('-v');\n   }\n\n   return {\n      commands,\n      format: 'utf-8',\n      parser: verbose ? parseGetRemotesVerbose : parseGetRemotes,\n   };\n}\n\nexport function listRemotesTask(customArgs: string[] = []): StringTask<string> {\n   const commands = [...customArgs];\n   if (commands[0] !== 'ls-remote') {\n      commands.unshift('ls-remote');\n   }\n\n   return straightThroughStringTask(commands);\n}\n\nexport function remoteTask(customArgs: string[] = []): StringTask<string> {\n   const commands = [...customArgs];\n   if (commands[0] !== 'remote') {\n      commands.unshift('remote');\n   }\n\n   return straightThroughStringTask(commands);\n}\n\nexport function removeRemoteTask(remoteName: string) {\n   return straightThroughStringTask(['remote', 'remove', remoteName]);\n}\n", "import { LogOptions, LogResult } from '../../../typings';\nimport { logFormatFromCommand } from '../args/log-format';\nimport { createListLogSummaryParser } from '../parsers/parse-list-log-summary';\nimport type { StringTask } from '../types';\nimport { validateLogFormatConfig } from './diff';\nimport { parseLogOptions } from './log';\nimport type { EmptyTask } from './task';\n\nexport function stashListTask(\n   opt: LogOptions = {},\n   customArgs: string[]\n): EmptyTask | StringTask<LogResult> {\n   const options = parseLogOptions<any>(opt);\n   const commands = ['stash', 'list', ...options.commands, ...customArgs];\n   const parser = createListLogSummaryParser(\n      options.splitter,\n      options.fields,\n      logFormatFromCommand(commands)\n   );\n\n   return (\n      validateLogFormatConfig(commands) || {\n         commands,\n         format: 'utf-8',\n         parser,\n      }\n   );\n}\n", "import { StringTask } from '../types';\nimport { straightThroughStringTask } from './task';\n\nexport function addSubModuleTask(repo: string, path: string): StringTask<string> {\n   return subModuleTask(['add', repo, path]);\n}\n\nexport function initSubModuleTask(customArgs: string[]): StringTask<string> {\n   return subModuleTask(['init', ...customArgs]);\n}\n\nexport function subModuleTask(customArgs: string[]): StringTask<string> {\n   const commands = [...customArgs];\n   if (commands[0] !== 'submodule') {\n      commands.unshift('submodule');\n   }\n\n   return straightThroughStringTask(commands);\n}\n\nexport function updateSubModuleTask(customArgs: string[]): StringTask<string> {\n   return subModuleTask(['update', ...customArgs]);\n}\n", "import { TagResult } from '../../../typings';\n\nexport class TagList implements TagResult {\n   constructor(\n      public readonly all: string[],\n      public readonly latest: string | undefined\n   ) {}\n}\n\nexport const parseTagList = function (data: string, customSort = false) {\n   const tags = data.split('\\n').map(trimmed).filter(Boolean);\n\n   if (!customSort) {\n      tags.sort(function (tagA, tagB) {\n         const partsA = tagA.split('.');\n         const partsB = tagB.split('.');\n\n         if (partsA.length === 1 || partsB.length === 1) {\n            return singleSorted(toNumber(partsA[0]), toNumber(partsB[0]));\n         }\n\n         for (let i = 0, l = Math.max(partsA.length, partsB.length); i < l; i++) {\n            const diff = sorted(toNumber(partsA[i]), toNumber(partsB[i]));\n\n            if (diff) {\n               return diff;\n            }\n         }\n\n         return 0;\n      });\n   }\n\n   const latest = customSort ? tags[0] : [...tags].reverse().find((tag) => tag.indexOf('.') >= 0);\n\n   return new TagList(tags, latest);\n};\n\nfunction singleSorted(a: number, b: number): number {\n   const aIsNum = isNaN(a);\n   const bIsNum = isNaN(b);\n\n   if (aIsNum !== bIsNum) {\n      return aIsNum ? 1 : -1;\n   }\n\n   return aIsNum ? sorted(a, b) : 0;\n}\n\nfunction sorted(a: number, b: number) {\n   return a === b ? 0 : a > b ? 1 : -1;\n}\n\nfunction trimmed(input: string) {\n   return input.trim();\n}\n\nfunction toNumber(input: string | undefined) {\n   if (typeof input === 'string') {\n      return parseInt(input.replace(/^\\D+/g, ''), 10) || 0;\n   }\n\n   return 0;\n}\n", "import { TagResult } from '../../../typings';\nimport { parseTagList } from '../responses/TagList';\nimport { StringTask } from '../types';\n\n/**\n * Task used by `git.tags`\n */\nexport function tagListTask(customArgs: string[] = []): StringTask<TagResult> {\n   const hasCustomSort = customArgs.some((option) => /^--sort=/.test(option));\n\n   return {\n      format: 'utf-8',\n      commands: ['tag', '-l', ...customArgs],\n      parser(text: string) {\n         return parseTagList(text, hasCustomSort);\n      },\n   };\n}\n\n/**\n * Task used by `git.addTag`\n */\nexport function addTagTask(name: string): StringTask<{ name: string }> {\n   return {\n      format: 'utf-8',\n      commands: ['tag', name],\n      parser() {\n         return { name };\n      },\n   };\n}\n\n/**\n * Task used by `git.addTag`\n */\nexport function addAnnotatedTagTask(\n   name: string,\n   tagMessage: string\n): StringTask<{ name: string }> {\n   return {\n      format: 'utf-8',\n      commands: ['tag', '-a', '-m', tagMessage, name],\n      parser() {\n         return { name };\n      },\n   };\n}\n", "const { GitExecutor } = require('./lib/runners/git-executor');\nconst { SimpleGitApi } = require('./lib/simple-git-api');\n\nconst { Scheduler } = require('./lib/runners/scheduler');\nconst { configurationErrorTask } = require('./lib/tasks/task');\nconst {\n   asArray,\n   filterArray,\n   filterPrimitives,\n   filterString,\n   filterStringOrStringArray,\n   filterType,\n   getTrailingOptions,\n   trailingFunctionArgument,\n   trailingOptionsArgument,\n} = require('./lib/utils');\nconst { applyPatchTask } = require('./lib/tasks/apply-patch');\nconst {\n   branchTask,\n   branchLocalTask,\n   deleteBranchesTask,\n   deleteBranchTask,\n} = require('./lib/tasks/branch');\nconst { checkIgnoreTask } = require('./lib/tasks/check-ignore');\nconst { checkIsRepoTask } = require('./lib/tasks/check-is-repo');\nconst { cloneTask, cloneMirrorTask } = require('./lib/tasks/clone');\nconst { cleanWithOptionsTask, isCleanOptionsArray } = require('./lib/tasks/clean');\nconst { diffSummaryTask } = require('./lib/tasks/diff');\nconst { fetchTask } = require('./lib/tasks/fetch');\nconst { moveTask } = require('./lib/tasks/move');\nconst { pullTask } = require('./lib/tasks/pull');\nconst { pushTagsTask } = require('./lib/tasks/push');\nconst {\n   addRemoteTask,\n   getRemotesTask,\n   listRemotesTask,\n   remoteTask,\n   removeRemoteTask,\n} = require('./lib/tasks/remote');\nconst { getResetMode, resetTask } = require('./lib/tasks/reset');\nconst { stashListTask } = require('./lib/tasks/stash-list');\nconst {\n   addSubModuleTask,\n   initSubModuleTask,\n   subModuleTask,\n   updateSubModuleTask,\n} = require('./lib/tasks/sub-module');\nconst { addAnnotatedTagTask, addTagTask, tagListTask } = require('./lib/tasks/tag');\nconst { straightThroughBufferTask, straightThroughStringTask } = require('./lib/tasks/task');\n\nfunction Git(options, plugins) {\n   this._executor = new GitExecutor(\n      options.binary,\n      options.baseDir,\n      new Scheduler(options.maxConcurrentProcesses),\n      plugins\n   );\n\n   this._trimmed = options.trimmed;\n}\n\n(Git.prototype = Object.create(SimpleGitApi.prototype)).constructor = Git;\n\n/**\n * Sets the path to a custom git binary, should either be `git` when there is an installation of git available on\n * the system path, or a fully qualified path to the executable.\n *\n * @param {string} command\n * @returns {Git}\n */\nGit.prototype.customBinary = function (command) {\n   this._executor.binary = command;\n   return this;\n};\n\n/**\n * Sets an environment variable for the spawned child process, either supply both a name and value as strings or\n * a single object to entirely replace the current environment variables.\n *\n * @param {string|Object} name\n * @param {string} [value]\n * @returns {Git}\n */\nGit.prototype.env = function (name, value) {\n   if (arguments.length === 1 && typeof name === 'object') {\n      this._executor.env = name;\n   } else {\n      (this._executor.env = this._executor.env || {})[name] = value;\n   }\n\n   return this;\n};\n\n/**\n * List the stash(s) of the local repo\n */\nGit.prototype.stashList = function (options) {\n   return this._runTask(\n      stashListTask(\n         trailingOptionsArgument(arguments) || {},\n         (filterArray(options) && options) || []\n      ),\n      trailingFunctionArgument(arguments)\n   );\n};\n\nfunction createCloneTask(api, task, repoPath, localPath) {\n   if (typeof repoPath !== 'string') {\n      return configurationErrorTask(`git.${api}() requires a string 'repoPath'`);\n   }\n\n   return task(repoPath, filterType(localPath, filterString), getTrailingOptions(arguments));\n}\n\n/**\n * Clone a git repo\n */\nGit.prototype.clone = function () {\n   return this._runTask(\n      createCloneTask('clone', cloneTask, ...arguments),\n      trailingFunctionArgument(arguments)\n   );\n};\n\n/**\n * Mirror a git repo\n */\nGit.prototype.mirror = function () {\n   return this._runTask(\n      createCloneTask('mirror', cloneMirrorTask, ...arguments),\n      trailingFunctionArgument(arguments)\n   );\n};\n\n/**\n * Moves one or more files to a new destination.\n *\n * @see https://git-scm.com/docs/git-mv\n *\n * @param {string|string[]} from\n * @param {string} to\n */\nGit.prototype.mv = function (from, to) {\n   return this._runTask(moveTask(from, to), trailingFunctionArgument(arguments));\n};\n\n/**\n * Internally uses pull and tags to get the list of tags then checks out the latest tag.\n *\n * @param {Function} [then]\n */\nGit.prototype.checkoutLatestTag = function (then) {\n   var git = this;\n   return this.pull(function () {\n      git.tags(function (err, tags) {\n         git.checkout(tags.latest, then);\n      });\n   });\n};\n\n/**\n * Pull the updated contents of the current repo\n */\nGit.prototype.pull = function (remote, branch, options, then) {\n   return this._runTask(\n      pullTask(\n         filterType(remote, filterString),\n         filterType(branch, filterString),\n         getTrailingOptions(arguments)\n      ),\n      trailingFunctionArgument(arguments)\n   );\n};\n\n/**\n * Fetch the updated contents of the current repo.\n *\n * @example\n *   .fetch('upstream', 'master') // fetches from master on remote named upstream\n *   .fetch(function () {}) // runs fetch against default remote and branch and calls function\n *\n * @param {string} [remote]\n * @param {string} [branch]\n */\nGit.prototype.fetch = function (remote, branch) {\n   return this._runTask(\n      fetchTask(\n         filterType(remote, filterString),\n         filterType(branch, filterString),\n         getTrailingOptions(arguments)\n      ),\n      trailingFunctionArgument(arguments)\n   );\n};\n\n/**\n * Disables/enables the use of the console for printing warnings and errors, by default messages are not shown in\n * a production environment.\n *\n * @param {boolean} silence\n * @returns {Git}\n */\nGit.prototype.silent = function (silence) {\n   console.warn(\n      'simple-git deprecation notice: git.silent: logging should be configured using the `debug` library / `DEBUG` environment variable, this will be an error in version 3'\n   );\n   return this;\n};\n\n/**\n * List all tags. When using git 2.7.0 or above, include an options object with `\"--sort\": \"property-name\"` to\n * sort the tags by that property instead of using the default semantic versioning sort.\n *\n * Note, supplying this option when it is not supported by your Git version will cause the operation to fail.\n *\n * @param {Object} [options]\n * @param {Function} [then]\n */\nGit.prototype.tags = function (options, then) {\n   return this._runTask(\n      tagListTask(getTrailingOptions(arguments)),\n      trailingFunctionArgument(arguments)\n   );\n};\n\n/**\n * Rebases the current working copy. Options can be supplied either as an array of string parameters\n * to be sent to the `git rebase` command, or a standard options object.\n */\nGit.prototype.rebase = function () {\n   return this._runTask(\n      straightThroughStringTask(['rebase', ...getTrailingOptions(arguments)]),\n      trailingFunctionArgument(arguments)\n   );\n};\n\n/**\n * Reset a repo\n */\nGit.prototype.reset = function (mode) {\n   return this._runTask(\n      resetTask(getResetMode(mode), getTrailingOptions(arguments)),\n      trailingFunctionArgument(arguments)\n   );\n};\n\n/**\n * Revert one or more commits in the local working copy\n */\nGit.prototype.revert = function (commit) {\n   const next = trailingFunctionArgument(arguments);\n\n   if (typeof commit !== 'string') {\n      return this._runTask(configurationErrorTask('Commit must be a string'), next);\n   }\n\n   return this._runTask(\n      straightThroughStringTask(['revert', ...getTrailingOptions(arguments, 0, true), commit]),\n      next\n   );\n};\n\n/**\n * Add a lightweight tag to the head of the current branch\n */\nGit.prototype.addTag = function (name) {\n   const task =\n      typeof name === 'string'\n         ? addTagTask(name)\n         : configurationErrorTask('Git.addTag requires a tag name');\n\n   return this._runTask(task, trailingFunctionArgument(arguments));\n};\n\n/**\n * Add an annotated tag to the head of the current branch\n */\nGit.prototype.addAnnotatedTag = function (tagName, tagMessage) {\n   return this._runTask(\n      addAnnotatedTagTask(tagName, tagMessage),\n      trailingFunctionArgument(arguments)\n   );\n};\n\n/**\n * Delete a local branch\n */\nGit.prototype.deleteLocalBranch = function (branchName, forceDelete, then) {\n   return this._runTask(\n      deleteBranchTask(branchName, typeof forceDelete === 'boolean' ? forceDelete : false),\n      trailingFunctionArgument(arguments)\n   );\n};\n\n/**\n * Delete one or more local branches\n */\nGit.prototype.deleteLocalBranches = function (branchNames, forceDelete, then) {\n   return this._runTask(\n      deleteBranchesTask(branchNames, typeof forceDelete === 'boolean' ? forceDelete : false),\n      trailingFunctionArgument(arguments)\n   );\n};\n\n/**\n * List all branches\n *\n * @param {Object | string[]} [options]\n * @param {Function} [then]\n */\nGit.prototype.branch = function (options, then) {\n   return this._runTask(\n      branchTask(getTrailingOptions(arguments)),\n      trailingFunctionArgument(arguments)\n   );\n};\n\n/**\n * Return list of local branches\n *\n * @param {Function} [then]\n */\nGit.prototype.branchLocal = function (then) {\n   return this._runTask(branchLocalTask(), trailingFunctionArgument(arguments));\n};\n\n/**\n * Executes any command against the git binary.\n */\nGit.prototype.raw = function (commands) {\n   const createRestCommands = !Array.isArray(commands);\n   const command = [].slice.call(createRestCommands ? arguments : commands, 0);\n\n   for (let i = 0; i < command.length && createRestCommands; i++) {\n      if (!filterPrimitives(command[i])) {\n         command.splice(i, command.length - i);\n         break;\n      }\n   }\n\n   command.push(...getTrailingOptions(arguments, 0, true));\n\n   var next = trailingFunctionArgument(arguments);\n\n   if (!command.length) {\n      return this._runTask(\n         configurationErrorTask('Raw: must supply one or more command to execute'),\n         next\n      );\n   }\n\n   return this._runTask(straightThroughStringTask(command, this._trimmed), next);\n};\n\nGit.prototype.submoduleAdd = function (repo, path, then) {\n   return this._runTask(addSubModuleTask(repo, path), trailingFunctionArgument(arguments));\n};\n\nGit.prototype.submoduleUpdate = function (args, then) {\n   return this._runTask(\n      updateSubModuleTask(getTrailingOptions(arguments, true)),\n      trailingFunctionArgument(arguments)\n   );\n};\n\nGit.prototype.submoduleInit = function (args, then) {\n   return this._runTask(\n      initSubModuleTask(getTrailingOptions(arguments, true)),\n      trailingFunctionArgument(arguments)\n   );\n};\n\nGit.prototype.subModule = function (options, then) {\n   return this._runTask(\n      subModuleTask(getTrailingOptions(arguments)),\n      trailingFunctionArgument(arguments)\n   );\n};\n\nGit.prototype.listRemote = function () {\n   return this._runTask(\n      listRemotesTask(getTrailingOptions(arguments)),\n      trailingFunctionArgument(arguments)\n   );\n};\n\n/**\n * Adds a remote to the list of remotes.\n */\nGit.prototype.addRemote = function (remoteName, remoteRepo, then) {\n   return this._runTask(\n      addRemoteTask(remoteName, remoteRepo, getTrailingOptions(arguments)),\n      trailingFunctionArgument(arguments)\n   );\n};\n\n/**\n * Removes an entry by name from the list of remotes.\n */\nGit.prototype.removeRemote = function (remoteName, then) {\n   return this._runTask(removeRemoteTask(remoteName), trailingFunctionArgument(arguments));\n};\n\n/**\n * Gets the currently available remotes, setting the optional verbose argument to true includes additional\n * detail on the remotes themselves.\n */\nGit.prototype.getRemotes = function (verbose, then) {\n   return this._runTask(getRemotesTask(verbose === true), trailingFunctionArgument(arguments));\n};\n\n/**\n * Call any `git remote` function with arguments passed as an array of strings.\n *\n * @param {string[]} options\n * @param {Function} [then]\n */\nGit.prototype.remote = function (options, then) {\n   return this._runTask(\n      remoteTask(getTrailingOptions(arguments)),\n      trailingFunctionArgument(arguments)\n   );\n};\n\n/**\n * Call any `git tag` function with arguments passed as an array of strings.\n *\n * @param {string[]} options\n * @param {Function} [then]\n */\nGit.prototype.tag = function (options, then) {\n   const command = getTrailingOptions(arguments);\n\n   if (command[0] !== 'tag') {\n      command.unshift('tag');\n   }\n\n   return this._runTask(straightThroughStringTask(command), trailingFunctionArgument(arguments));\n};\n\n/**\n * Updates repository server info\n *\n * @param {Function} [then]\n */\nGit.prototype.updateServerInfo = function (then) {\n   return this._runTask(\n      straightThroughStringTask(['update-server-info']),\n      trailingFunctionArgument(arguments)\n   );\n};\n\n/**\n * Pushes the current tag changes to a remote which can be either a URL or named remote. When not specified uses the\n * default configured remote spec.\n *\n * @param {string} [remote]\n * @param {Function} [then]\n */\nGit.prototype.pushTags = function (remote, then) {\n   const task = pushTagsTask(\n      { remote: filterType(remote, filterString) },\n      getTrailingOptions(arguments)\n   );\n\n   return this._runTask(task, trailingFunctionArgument(arguments));\n};\n\n/**\n * Removes the named files from source control.\n */\nGit.prototype.rm = function (files) {\n   return this._runTask(\n      straightThroughStringTask(['rm', '-f', ...asArray(files)]),\n      trailingFunctionArgument(arguments)\n   );\n};\n\n/**\n * Removes the named files from source control but keeps them on disk rather than deleting them entirely. To\n * completely remove the files, use `rm`.\n *\n * @param {string|string[]} files\n */\nGit.prototype.rmKeepLocal = function (files) {\n   return this._runTask(\n      straightThroughStringTask(['rm', '--cached', ...asArray(files)]),\n      trailingFunctionArgument(arguments)\n   );\n};\n\n/**\n * Returns a list of objects in a tree based on commit hash. Passing in an object hash returns the object's content,\n * size, and type.\n *\n * Passing \"-p\" will instruct cat-file to determine the object type, and display its formatted contents.\n *\n * @param {string[]} [options]\n * @param {Function} [then]\n */\nGit.prototype.catFile = function (options, then) {\n   return this._catFile('utf-8', arguments);\n};\n\nGit.prototype.binaryCatFile = function () {\n   return this._catFile('buffer', arguments);\n};\n\nGit.prototype._catFile = function (format, args) {\n   var handler = trailingFunctionArgument(args);\n   var command = ['cat-file'];\n   var options = args[0];\n\n   if (typeof options === 'string') {\n      return this._runTask(\n         configurationErrorTask('Git.catFile: options must be supplied as an array of strings'),\n         handler\n      );\n   }\n\n   if (Array.isArray(options)) {\n      command.push.apply(command, options);\n   }\n\n   const task =\n      format === 'buffer' ? straightThroughBufferTask(command) : straightThroughStringTask(command);\n\n   return this._runTask(task, handler);\n};\n\nGit.prototype.diff = function (options, then) {\n   const task = filterString(options)\n      ? configurationErrorTask(\n           'git.diff: supplying options as a single string is no longer supported, switch to an array of strings'\n        )\n      : straightThroughStringTask(['diff', ...getTrailingOptions(arguments)]);\n\n   return this._runTask(task, trailingFunctionArgument(arguments));\n};\n\nGit.prototype.diffSummary = function () {\n   return this._runTask(\n      diffSummaryTask(getTrailingOptions(arguments, 1)),\n      trailingFunctionArgument(arguments)\n   );\n};\n\nGit.prototype.applyPatch = function (patches) {\n   const task = !filterStringOrStringArray(patches)\n      ? configurationErrorTask(\n           `git.applyPatch requires one or more string patches as the first argument`\n        )\n      : applyPatchTask(asArray(patches), getTrailingOptions([].slice.call(arguments, 1)));\n\n   return this._runTask(task, trailingFunctionArgument(arguments));\n};\n\nGit.prototype.revparse = function () {\n   const commands = ['rev-parse', ...getTrailingOptions(arguments, true)];\n   return this._runTask(\n      straightThroughStringTask(commands, true),\n      trailingFunctionArgument(arguments)\n   );\n};\n\n/**\n */\nGit.prototype.clean = function (mode, options, then) {\n   const usingCleanOptionsArray = isCleanOptionsArray(mode);\n   const cleanMode =\n      (usingCleanOptionsArray && mode.join('')) || filterType(mode, filterString) || '';\n   const customArgs = getTrailingOptions([].slice.call(arguments, usingCleanOptionsArray ? 1 : 0));\n\n   return this._runTask(\n      cleanWithOptionsTask(cleanMode, customArgs),\n      trailingFunctionArgument(arguments)\n   );\n};\n\nGit.prototype.exec = function (then) {\n   const task = {\n      commands: [],\n      format: 'utf-8',\n      parser() {\n         if (typeof then === 'function') {\n            then();\n         }\n      },\n   };\n\n   return this._runTask(task);\n};\n\n/**\n * Clears the queue of pending commands and returns the wrapper instance for chaining.\n *\n * @returns {Git}\n */\nGit.prototype.clearQueue = function () {\n   // TODO:\n   // this._executor.clear();\n   return this;\n};\n\n/**\n * Check if a pathname or pathnames are excluded by .gitignore\n *\n * @param {string|string[]} pathnames\n * @param {Function} [then]\n */\nGit.prototype.checkIgnore = function (pathnames, then) {\n   return this._runTask(\n      checkIgnoreTask(asArray(filterType(pathnames, filterStringOrStringArray, []))),\n      trailingFunctionArgument(arguments)\n   );\n};\n\nGit.prototype.checkIsRepo = function (checkType, then) {\n   return this._runTask(\n      checkIsRepoTask(filterType(checkType, filterString)),\n      trailingFunctionArgument(arguments)\n   );\n};\n\nmodule.exports = Git;\n", "import { SimpleGitFactory } from '../../typings';\n\nimport * as api from './api';\nimport {\n   abortPlugin,\n   blockUnsafeOperationsPlugin,\n   commandConfigPrefixingPlugin,\n   completionDetectionPlugin,\n   errorDetectionHandler,\n   errorDetectionPlugin,\n   PluginStore,\n   progressMonitorPlugin,\n   spawnOptionsPlugin,\n   timeoutPlugin,\n} from './plugins';\nimport { suffixPathsPlugin } from './plugins/suffix-paths.plugin';\nimport { createInstanceConfig, folderExists } from './utils';\nimport { SimpleGitOptions } from './types';\n\nconst Git = require('../git');\n\n/**\n * Adds the necessary properties to the supplied object to enable it for use as\n * the default export of a module.\n *\n * Eg: `module.exports = esModuleFactory({ something () {} })`\n */\nexport function esModuleFactory<T>(defaultExport: T) {\n   return Object.defineProperties(defaultExport, {\n      __esModule: { value: true },\n      default: { value: defaultExport },\n   }) as T & { __esModule: true; default: T };\n}\n\nexport function gitExportFactory(factory: SimpleGitFactory) {\n   return Object.assign(factory.bind(null), api);\n}\n\nexport function gitInstanceFactory(\n   baseDir?: string | Partial<SimpleGitOptions>,\n   options?: Partial<SimpleGitOptions>\n) {\n   const plugins = new PluginStore();\n   const config = createInstanceConfig(\n      (baseDir && (typeof baseDir === 'string' ? { baseDir } : baseDir)) || {},\n      options\n   );\n\n   if (!folderExists(config.baseDir)) {\n      throw new api.GitConstructError(\n         config,\n         `Cannot use simple-git on a directory that does not exist`\n      );\n   }\n\n   if (Array.isArray(config.config)) {\n      plugins.add(commandConfigPrefixingPlugin(config.config));\n   }\n\n   plugins.add(blockUnsafeOperationsPlugin(config.unsafe));\n   plugins.add(suffixPathsPlugin());\n   plugins.add(completionDetectionPlugin(config.completion));\n   config.abort && plugins.add(abortPlugin(config.abort));\n   config.progress && plugins.add(progressMonitorPlugin(config.progress));\n   config.timeout && plugins.add(timeoutPlugin(config.timeout));\n   config.spawnOptions && plugins.add(spawnOptionsPlugin(config.spawnOptions));\n\n   plugins.add(errorDetectionPlugin(errorDetectionHandler(true)));\n   config.errors && plugins.add(errorDetectionPlugin(config.errors));\n\n   return new Git(config, plugins);\n}\n", "import { SimpleGit, SimpleGitOptions } from '../../../typings';\n\nimport { GitResponseError } from '../errors/git-response-error';\nimport { gitInstanceFactory } from '../git-factory';\nimport { SimpleGitTaskCallback } from '../types';\n\nconst functionNamesBuilderApi = ['customBinary', 'env', 'outputHandler', 'silent'];\n\nconst functionNamesPromiseApi = [\n   'add',\n   'addAnnotatedTag',\n   'addConfig',\n   'addRemote',\n   'addTag',\n   'applyPatch',\n   'binaryCatFile',\n   'branch',\n   'branchLocal',\n   'catFile',\n   'checkIgnore',\n   'checkIsRepo',\n   'checkout',\n   'checkoutBranch',\n   'checkoutLatestTag',\n   'checkoutLocalBranch',\n   'clean',\n   'clone',\n   'commit',\n   'cwd',\n   'deleteLocalBranch',\n   'deleteLocalBranches',\n   'diff',\n   'diffSummary',\n   'exec',\n   'fetch',\n   'getRemotes',\n   'init',\n   'listConfig',\n   'listRemote',\n   'log',\n   'merge',\n   'mergeFromTo',\n   'mirror',\n   'mv',\n   'pull',\n   'push',\n   'pushTags',\n   'raw',\n   'rebase',\n   'remote',\n   'removeRemote',\n   'reset',\n   'revert',\n   'revparse',\n   'rm',\n   'rmKeepLocal',\n   'show',\n   'stash',\n   'stashList',\n   'status',\n   'subModule',\n   'submoduleAdd',\n   'submoduleInit',\n   'submoduleUpdate',\n   'tag',\n   'tags',\n   'updateServerInfo',\n];\n\nexport function gitP(\n   ...args: [] | [string] | [Partial<SimpleGitOptions>] | [string, Partial<SimpleGitOptions>]\n): SimpleGit {\n   let git: any;\n\n   let chain = Promise.resolve();\n\n   try {\n      git = gitInstanceFactory(...args);\n   } catch (e) {\n      chain = Promise.reject(e);\n   }\n\n   function builderReturn() {\n      return promiseApi;\n   }\n\n   function chainReturn() {\n      return chain;\n   }\n\n   const promiseApi = [...functionNamesBuilderApi, ...functionNamesPromiseApi].reduce(\n      (api: any, name: string) => {\n         const isAsync = functionNamesPromiseApi.includes(name);\n\n         const valid = isAsync ? asyncWrapper(name, git) : syncWrapper(name, git, api);\n         const alternative = isAsync ? chainReturn : builderReturn;\n\n         Object.defineProperty(api, name, {\n            enumerable: false,\n            configurable: false,\n            value: git ? valid : alternative,\n         });\n\n         return api;\n      },\n      {}\n   );\n\n   return promiseApi as SimpleGit;\n\n   function asyncWrapper(fn: string, git: any): (...args: any[]) => Promise<any> {\n      return function (...args: any[]) {\n         if (typeof args[args.length] === 'function') {\n            throw new TypeError(\n               'Promise interface requires that handlers are not supplied inline, ' +\n                  'trailing function not allowed in call to ' +\n                  fn\n            );\n         }\n\n         return chain.then(function () {\n            return new Promise(function (resolve, reject) {\n               const callback: SimpleGitTaskCallback = (err: Error | null, result?: any) => {\n                  if (err) {\n                     return reject(toError(err));\n                  }\n\n                  resolve(result);\n               };\n               args.push(callback);\n\n               git[fn].apply(git, args);\n            });\n         });\n      };\n   }\n\n   function syncWrapper(fn: string, git: any, api: SimpleGit) {\n      return (...args: any[]) => {\n         git[fn](...args);\n\n         return api;\n      };\n   }\n}\n\nfunction toError(error: Error | string | any): Error {\n   if (error instanceof Error) {\n      return error;\n   }\n\n   if (typeof error === 'string') {\n      return new Error(error);\n   }\n\n   return new GitResponseError(error);\n}\n", "const { gitP } = require('./lib/runners/promise-wrapped');\nconst { esModuleFactory, gitInstanceFactory, gitExportFactory } = require('./lib/git-factory');\n\nconst simpleGit = esModuleFactory(gitExportFactory(gitInstanceFactory));\n\nmodule.exports = Object.assign(simpleGit, { gitP, simpleGit });\n", "const vscode = require('vscode');\nconst simpleGit = require('simple-git')();\n\nfunction activate(context) {\n    let disposable = vscode.commands.registerCommand('extension.openJiraTicket', () => {\n        // Obtenez le num\u00E9ro du ticket \u00E0 partir de la branche actuelle\n        const branchName = vscode.workspace.getWorkspaceFolder(vscode.window.activeTextEditor.document.uri).name;\n        const ticketNumber = extractTicketNumberFromBranch(branchName);\n\n        if (ticketNumber) {\n            // Construisez l'URL Jira en utilisant le num\u00E9ro du ticket\n            const jiraUrl = `https://your-jira-instance/browse/${getbranchName()}`;\n\n            // Ouvrez l'URL dans le navigateur par d\u00E9faut\n            vscode.env.openExternal(vscode.Uri.parse(jiraUrl));\n        } else {\n\n            vscode.window.showErrorMessage(getbranchName());\n            vscode.window.showErrorMessage(\"Aucun num\u00E9ro de ticket trouv\u00E9 dans le nom de la branche.\");\n        }\n    });\n\n    const statusBarItem = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left, 100);\n    statusBarItem.text = \"Ouvrir dans Jira\";\n    statusBarItem.command = 'extension.openJiraTicket';\n    statusBarItem.show();\n\n    context.subscriptions.push(statusBarItem, disposable);\n\n}\n\nfunction extractTicketNumberFromBranch(branchName) {\n    return getbranchName()\n}\n\nfunction getbranchName() {\n    simpleGit.branch((err, branchSummary) => {\n        if (err) {\n            console.error('Error:', err);\n            return;\n        }\n\n        const currentBranch = branchSummary.current;\n        console.log('Current branch:', currentBranch);\n        return currentBranch;\n    })\n}\n\nmodule.exports = {\n    activate\n};\n"],
  "mappings": ";;;;;;;AAAA;AAAA,gDAAAA,UAAAC,SAAA;AAIA,QAAI,IAAI;AACR,QAAI,IAAI,IAAI;AACZ,QAAI,IAAI,IAAI;AACZ,QAAI,IAAI,IAAI;AACZ,QAAI,IAAI,IAAI;AACZ,QAAI,IAAI,IAAI;AAgBZ,IAAAA,QAAO,UAAU,SAAS,KAAK,SAAS;AACtC,gBAAU,WAAW,CAAC;AACtB,UAAI,OAAO,OAAO;AAClB,UAAI,SAAS,YAAY,IAAI,SAAS,GAAG;AACvC,eAAO,MAAM,GAAG;AAAA,MAClB,WAAW,SAAS,YAAY,SAAS,GAAG,GAAG;AAC7C,eAAO,QAAQ,OAAO,QAAQ,GAAG,IAAI,SAAS,GAAG;AAAA,MACnD;AACA,YAAM,IAAI;AAAA,QACR,0DACE,KAAK,UAAU,GAAG;AAAA,MACtB;AAAA,IACF;AAUA,aAAS,MAAM,KAAK;AAClB,YAAM,OAAO,GAAG;AAChB,UAAI,IAAI,SAAS,KAAK;AACpB;AAAA,MACF;AACA,UAAI,QAAQ,mIAAmI;AAAA,QAC7I;AAAA,MACF;AACA,UAAI,CAAC,OAAO;AACV;AAAA,MACF;AACA,UAAI,IAAI,WAAW,MAAM,CAAC,CAAC;AAC3B,UAAI,QAAQ,MAAM,CAAC,KAAK,MAAM,YAAY;AAC1C,cAAQ,MAAM;AAAA,QACZ,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACH,iBAAO,IAAI;AAAA,QACb,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACH,iBAAO,IAAI;AAAA,QACb,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACH,iBAAO,IAAI;AAAA,QACb,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACH,iBAAO,IAAI;AAAA,QACb,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACH,iBAAO,IAAI;AAAA,QACb,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACH,iBAAO,IAAI;AAAA,QACb,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACH,iBAAO;AAAA,QACT;AACE,iBAAO;AAAA,MACX;AAAA,IACF;AAUA,aAAS,SAAS,IAAI;AACpB,UAAI,QAAQ,KAAK,IAAI,EAAE;AACvB,UAAI,SAAS,GAAG;AACd,eAAO,KAAK,MAAM,KAAK,CAAC,IAAI;AAAA,MAC9B;AACA,UAAI,SAAS,GAAG;AACd,eAAO,KAAK,MAAM,KAAK,CAAC,IAAI;AAAA,MAC9B;AACA,UAAI,SAAS,GAAG;AACd,eAAO,KAAK,MAAM,KAAK,CAAC,IAAI;AAAA,MAC9B;AACA,UAAI,SAAS,GAAG;AACd,eAAO,KAAK,MAAM,KAAK,CAAC,IAAI;AAAA,MAC9B;AACA,aAAO,KAAK;AAAA,IACd;AAUA,aAAS,QAAQ,IAAI;AACnB,UAAI,QAAQ,KAAK,IAAI,EAAE;AACvB,UAAI,SAAS,GAAG;AACd,eAAO,OAAO,IAAI,OAAO,GAAG,KAAK;AAAA,MACnC;AACA,UAAI,SAAS,GAAG;AACd,eAAO,OAAO,IAAI,OAAO,GAAG,MAAM;AAAA,MACpC;AACA,UAAI,SAAS,GAAG;AACd,eAAO,OAAO,IAAI,OAAO,GAAG,QAAQ;AAAA,MACtC;AACA,UAAI,SAAS,GAAG;AACd,eAAO,OAAO,IAAI,OAAO,GAAG,QAAQ;AAAA,MACtC;AACA,aAAO,KAAK;AAAA,IACd;AAMA,aAAS,OAAO,IAAI,OAAO,GAAG,MAAM;AAClC,UAAI,WAAW,SAAS,IAAI;AAC5B,aAAO,KAAK,MAAM,KAAK,CAAC,IAAI,MAAM,QAAQ,WAAW,MAAM;AAAA,IAC7D;AAAA;AAAA;;;ACjKA;AAAA,qCAAAC,UAAAC,SAAA;AAMA,aAAS,MAAM,KAAK;AACnB,kBAAY,QAAQ;AACpB,kBAAY,UAAU;AACtB,kBAAY,SAAS;AACrB,kBAAY,UAAU;AACtB,kBAAY,SAAS;AACrB,kBAAY,UAAU;AACtB,kBAAY,WAAW;AACvB,kBAAY,UAAU;AAEtB,aAAO,KAAK,GAAG,EAAE,QAAQ,SAAO;AAC/B,oBAAY,GAAG,IAAI,IAAI,GAAG;AAAA,MAC3B,CAAC;AAMD,kBAAY,QAAQ,CAAC;AACrB,kBAAY,QAAQ,CAAC;AAOrB,kBAAY,aAAa,CAAC;AAQ1B,eAAS,YAAY,WAAW;AAC/B,YAAI,OAAO;AAEX,iBAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AAC1C,kBAAS,QAAQ,KAAK,OAAQ,UAAU,WAAW,CAAC;AACpD,kBAAQ;AAAA,QACT;AAEA,eAAO,YAAY,OAAO,KAAK,IAAI,IAAI,IAAI,YAAY,OAAO,MAAM;AAAA,MACrE;AACA,kBAAY,cAAc;AAS1B,eAAS,YAAY,WAAW;AAC/B,YAAI;AACJ,YAAI,iBAAiB;AACrB,YAAI;AACJ,YAAI;AAEJ,iBAAS,SAAS,MAAM;AAEvB,cAAI,CAAC,MAAM,SAAS;AACnB;AAAA,UACD;AAEA,gBAAM,OAAO;AAGb,gBAAM,OAAO,OAAO,oBAAI,KAAK,CAAC;AAC9B,gBAAM,KAAK,QAAQ,YAAY;AAC/B,eAAK,OAAO;AACZ,eAAK,OAAO;AACZ,eAAK,OAAO;AACZ,qBAAW;AAEX,eAAK,CAAC,IAAI,YAAY,OAAO,KAAK,CAAC,CAAC;AAEpC,cAAI,OAAO,KAAK,CAAC,MAAM,UAAU;AAEhC,iBAAK,QAAQ,IAAI;AAAA,UAClB;AAGA,cAAI,QAAQ;AACZ,eAAK,CAAC,IAAI,KAAK,CAAC,EAAE,QAAQ,iBAAiB,CAAC,OAAO,WAAW;AAE7D,gBAAI,UAAU,MAAM;AACnB,qBAAO;AAAA,YACR;AACA;AACA,kBAAM,YAAY,YAAY,WAAW,MAAM;AAC/C,gBAAI,OAAO,cAAc,YAAY;AACpC,oBAAM,MAAM,KAAK,KAAK;AACtB,sBAAQ,UAAU,KAAK,MAAM,GAAG;AAGhC,mBAAK,OAAO,OAAO,CAAC;AACpB;AAAA,YACD;AACA,mBAAO;AAAA,UACR,CAAC;AAGD,sBAAY,WAAW,KAAK,MAAM,IAAI;AAEtC,gBAAM,QAAQ,KAAK,OAAO,YAAY;AACtC,gBAAM,MAAM,MAAM,IAAI;AAAA,QACvB;AAEA,cAAM,YAAY;AAClB,cAAM,YAAY,YAAY,UAAU;AACxC,cAAM,QAAQ,YAAY,YAAY,SAAS;AAC/C,cAAM,SAAS;AACf,cAAM,UAAU,YAAY;AAE5B,eAAO,eAAe,OAAO,WAAW;AAAA,UACvC,YAAY;AAAA,UACZ,cAAc;AAAA,UACd,KAAK,MAAM;AACV,gBAAI,mBAAmB,MAAM;AAC5B,qBAAO;AAAA,YACR;AACA,gBAAI,oBAAoB,YAAY,YAAY;AAC/C,gCAAkB,YAAY;AAC9B,6BAAe,YAAY,QAAQ,SAAS;AAAA,YAC7C;AAEA,mBAAO;AAAA,UACR;AAAA,UACA,KAAK,OAAK;AACT,6BAAiB;AAAA,UAClB;AAAA,QACD,CAAC;AAGD,YAAI,OAAO,YAAY,SAAS,YAAY;AAC3C,sBAAY,KAAK,KAAK;AAAA,QACvB;AAEA,eAAO;AAAA,MACR;AAEA,eAAS,OAAO,WAAW,WAAW;AACrC,cAAM,WAAW,YAAY,KAAK,aAAa,OAAO,cAAc,cAAc,MAAM,aAAa,SAAS;AAC9G,iBAAS,MAAM,KAAK;AACpB,eAAO;AAAA,MACR;AASA,eAAS,OAAO,YAAY;AAC3B,oBAAY,KAAK,UAAU;AAC3B,oBAAY,aAAa;AAEzB,oBAAY,QAAQ,CAAC;AACrB,oBAAY,QAAQ,CAAC;AAErB,YAAI;AACJ,cAAM,SAAS,OAAO,eAAe,WAAW,aAAa,IAAI,MAAM,QAAQ;AAC/E,cAAM,MAAM,MAAM;AAElB,aAAK,IAAI,GAAG,IAAI,KAAK,KAAK;AACzB,cAAI,CAAC,MAAM,CAAC,GAAG;AAEd;AAAA,UACD;AAEA,uBAAa,MAAM,CAAC,EAAE,QAAQ,OAAO,KAAK;AAE1C,cAAI,WAAW,CAAC,MAAM,KAAK;AAC1B,wBAAY,MAAM,KAAK,IAAI,OAAO,MAAM,WAAW,MAAM,CAAC,IAAI,GAAG,CAAC;AAAA,UACnE,OAAO;AACN,wBAAY,MAAM,KAAK,IAAI,OAAO,MAAM,aAAa,GAAG,CAAC;AAAA,UAC1D;AAAA,QACD;AAAA,MACD;AAQA,eAAS,UAAU;AAClB,cAAM,aAAa;AAAA,UAClB,GAAG,YAAY,MAAM,IAAI,WAAW;AAAA,UACpC,GAAG,YAAY,MAAM,IAAI,WAAW,EAAE,IAAI,eAAa,MAAM,SAAS;AAAA,QACvE,EAAE,KAAK,GAAG;AACV,oBAAY,OAAO,EAAE;AACrB,eAAO;AAAA,MACR;AASA,eAAS,QAAQ,MAAM;AACtB,YAAI,KAAK,KAAK,SAAS,CAAC,MAAM,KAAK;AAClC,iBAAO;AAAA,QACR;AAEA,YAAI;AACJ,YAAI;AAEJ,aAAK,IAAI,GAAG,MAAM,YAAY,MAAM,QAAQ,IAAI,KAAK,KAAK;AACzD,cAAI,YAAY,MAAM,CAAC,EAAE,KAAK,IAAI,GAAG;AACpC,mBAAO;AAAA,UACR;AAAA,QACD;AAEA,aAAK,IAAI,GAAG,MAAM,YAAY,MAAM,QAAQ,IAAI,KAAK,KAAK;AACzD,cAAI,YAAY,MAAM,CAAC,EAAE,KAAK,IAAI,GAAG;AACpC,mBAAO;AAAA,UACR;AAAA,QACD;AAEA,eAAO;AAAA,MACR;AASA,eAAS,YAAY,QAAQ;AAC5B,eAAO,OAAO,SAAS,EACrB,UAAU,GAAG,OAAO,SAAS,EAAE,SAAS,CAAC,EACzC,QAAQ,WAAW,GAAG;AAAA,MACzB;AASA,eAAS,OAAO,KAAK;AACpB,YAAI,eAAe,OAAO;AACzB,iBAAO,IAAI,SAAS,IAAI;AAAA,QACzB;AACA,eAAO;AAAA,MACR;AAMA,eAAS,UAAU;AAClB,gBAAQ,KAAK,uIAAuI;AAAA,MACrJ;AAEA,kBAAY,OAAO,YAAY,KAAK,CAAC;AAErC,aAAO;AAAA,IACR;AAEA,IAAAA,QAAO,UAAU;AAAA;AAAA;;;ACjRjB;AAAA,sCAAAC,UAAAC,SAAA;AAMA,IAAAD,SAAQ,aAAa;AACrB,IAAAA,SAAQ,OAAO;AACf,IAAAA,SAAQ,OAAO;AACf,IAAAA,SAAQ,YAAY;AACpB,IAAAA,SAAQ,UAAU,aAAa;AAC/B,IAAAA,SAAQ,WAAW,MAAM;AACxB,UAAI,SAAS;AAEb,aAAO,MAAM;AACZ,YAAI,CAAC,QAAQ;AACZ,mBAAS;AACT,kBAAQ,KAAK,uIAAuI;AAAA,QACrJ;AAAA,MACD;AAAA,IACD,GAAG;AAMH,IAAAA,SAAQ,SAAS;AAAA,MAChaAAS,YAAY;AAIpB,UAAI,OAAO,WAAW,eAAe,OAAO,YAAY,OAAO,QAAQ,SAAS,cAAc,OAAO,QAAQ,SAAS;AACrH,eAAO;AAAA,MACR;AAGA,UAAI,OAAO,cAAc,eAAe,UAAU,aAAa,UAAU,UAAU,YAAY,EAAE,MAAM,uBAAuB,GAAG;AAChI,eAAO;AAAA,MACR;AAIA,aAAQ,OAAO,aAAa,eAAe,SAAS,mBAAmB,SAAS,gBAAgB,SAAS,SAAS,gBAAgB,MAAM;AAAA,MAEtI,OAAO,WAAW,eAAe,OAAO,YAAY,OAAO,QAAQ,WAAY,OAAO,QAAQ,aAAa,OAAO,QAAQ;AAAA;AAAA,MAG1H,OAAO,cAAc,eAAe,UAAU,aAAa,UAAU,UAAU,YAAY,EAAE,MAAM,gBAAgB,KAAK,SAAS,OAAO,IAAI,EAAE,KAAK;AAAA,MAEnJ,OAAO,cAAc,eAAe,UAAU,aAAa,UAAU,UAAU,YAAY,EAAE,MAAM,oBAAoB;AAAA,IAC1H;AAQA,aAAS,WAAW,MAAM;AACzB,WAAK,CAAC,KAAK,KAAK,YAAY,OAAO,MAClC,KAAK,aACJ,KAAK,YAAY,QAAQ,OAC1B,KAAK,CAAC,KACL,KAAK,YAAY,QAAQ,OAC1B,MAAMC,QAAO,QAAQ,SAAS,KAAK,IAAI;AAExC,UAAI,CAAC,KAAK,WAAW;AACpB;AAAA,MACD;AAEA,YAAM,IAAI,YAAY,KAAK;AAC3B,WAAK,OAAO,GAAG,GAAG,GAAG,gBAAgB;AAKrC,UAAI,QAAQ;AACZ,UAAI,QAAQ;AACZ,WAAK,CAAC,EAAE,QAAQ,eAAe,WAAS;AACvC,YAAI,UAAU,MAAM;AACnB;AAAA,QACD;AACA;AACA,YAAI,UAAU,MAAM;AAGnB,kBAAQ;AAAA,QACT;AAAA,MACD,CAAC;AAED,WAAK,OAAO,OAAO,GAAG,CAAC;AAAA,IACxB;AAUA,IAAAD,SAAQ,MAAM,QAAQ,SAAS,QAAQ,QAAQ,MAAM;AAAA,IAAC;AAQtD,aAAS,KAAK,YAAY;AACzB,UAAI;AACH,YAAI,YAAY;AACf,UAAAA,SAAQ,QAAQ,QAAQ,SAAS,UAAU;AAAA,QAC5C,OAAO;AACN,UAAAA,SAAQ,QAAQ,WAAW,OAAO;AAAA,QACnC;AAAA,MACD,SAAS,OAAO;AAAA,MAGhB;AAAA,IACD;AAQA,aAAS,OAAO;AACf,UAAI;AACJ,UAAI;AACH,YAAIA,SAAQ,QAAQ,QAAQ,OAAO;AAAA,MACpC,SAAS,OAAO;AAAA,MAGhB;AAGA,UAAI,CAAC,KAAK,OAAO,YAAY,eAAe,SAAS,SAAS;AAC7D,YAAI,QAAQ,IAAI;AAAA,MACjB;AAEA,aAAO;AAAA,IACR;AAaA,aAAS,eAAe;AACvB,UAAI;AAGH,eAAO;AAAA,MACR,SAAS,OAAO;AAAA,MAGhB;AAAA,IACD;AAEA,IAAAC,QAAO,UAAU,iBAAoBD,QAAO;AAE5C,QAAM,EAAC,WAAU,IAAIC,QAAO;AAM5B,eAAW,IAAI,SAAU,GAAG;AAC3B,UAAI;AACH,eAAO,KAAK,UAAU,CAAC;AAAA,MACxB,SAAS,OAAO;AACf,eAAO,iCAAiC,MAAM;AAAA,MAC/C;AAAA,IACD;AAAA;AAAA;;;AC5QA;AAAA,mCAAAC,UAAAC,SAAA;AAAA;AAEA,IAAAA,QAAO,UAAU,CAAC,MAAM,OAAO,QAAQ,SAAS;AAC/C,YAAM,SAAS,KAAK,WAAW,GAAG,IAAI,KAAM,KAAK,WAAW,IAAI,MAAM;AACtE,YAAM,WAAW,KAAK,QAAQ,SAAS,IAAI;AAC3C,YAAM,qBAAqB,KAAK,QAAQ,IAAI;AAC5C,aAAO,aAAa,OAAO,uBAAuB,MAAM,WAAW;AAAA,IACpE;AAAA;AAAA;;;ACPA;AAAA,yCAAAC,UAAAC,SAAA;AAAA;AACA,QAAM,KAAK,QAAQ,IAAI;AACvB,QAAM,MAAM,QAAQ,KAAK;AACzB,QAAM,UAAU;AAEhB,QAAM,EAAC,IAAG,IAAI;AAEd,QAAI;AACJ,QAAI,QAAQ,UAAU,KACrB,QAAQ,WAAW,KACnB,QAAQ,aAAa,KACrB,QAAQ,aAAa,GAAG;AACxB,uBAAiB;AAAA,IAClB,WAAW,QAAQ,OAAO,KACzB,QAAQ,QAAQ,KAChB,QAAQ,YAAY,KACpB,QAAQ,cAAc,GAAG;AACzB,uBAAiB;AAAA,IAClB;AAEA,aAAS,gBAAgB;AACxB,UAAI,iBAAiB,KAAK;AACzB,YAAI,IAAI,gBAAgB,QAAQ;AAC/B,iBAAO;AAAA,QACR;AAEA,YAAI,IAAI,gBAAgB,SAAS;AAChC,iBAAO;AAAA,QACR;AAEA,eAAO,IAAI,YAAY,WAAW,IAAI,IAAI,KAAK,IAAI,OAAO,SAAS,IAAI,aAAa,EAAE,GAAG,CAAC;AAAA,MAC3F;AAAA,IACD;AAEA,aAAS,eAAe,OAAO;AAC9B,UAAI,UAAU,GAAG;AAChB,eAAO;AAAA,MACR;AAEA,aAAO;AAAA,QACN;AAAA,QACA,UAAU;AAAA,QACV,QAAQ,SAAS;AAAA,QACjB,QAAQ,SAAS;AAAA,MAClB;AAAA,IACD;AAEA,aAAS,cAAc,YAAY,EAAC,aAAa,aAAa,KAAI,IAAI,CAAC,GAAG;AACzE,YAAM,mBAAmB,cAAc;AACvC,UAAI,qBAAqB,QAAW;AACnC,yBAAiB;AAAA,MAClB;AAEA,YAAM,aAAa,aAAa,iBAAiB;AAEjD,UAAI,eAAe,GAAG;AACrB,eAAO;AAAA,MACR;AAEA,UAAI,YAAY;AACf,YAAI,QAAQ,WAAW,KACtB,QAAQ,YAAY,KACpB,QAAQ,iBAAiB,GAAG;AAC5B,iBAAO;AAAA,QACR;AAEA,YAAI,QAAQ,WAAW,GAAG;AACzB,iBAAO;AAAA,QACR;AAAA,MACD;AAEA,UAAI,cAAc,CAAC,eAAe,eAAe,QAAW;AAC3D,eAAO;AAAA,MACR;AAEA,YAAM,MAAM,cAAc;AAE1B,UAAI,IAAI,SAAS,QAAQ;AACxB,eAAO;AAAA,MACR;AAEA,UAAI,QAAQ,aAAa,SAAS;AAGjC,cAAM,YAAY,GAAG,QAAQ,EAAE,MAAM,GAAG;AACxC,YACC,OAAO,UAAU,CAAC,CAAC,KAAK,MACxB,OAAO,UAAU,CAAC,CAAC,KAAK,OACvB;AACD,iBAAO,OAAO,UAAU,CAAC,CAAC,KAAK,QAAQ,IAAI;AAAA,QAC5C;AAEA,eAAO;AAAA,MACR;AAEA,UAAI,QAAQ,KAAK;AAChB,YAAI,CAAC,UAAU,YAAY,YAAY,aAAa,kBAAkB,aAAa,OAAO,EAAE,KAAK,UAAQ,QAAQ,GAAG,KAAK,IAAI,YAAY,YAAY;AACpJ,iBAAO;AAAA,QACR;AAEA,eAAO;AAAA,MACR;AAEA,UAAI,sBAAsB,KAAK;AAC9B,eAAO,gCAAgC,KAAK,IAAI,gBAAgB,IAAI,IAAI;AAAA,MACzE;AAEA,UAAI,IAAI,cAAc,aAAa;AAClC,eAAO;AAAA,MACR;AAEA,UAAI,kBAAkB,KAAK;AAC1B,cAAM,UAAU,OAAO,UAAU,IAAI,wBAAwB,IAAI,MAAM,GAAG,EAAE,CAAC,GAAG,EAAE;AAElF,gBAAQ,IAAI,cAAc;AAAA,UACzB,KAAK;AACJ,mBAAO,WAAW,IAAI,IAAI;AAAA,UAC3B,KAAK;AACJ,mBAAO;AAAA,QAET;AAAA,MACD;AAEA,UAAI,iBAAiB,KAAK,IAAI,IAAI,GAAG;AACpC,eAAO;AAAA,MACR;AAEA,UAAI,8DAA8D,KAAK,IAAI,IAAI,GAAG;AACjF,eAAO;AAAA,MACR;AAEA,UAAI,eAAe,KAAK;AACvB,eAAO;AAAA,MACR;AAEA,aAAO;AAAA,IACR;AAEA,aAAS,gBAAgB,QAAQ,UAAU,CAAC,GAAG;AAC9C,YAAM,QAAQ,cAAc,QAAQ;AAAA,QACnC,aAAa,UAAU,OAAO;AAAA,QAC9B,GAAG;AAAA,MACJ,CAAC;AAED,aAAO,eAAe,KAAK;AAAA,IAC5B;AAEA,IAAAA,QAAO,UAAU;AAAA,MAChB,eAAe;AAAA,MACf,QAAQ,gBAAgB,EAAC,OAAO,IAAI,OAAO,CAAC,EAAC,CAAC;AAAA,MAC9C,QAAQ,gBAAgB,EAAC,OAAO,IAAI,OAAO,CAAC,EAAC,CAAC;AAAA,IAC/C;AAAA;AAAA;;;ACvJA;AAAA,mCAAAC,UAAAC,SAAA;AAIA,QAAM,MAAM,QAAQ,KAAK;AACzB,QAAM,OAAO,QAAQ,MAAM;AAM3B,IAAAD,SAAQ,OAAO;AACf,IAAAA,SAAQ,MAAM;AACd,IAAAA,SAAQ,aAAa;AACrB,IAAAA,SAAQ,OAAO;AACf,IAAAA,SAAQ,OAAO;AACf,IAAAA,SAAQ,YAAY;AACpB,IAAAA,SAAQ,UAAU,KAAK;AAAA,MACtB,MAAM;AAAA,MAAC;AAAA,MACP;AAAA,IACD;AAMA,IAAAA,SAAQ,SAAS,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAElC,QAAI;AAGH,YAAM,gBAAgB;AAEtB,UAAI,kBAAkB,cAAc,UAAU,eAAe,SAAS,GAAG;AACxE,QAAAA,SAAQ,SAAS;AAAA,UAChhB;AAQA,IAAAA,SAAQ,cAAc,OAAO,KAAK,QAAQ,GAAG,EAAE,OAAO,SAAO;AAC5D,aAAO,WAAW,KAAK,GAAG;AAAA,IAC3B,CAAC,EAAE,OAAO,CAAC,KAAK,QAAQ;AAEvB,YAAM,OAAO,IACX,UAAU,CAAC,EACX,YAAY,EACZ,QAAQ,aAAa,CAAC,GAAG,MAAM;AAC/B,eAAO,EAAE,YAAY;AAAA,MACtB,CAAC;AAGF,UAAI,MAAM,QAAQ,IAAI,GAAG;AACzB,UAAI,2BAA2B,KAAK,GAAG,GAAG;AACzC,cAAM;AAAA,MACP,WAAW,6BAA6B,KAAK,GAAG,GAAG;AAClD,cAAM;AAAA,MACP,WAAW,QAAQ,QAAQ;AAC1B,cAAM;AAAA,MACP,OAAO;AACN,cAAM,OAAO,GAAG;AAAA,MACjB;AAEA,UAAI,IAAI,IAAI;AACZ,aAAO;AAAA,IACR,GAAG,CAAC,CAAC;AAML,aAAS,YAAY;AACpB,aAAO,YAAYA,SAAQ,cAC1B,QAAQA,SAAQ,YAAY,MAAM,IAClC,IAAI,OAAO,QAAQ,OAAO,EAAE;AAAA,IAC9B;AAQA,aAAS,WAAW,MAAM;AACzB,YAAM,EAAC,WAAW,MAAM,WAAAE,WAAS,IAAI;AAErC,UAAIA,YAAW;AACd,cAAM,IAAI,KAAK;AACf,cAAM,YAAY,YAAc,IAAI,IAAI,IAAI,SAAS;AACrD,cAAM,SAAS,KAAK,SAAS,MAAM,IAAI;AAEvC,aAAK,CAAC,IAAI,SAAS,KAAK,CAAC,EAAE,MAAM,IAAI,EAAE,KAAK,OAAO,MAAM;AACzD,aAAK,KAAK,YAAY,OAAOD,QAAO,QAAQ,SAAS,KAAK,IAAI,IAAI,SAAW;AAAA,MAC9E,OAAO;AACN,aAAK,CAAC,IAAI,QAAQ,IAAI,OAAO,MAAM,KAAK,CAAC;AAAA,MAC1C;AAAA,IACD;AAEA,aAAS,UAAU;AAClB,UAAID,SAAQ,YAAY,UAAU;AACjC,eAAO;AAAA,MACR;AACA,cAAO,oBAAI,KAAK,GAAE,YAAY,IAAI;AAAA,IACnC;AAMA,aAAS,OAAO,MAAM;AACrB,aAAO,QAAQ,OAAO,MAAM,KAAK,OAAO,GAAG,IAAI,IAAI,IAAI;AAAA,IACxD;AAQA,aAAS,KAAK,YAAY;AACzB,UAAI,YAAY;AACf,gBAAQ,IAAI,QAAQ;AAAA,MACrB,OAAO;AAGN,eAAO,QAAQ,IAAI;AAAA,MACpB;AAAA,IACD;AASA,aAAS,OAAO;AACf,aAAO,QAAQ,IAAI;AAAA,IACpB;AASA,aAAS,KAAK,OAAO;AACpB,YAAM,cAAc,CAAC;AAErB,YAAM,OAAO,OAAO,KAAKA,SAAQ,WAAW;AAC5C,eAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AACrC,cAAM,YAAY,KAAK,CAAC,CAAC,IAAIA,SAAQ,YAAY,KAAK,CAAC,CAAC;AAAA,MACzD;AAAA,IACD;AAEA,IAAAC,QAAO,UAAU,iBAAoBD,QAAO;AAE5C,QAAM,EAAC,WAAU,IAAIC,QAAO;AAM5B,eAAW,IAAI,SAAU,GAAG;AAC3B,WAAK,YAAY,SAAS,KAAK;AAC/B,aAAO,KAAK,QAAQ,GAAG,KAAK,WAAW,EACrC,MAAM,IAAI,EACV,IAAI,SAAO,IAAI,KAAK,CAAC,EACrB,KAAK,GAAG;AAAA,IACX;AAMA,eAAW,IAAI,SAAU,GAAG;AAC3B,WAAK,YAAY,SAAS,KAAK;AAC/B,aAAO,KAAK,QAAQ,GAAG,KAAK,WAAW;AAAA,IACxC;AAAA;AAAA;;;ACtQA;AAAA,oCAAAE,UAAAC,SAAA;AAKA,QAAI,OAAO,YAAY,eAAe,QAAQ,SAAS,cAAc,QAAQ,YAAY,QAAQ,QAAQ,QAAQ;AAChH,MAAAA,QAAO,UAAU;AAAA,IAClB,OAAO;AACN,MAAAA,QAAO,UAAU;AAAA,IAClB;AAAA;AAAA;;;;;;;;;;ACTA,QAAA,OAAA,QAAA,IAAA;AACA,QAAA,UAAA,gBAAA,aAAA;AAEA,QAAM,MAAM,QAAA,QAAM,sBAAsB;AAExC,aAAS,MAAM,MAAc,QAAiB,aAAoB;AAC/D,UAAI,eAAe,IAAI;AAEvB,UAAI;AACD,cAAM,OAAO,KAAA,SAAS,IAAI;AAE1B,YAAI,KAAK,OAAM,KAAM,QAAQ;AAC1B,cAAI,6BAA6B;AACjC,iBAAO;;AAGV,YAAI,KAAK,YAAW,KAAM,aAAa;AACpC,cAAI,kCAAkC;AACtC,iBAAO;;AAGV,YAAI,iEAAiE;AACrE,eAAO;eACD,GAAG;AACT,YAAI,EAAE,SAAS,UAAU;AACtB,cAAI,qCAAqC,CAAC;AAC1C,iBAAO;;AAGV,YAAI,cAAc,CAAC;AACnB,cAAM;;IAEZ;AAQA,aAAgB,OAAO,MAAc,OAAeC,SAAA,UAAQ;AACzD,aAAO,MAAM,OAAO,OAAOA,SAAA,QAAQ,IAAI,OAAOA,SAAA,UAAU,CAAC;IAC5D;AAFA,IAAAA,SAAA,SAAA;AAOa,IAAAA,SAAA,OAAO;AAKP,IAAAA,SAAA,SAAS;AAKT,IAAAA,SAAA,WAAWA,SAAA,OAAOA,SAAA;;;;;;;;;;;;;;ACxD/B,aAAA,cAAA;;;;;;;;;;ACgCA,aAAgB,WAAQ;AACrB,UAAI;AACJ,UAAI;AACJ,UAAI,SAAgC;AAEpC,YAAM,UAAsB,IAAI,QAAW,CAAC,OAAO,UAAS;AACzD,eAAO;AACP,eAAO;MACV,CAAC;AAED,aAAO;QACJ;QACA,KAAM,QAAM;AACT,cAAI,WAAW,WAAW;AACvB,qBAAS;AACT,iBAAK,MAAM;;QAEjB;QACA,KAAM,OAAK;AACR,cAAI,WAAW,WAAW;AACvB,qBAAS;AACT,iBAAK,KAAK;;QAEhB;QACA,IAAI,YAAS;AACV,iBAAO,WAAW;QACrB;QACA,IAAI,SAAM;AACP,iBAAO;QACV;;IAEN;AA/BA,IAAAC,SAAA,WAAA;AAyCa,IAAAA,SAAA,iBAAiB;AAS9B,IAAAA,SAAA,UAAe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnFf,QA2BO;AA3BP,QAAA,iBAAA,MAAA;MAAA,gCAAA;AA2BO,mBAAA,cAAuB,MAAM;UACjC,YACU,MACP,SACD;AACC,kBAAM,OAAA;AAHC,iBAAA,OAAA;AAIP,mBAAO,eAAe,MAAM,WAAW,SAAA;UAAA;QAAA;MAAA;IAAA,CAAA;ACjC7C,QAsBO;AAtBP,QAAA,0BAAA,MAAA;MAAA,yCAAA;AAAA,uBAAA;AAsBO,2BAAA,cAAwC,SAAS;UACrD,YAImB,KAChB,SACD;AACC,kBAAM,QAAW,WAAW,OAAO,GAAA,CAAA;AAHnB,iBAAA,MAAA;UAAA;QAAA;MAAA;IAAA,CAAA;ACzBf,aAAA,YAAqB,OAAiB;AAC1C,YAAM,MAAM,IAAI,OAAO,KAAA;AACvB,YAAM,IAAI,KAAK,KAAA;AAEf,aAAO;IAAA;AAGH,aAAA,WAAoB,MAAwC;AAChE,aAAO,gBAAgB,UAAU,MAAM,IAAI,IAAA;IAAA;AAGvC,aAAA,QAAiB,UAA4B;AACjD,aAAO,MAAM,IAAI,QAAA,KAAa,CAAA;IAAA;AAdjC,QAAM;AAAN,QAAA,gBAAA,MAAA;MAAA,6BAAA;AAAM,gBAAQ,oBAAI,QAAA;MAAA;IAAA,CAAA;ACAlB,QAYO;AAZP,QAAA,2BAAA,MAAA;MAAA,0CAAA;AAAA,uBAAA;AAYO,4BAAA,cAAgC,SAAS;UAC7C,YACmB,QAChB,SACD;AACC,kBAAM,QAAW,OAAA;AAHD,iBAAA,SAAA;UAAA;QAAA;MAAA;IAAA,CAAA;ACdtB,QAGO;AAHP,QAAA,wBAAA,MAAA;MAAA,uCAAA;AACA,uBAAA;AAEO,yBAAA,cAA6B,SAAS;UAC1C,YACU,MACS,QAChB,SACD;AACC,kBAAM,MAAM,OAAA;AAJL,iBAAA,OAAA;AACS,iBAAA,SAAA;AAIhB,mBAAO,eAAe,MAAM,WAAW,SAAA;UAAA;QAAA;MAAA;IAAA,CAAA;ACV7C,QAUO;AAVP,QAAA,gCAAA,MAAA;MAAA,+CAAA;AAAA,uBAAA;AAUO,iCAAA,cAAqC,SAAS;UAClD,YAAY,SAAkB;AAC3B,kBAAM,QAAW,OAAA;UAAA;QAAA;MAAA;IAAA,CAAA;ACDhB,aAAA,WAAyC,QAAoB;AACjE,aAAO,OAAO,WAAW,aAAa,SAAS;IAAA;AAO3C,aAAA,eAA4C,QAA8B;AAC9E,aAAO,OAAO,WAAW,cAAc,WAAW;IAAA;AAG9C,aAAA,QAAiB,OAAe,MAAgC;AACpE,YAAM,QAAQ,MAAM,QAAQ,IAAA;AAC5B,UAAI,SAAS,GAAG;AACb,eAAO,CAAC,OAAO,EAAA;MAAA;AAGlB,aAAO,CAAC,MAAM,OAAO,GAAG,KAAA,GAAQ,MAAM,OAAO,QAAQ,CAAA,CAAA;IAAA;AAKjD,aAAA,MAAe,OAA2B,SAAS,GAAmB;AAC1E,aAAO,YAAY,KAAA,KAAU,MAAM,SAAS,SAAS,MAAM,MAAA,IAAU;IAAA;AAMjE,aAAA,KAAc,OAAgB,SAAS,GAAG;AAC9C,UAAI,YAAY,KAAA,KAAU,MAAM,SAAS,QAAQ;AAC9C,eAAO,MAAM,MAAM,SAAS,IAAI,MAAA;MAAA;IAAA;AAMtC,aAAA,YAAqB,OAAgC;AAClD,aAAO,CAAC,EAAE,SAAS,OAAO,MAAM,WAAW;IAAA;AAGvC,aAAA,mBAA4B,QAAQ,IAAI,WAAU,MAAM,YAAY,MAAgB;AACxF,aAAO,MAAM,MAAM,SAAA,EAAW,OAAO,CAAC,QAAQ,SAAS;AACpD,cAAM,cAAc,WAAU,KAAK,KAAA,IAAS;AAC5C,YAAI,aAAa;AACd,iBAAO,KAAK,WAAA;QAAA;AAEf,eAAO;MAAA,GACP,CAAA,CAAA;IAAA;AAKC,aAAA,uBACJ,OACA,UACI;AACJ,aAAO,mBAAmB,OAAO,IAAA,EAAM,IAAI,CAAC,SAAS,SAAS,IAAA,CAAA;IAAA;AAG1D,aAAA,aAAsB,MAAuB;AACjD,cAAO,GAAA,mBAAA,QAAO,MAAM,mBAAA,MAAA;IAAA;AAMhB,aAAA,OAAmB,QAAsB,MAAsB;AACnE,UAAI,MAAM,QAAQ,MAAA,GAAS;AACxB,YAAI,CAAC,OAAO,SAAS,IAAA,GAAO;AACzB,iBAAO,KAAK,IAAA;QAAA;MAAA,OAEX;AACJ,eAAO,IAAI,IAAA;MAAA;AAEd,aAAO;IAAA;AAMH,aAAA,UAAsB,QAAa,MAAwB;AAC/D,UAAI,MAAM,QAAQ,MAAA,KAAW,CAAC,OAAO,SAAS,IAAA,GAAO;AAClD,eAAO,KAAK,IAAA;MAAA;AAGf,aAAO;IAAA;AAGH,aAAA,OAAmB,QAAsB,MAAY;AACzD,UAAI,MAAM,QAAQ,MAAA,GAAS;AACxB,cAAM,QAAQ,OAAO,QAAQ,IAAA;AAC7B,YAAI,SAAS,GAAG;AACb,iBAAO,OAAO,OAAO,CAAA;QAAA;MAAA,OAEpB;AACJ,eAAO,OAAO,IAAA;MAAA;AAEjB,aAAO;IAAA;AAOH,aAAA,QAAoB,QAAsB;AAC9C,aAAO,MAAM,QAAQ,MAAA,IAAU,SAAS,CAAC,MAAA;IAAA;AAGrC,aAAA,cAA0B,QAA2B;AACzD,aAAO,QAAQ,MAAA,EAAQ,IAAI,MAAA;IAAA;AAGvB,aAAA,SAAkB,QAAmC,QAAQ,GAAG;AACpE,UAAI,UAAU,MAAM;AACjB,eAAO;MAAA;AAGV,YAAM,MAAM,SAAS,QAAQ,EAAA;AAC7B,aAAO,MAAM,GAAA,IAAO,QAAQ;IAAA;AAGxB,aAAA,cAA0B,OAAY,QAAgB;AAC1D,YAAM,SAAc,CAAA;AACpB,eAAS,IAAI,GAAG,MAAM,MAAM,QAAQ,IAAI,KAAK,KAAK;AAC/C,eAAO,KAAK,QAAQ,MAAM,CAAA,CAAA;MAAA;AAE7B,aAAO;IAAA;AAGH,aAAA,eAAwB,OAAkC;AAC9D,cAAQ,MAAM,QAAQ,KAAA,IAAS,OAAO,OAAO,KAAA,IAAS,OAAO,SAAS,OAAA;IAAA;AAMlE,aAAA,KAAc,QAA6B,YAAsB;AACrE,aAAO,OAAO,OACX,CAAA,GACA,GAAG,WAAW,IAAI,CAAC,aAAc,YAAY,SAAS,EAAA,CAAG,QAAA,GAAW,OAAO,QAAA,EAAA,IAAc,CAAA,CAAA,CAAA;IAAA;AAIxF,aAAA,MAAe,WAAW,GAAkB;AAChD,aAAO,IAAI,QAAQ,CAAC,SAAS,WAAW,MAAM,QAAA,CAAA;IAAA;AA7JjD,QAAA;AAAA,QAGa;AAHb,QAKa;AALb,QAiHa;AAjHb,QAAA,YAAA,MAAA;MAAA,0BAAA;AAAA,6BAA+B;AAGlB,eAAO;AAEP,eAAiC,MAAM;QAAA;AA4GvC,yBAAiB,OAAO,UAAU,SAAS,KAAK,KAAK,OAAO,UAAU,QAAA;MAAA;IAAA,CAAA;ACpG5E,aAAA,WAA0B,OAAU,QAAoC,KAAmB;AAC/F,UAAI,OAAO,KAAA,GAAQ;AAChB,eAAO;MAAA;AAEV,aAAO,UAAU,SAAS,IAAI,MAAM;IAAA;AAOhC,aAAA,iBACJ,OACA,MACoB;AACpB,YAAM,OAAO,WAAW,KAAA,IAAS,WAAW,OAAO;AAEnD,aACG,wBAAwB,KAAK,IAAA,MAC5B,CAAC,QAAQ,CAAC,KAAK,SAAS,IAAA;IAAA;AAmBxB,aAAA,kBAA6C,OAAgC;AACjF,aAAO,CAAC,CAAC,SAAS,eAAe,KAAA,MAAW;IAAA;AAGxC,aAAA,eAAwB,OAAmC;AAC/D,aAAO,OAAO,UAAU;IAAA;AAxD3B,QAoBa;AApBb,QAoCa;AApCb,QAwCa;AAxCb,QA4Ca;AA5Cb,QA2Da;AA3Db,QAAA,wBAAA,MAAA;MAAA,sCAAA;AACA,kBAAA;AACA,sBAAA;AAkBa,sBAAmD,CAAC,UAA+B;AAC7F,iBAAO,MAAM,QAAQ,KAAA;QAAA;AAeX,uBAAgD,CAAC,UAA2B;AACtF,iBAAO,OAAO,UAAU;QAAA;AAGd,4BAAuD,CAAC,UAA6B;AAC/F,iBAAO,MAAM,QAAQ,KAAA,KAAU,MAAM,MAAM,YAAA;QAAA;AAGjC,oCAAwE,CAClF,UAC8B;AAC9B,iBAAO,aAAa,KAAA,KAAW,MAAM,QAAQ,KAAA,KAAU,MAAM,MAAM,YAAA;QAAA;AAYzD,0BAA+D,CACzE,UAC+B;AAC/B,cAAI,SAAS,QAAQ,0BAA0B,SAAS,OAAO,KAAA,GAAQ;AACpE,mBAAO;UAAA;AAEV,iBAAO,MAAM,QAAQ,KAAA,KAAU,OAAO,UAAU,YAAY,OAAO,MAAM,WAAW;QAAA;MAAA;IAAA,CAAA;ACjEvF,QAIY;AAJZ,QAAA,kBAAA,MAAA;MAAA,gCAAA;AAIY,oBAAL,kBAAK,eAAL;AACJ,qBAAA,WAAA,SAAA,IAAA,CAAA,IAAA;AACA,qBAAA,WAAA,OAAA,IAAA,CAAA,IAAA;AACA,qBAAA,WAAA,WAAA,IAAY,EAAA,IAAZ;AACA,qBAAA,WAAA,SAAA,IAAU,GAAA,IAAV;AAJS,iBAAA;QAAA,GAAA,aAAA,CAAA,CAAA;MAAA;IAAA,CAAA;ACJZ,QAEO;AAFP,QAAA,0BAAA,MAAA;MAAA,wCAAA;AAEO,2BAAA,MAA8D;UAClE,YACmB,QACA,QACjB;AAFiB,iBAAA,SAAA;AACA,iBAAA,SAAA;UAAA;UAGnB,YAAsC;AACnC,mBAAO,IAAI,iBAAiB,KAAK,OAAO,SAAS,MAAA,GAAS,KAAK,OAAO,SAAS,MAAA,CAAA;UAAA;QAAA;MAAA;IAAA,CAAA;ACTrF,QAAO;AAAP,QAoDO;AApDP,QAAA,mBAAA,MAAA;MAAA,iCAAA;AAAO,qBAAA,MAAoB;UAKxB,YACG,QACA,YACD;AAPQ,iBAAA,UAAoB,CAAA;AAc9B,iBAAA,QAAQ,CAAC,MAA8C,WAAuB;AAC3E,mBAAK,aAAA;AAEL,kBAAI,CAAC,KAAK,QAAQ,MAAM,CAAC,KAAK,UAAU,KAAK,SAAS,KAAK,OAAO,KAAK,KAAA,CAAA,CAAA,GAAU;AAC9E,uBAAO;cAAA;AAGV,qBAAO,KAAK,WAAW,QAAQ,KAAK,eAAA,CAAA,MAAsB;YAAA;AAb1D,iBAAK,UAAU,MAAM,QAAQ,MAAA,IAAU,SAAS,CAAC,MAAA;AACjD,gBAAI,YAAY;AACb,mBAAK,aAAa;YAAA;UAAA;UAed,WAAW,QAAW,OAAiC;AAC9D,kBAAM,IAAI,MAAM,uCAAA;UAAA;UAGT,eAAe;AACtB,iBAAK,QAAQ,SAAS;UAAA;UAGf,iBAAiB;AACxB,mBAAO,KAAK;UAAA;UAGL,SAAS,KAAa,OAAe,MAAe;AAC3D,kBAAM,UAAU,QAAQ,IAAI,KAAK,IAAA;AACjC,gBAAI,SAAS;AACV,mBAAK,UAAU,OAAO,OAAA;YAAA;AAGzB,mBAAO,CAAC,CAAC;UAAA;UAGF,UAAU,QAAgB,SAAmB;AACpD,iBAAK,QAAQ,KAAK,GAAG,QAAQ,MAAM,CAAA,CAAA;UAAA;QAAA;AAIlC,2BAAA,cAAkC,WAAc;UAC1C,SAAS,KAAa,OAAe,MAAwB;AACpE,mBAAO,aAAa,KAAK,OAAO,IAAA,CAAA,KAAU,MAAM,SAAS,KAAK,OAAO,IAAA;UAAA;UAG9D,UAAU,OAAe,SAAmB;AACnD,gBAAI,QAAQ,KAAK,QAAQ,SAAS,GAAG;AAClC,oBAAM,UAAU,OAAO,OAAA;YAAA;UAAA;QAAA;MAAA;IAAA,CAAA;AClDzB,aAAA,wBACD,SACc;AACjB,YAAM,UAAU,QAAQ,IAAA;AACxB,YAAM,SAA2B,OAAO,OACrC,eAAA,EAAE,QAAA,GAAY,cAAA,GACd,GAAG,QAAQ,OAAO,CAAC,MAAM,OAAO,MAAM,YAAY,CAAA,CAAA;AAGrD,aAAO,UAAU,OAAO,WAAW;AACnC,aAAO,UAAU,OAAO,YAAY;AAEpC,aAAO;IAAA;AArBV,QAEM;AAFN,QAAA,0BAAA,MAAA;MAAA,wCAAA;AAEM,yBAAoD;UACvD,QAAQ;UACR,wBAAwB;UACxB,QAAQ,CAAA;UACR,SAAS;QAAA;MAAA;IAAA,CAAA;ACKL,aAAA,kBACJ,SACA,WAAqB,CAAA,GACZ;AACT,UAAI,CAAC,kBAA2B,OAAA,GAAU;AACvC,eAAO;MAAA;AAGV,aAAO,OAAO,KAAK,OAAA,EAAS,OAAO,CAAC,WAAoB,QAAgB;AACrE,cAAM,QAAuB,QAAQ,GAAA;AAErC,YAAI,WAAW,KAAA,GAAQ;AACpB,oBAAS,KAAK,KAAA;QAAA,WACN,iBAAiB,OAAO,CAAC,SAAA,CAAA,GAAa;AAC9C,oBAAS,KAAK,MAAM,MAAM,KAAA;QAAA,OACtB;AACJ,oBAAS,KAAK,GAAA;QAAA;AAGjB,eAAO;MAAA,GACP,QAAA;IAAA;AAGC,aAAA,mBACJ,MACA,mBAAmB,GACnB,aAAa,OACJ;AACT,YAAM,UAAoB,CAAA;AAE1B,eAAS,IAAI,GAAG,MAAM,mBAAmB,IAAI,KAAK,SAAS,kBAAkB,IAAI,KAAK,KAAK;AACxF,YAAI,gBAAgB,SAAS,OAAO,KAAK,CAAA,CAAA,GAAK;AAC3C,kBAAQ,KAAK,OAAO,KAAK,CAAA,CAAA,CAAA;QAAA;MAAA;AAI/B,wBAAkB,wBAAwB,IAAA,GAAO,OAAA;AACjD,UAAI,CAAC,YAAY;AACd,gBAAQ,KAAK,GAAG,sBAAsB,IAAA,CAAA;MAAA;AAGzC,aAAO;IAAA;AAGV,aAAA,sBAA+B,MAAkB;AAC9C,YAAM,sBAAsB,OAAO,KAAK,IAAA,MAAU;AAClD,aAAO,WAAW,KAAK,MAAM,sBAAsB,IAAI,CAAA,GAAI,aAAa,CAAA,CAAA;IAAA;AAOpE,aAAA,wBAAiC,MAAkC;AACvE,YAAM,sBAAsB,eAAe,KAAK,IAAA,CAAA;AAChD,aAAO,WAAW,KAAK,MAAM,sBAAsB,IAAI,CAAA,GAAI,iBAAA;IAAA;AAOvD,aAAA,yBACJ,MACA,cAAc,MACqB;AACnC,YAAM,WAAW,WAAW,KAAK,IAAA,CAAA;AACjC,aAAO,eAAe,eAAe,QAAA,IAAY,WAAW;IAAA;AA9E/D,QAAA,oBAAA,MAAA;MAAA,kCAAA;AAAA,8BAAA;AAOA,kBAAA;AAEA,sBAAA;MAAA;IAAA,CAAA;ACJO,aAAA,eACJ,SACA,SACD;AACC,aAAO,QAAO,QAAQ,QAAQ,QAAQ,MAAA;IAAA;AAGlC,aAAA,oBACJ,QACA,WACA,OACA,OAAO,MACL;AACF,cAAQ,KAAA,EAAO,QAAQ,CAAC,SAAS;AAC9B,iBAAS,QAAQ,mBAAmB,MAAM,IAAA,GAAO,IAAI,GAAG,MAAM,MAAM,QAAQ,IAAI,KAAK,KAAK;AACvF,gBAAM,OAAO,CAAC,SAAS,MAAM;AAC1B,gBAAI,IAAI,UAAU,KAAK;AACpB;YAAA;AAEH,mBAAO,MAAM,IAAI,MAAA;UAAA;AAGpB,oBAAQ,KAAK,CAAC,EAAE,MAAA,MAAY,MAAM,MAAM,MAAA,CAAA;QAAA;MAAA,CAAA;AAI9C,aAAO;IAAA;AA/BV,QAAA,mBAAA,MAAA;MAAA,iCAAA;AAGA,kBAAA;MAAA;IAAA,CAAA;ACHA,QAAA,gBAAA,CAAA;AAAA,aAAA,eAAA;MAAA,WAAA,MAAA;MAAA,kBAAA,MAAA;MAAA,YAAA,MAAA;MAAA,MAAA,MAAA;MAAA,MAAA,MAAA;MAAA,kBAAA,MAAA;MAAA,QAAA,MAAA;MAAA,mBAAA,MAAA;MAAA,SAAA,MAAA;MAAA,YAAA,MAAA;MAAA,UAAA,MAAA;MAAA,eAAA,MAAA;MAAA,gBAAA,MAAA;MAAA,gBAAA,MAAA;MAAA,sBAAA,MAAA;MAAA,OAAA,MAAA;MAAA,aAAA,MAAA;MAAA,gBAAA,MAAA;MAAA,iBAAA,MAAA;MAAA,mBAAA,MAAA;MAAA,kBAAA,MAAA;MAAA,cAAA,MAAA;MAAA,mBAAA,MAAA;MAAA,2BAAA,MAAA;MAAA,YAAA,MAAA;MAAA,OAAA,MAAA;MAAA,cAAA,MAAA;MAAA,wBAAA,MAAA;MAAA,oBAAA,MAAA;MAAA,WAAA,MAAA;MAAA,gBAAA,MAAA;MAAA,MAAA,MAAA;MAAA,gBAAA,MAAA;MAAA,qBAAA,MAAA;MAAA,MAAA,MAAA;MAAA,eAAA,MAAA;MAAA,QAAA,MAAA;MAAA,SAAA,MAAA;MAAA,oBAAA,MAAA;MAAA,0BAAA,MAAA;MAAA,yBAAA,MAAA;IAAA,CAAA;AAAA,QAAA,aAAA,MAAA;MAAA,2BAAA;AAAA,8BAAA;AACA,wBAAA;AACA,gCAAA;AACA,yBAAA;AACA,gCAAA;AACA,0BAAA;AACA,yBAAA;AACA,kBAAA;MAAA;IAAA,CAAA;ACPA,QAAA,wBAAA,CAAA;AAAA,aAAA,uBAAA;MAAA,kBAAA,MAAA;MAAA,qBAAA,MAAA;MAAA,qBAAA,MAAA;MAAA,iBAAA,MAAA;IAAA,CAAA;AAqBO,aAAA,gBAAyB,QAAsD;AACnF,cAAQ,QAAA;QAAA,KACA;AACF,iBAAO,oBAAA;QAAA,KACL;AACF,iBAAO,oBAAA;MAAA;AAGb,YAAM,WAAW,CAAC,aAAa,uBAAA;AAE/B,aAAO;QACJ;QACA,QAAQ;QACR;QACA;MAAA;IAAA;AAIC,aAAA,sBAAoD;AACxD,YAAM,WAAW,CAAC,aAAa,WAAA;AAE/B,aAAO;QACJ;QACA,QAAQ;QACR;QACA,OAAO,MAAM;AACV,iBAAO,aAAa,KAAK,KAAK,KAAA,CAAA;QAAA;MAAA;IAAA;AAKhC,aAAA,sBAAoD;AACxD,YAAM,WAAW,CAAC,aAAa,sBAAA;AAE/B,aAAO;QACJ;QACA,QAAQ;QACR;QACA;MAAA;IAAA;AAIN,aAAA,iBAA0B,OAAuB;AAC9C,aAAO,8CAA8C,KAAK,OAAO,KAAA,CAAA;IAAA;AAhEpE,QAGY;AAHZ,QASM;AATN,QAiBM;AAjBN,QAAA,qBAAA,MAAA;MAAA,mCAAA;AAAA,mBAAA;AAGY,2BAAL,kBAAK,sBAAL;AACJ,4BAAA,MAAA,IAAO;AACP,4BAAA,SAAA,IAAU;AACV,4BAAA,cAAA,IAAe;AAHN,iBAAA;QAAA,GAAA,oBAAA,CAAA,CAAA;AAMN,kBAA0C,CAAC,EAAE,SAAA,GAAY,OAAO,MAAM,SAAS;AAClF,cAAI,aAAa,OAAqB,iBAAiB,KAAA,GAAQ;AAC5D,mBAAO,KAAK,OAAO,KAAK,OAAA,CAAA;UAAA;AAG3B,eAAK,KAAA;QAAA;AAGF,iBAAwC,CAAC,SAAS;AACrD,iBAAO,KAAK,KAAA,MAAW;QAAA;MAAA;IAAA,CAAA;ACHnB,aAAA,mBAA4B,QAAiB,MAA4B;AAC7E,YAAM,UAAU,IAAI,cAAc,MAAA;AAClC,YAAM,SAAS,SAAS,sBAAsB;AAE9C,yBAAmB,IAAA,EAAM,QAAQ,CAAC,SAAS;AACxC,cAAM,UAAU,KAAK,QAAQ,QAAQ,EAAA;AAErC,gBAAQ,MAAM,KAAK,OAAA;AAClB,SAAA,eAAe,KAAK,OAAA,IAAW,QAAQ,UAAU,QAAQ,OAAO,KAAK,OAAA;MAAA,CAAA;AAGzE,aAAO;IAAA;AA1BV,QAGO;AAHP,QAWM;AAXN,QAYM;AAZN,QAaM;AAbN,QAAA,oBAAA,MAAA;MAAA,sCAAA;AACA,mBAAA;AAEO,wBAAA,MAA4C;UAKhD,YAA4B,QAAiB;AAAjB,iBAAA,SAAA;AAJrB,iBAAA,QAAkB,CAAA;AAClB,iBAAA,QAAkB,CAAA;AAClB,iBAAA,UAAoB,CAAA;UAAA;QAAA;AAKxB,wBAAgB;AAChB,8BAAsB;AACtB,yBAAiB;MAAA;IAAA,CAAA;ACbvB,QAAA,eAAA,CAAA;AAAA,aAAA,cAAA;MAAA,gBAAA,MAAA;MAAA,eAAA,MAAA;MAAA,wBAAA,MAAA;MAAA,cAAA,MAAA;MAAA,aAAA,MAAA;MAAA,2BAAA,MAAA;MAAA,2BAAA,MAAA;IAAA,CAAA;AAYO,aAAA,cAAuB,SAAoC;AAC/D,aAAO;QACJ,UAAU;QACV,QAAQ;QACR,QAAA;MAAA;IAAA;AAIC,aAAA,uBAAgC,OAAkC;AACtE,aAAO;QACJ,UAAU;QACV,QAAQ;QACR,SAAS;AACN,gBAAM,OAAO,UAAU,WAAW,IAAI,uBAAuB,KAAA,IAAS;QAAA;MAAA;IAAA;AAKxE,aAAA,0BAAmC,UAAoB,WAAU,OAA2B;AAChG,aAAO;QACJ;QACA,QAAQ;QACR,OAAO,MAAM;AACV,iBAAO,WAAU,OAAO,IAAA,EAAM,KAAA,IAAS;QAAA;MAAA;IAAA;AAKzC,aAAA,0BAAmC,UAAqC;AAC5E,aAAO;QACJ;QACA,QAAQ;QACR,OAAO,QAAQ;AACZ,iBAAO;QAAA;MAAA;IAAA;AAKT,aAAA,aAAyB,MAA+C;AAC5E,aAAO,KAAK,WAAW;IAAA;AAGnB,aAAA,YAAwB,MAA2C;AACvE,aAAO,KAAK,WAAW,WAAW,CAAC,KAAK,SAAS;IAAA;AAvDpD,QAGa;AAHb,QAAA,YAAA,MAAA;MAAA,0BAAA;AAAA,sCAAA;AAGa,yBAAqB,CAAA;MAAA;IAAA,CAAA;ACHlC,QAAA,gBAAA,CAAA;AAAA,aAAA,eAAA;MAAA,+BAAA,MAAA;MAAA,4BAAA,MAAA;MAAA,6BAAA,MAAA;MAAA,cAAA,MAAA;MAAA,WAAA,MAAA;MAAA,sBAAA,MAAA;MAAA,qBAAA,MAAA;IAAA,CAAA;AAkCO,aAAA,qBAA8B,MAA0B,YAAsB;AAClF,YAAM,EAAE,WAAW,SAAS,MAAA,IAAU,gBAAgB,IAAA;AAEtD,UAAI,CAAC,WAAW;AACb,eAAO,uBAAuB,0BAAA;MAAA;AAGjC,UAAI,CAAC,MAAM,SAAS;AACjB,eAAO,uBAAuB,8BAA8B,KAAK,UAAU,IAAA,CAAA;MAAA;AAG9E,cAAQ,KAAK,GAAG,UAAA;AAEhB,UAAI,QAAQ,KAAK,iBAAA,GAAoB;AAClC,eAAO,uBAAuB,6BAAA;MAAA;AAGjC,aAAO,UAAU,WAAW,OAAA;IAAA;AAGxB,aAAA,UAAmB,MAAiB,YAAgD;AACxF,YAAM,WAAqB,CAAC,SAAS,IAAI,IAAA,IAAQ,GAAG,UAAA;AAEpD,aAAO;QACJ;QACA,QAAQ;QACR,OAAO,MAA4B;AAChC,iBAAO,mBAAmB,SAAS,KAAsB,IAAA;QAAA;MAAA;IAAA;AAK3D,aAAA,oBAA6B,OAA0C;AAC3E,aAAO,MAAM,QAAQ,KAAA,KAAU,MAAM,MAAM,CAAC,SAAS,kBAAkB,IAAI,IAAA,CAAA;IAAA;AAG9E,aAAA,gBAAyB,OAAe;AACrC,UAAI;AACJ,UAAI,UAAoB,CAAA;AACxB,UAAI,QAAQ,EAAE,WAAW,OAAO,SAAS,KAAA;AAEzC,YACI,QAAQ,YAAY,EAAA,EACpB,MAAM,EAAA,EACN,QAAQ,CAAC,SAAS;AAChB,YAAI,YAAY,IAAA,GAAO;AACpB,sBAAY;AACZ,gBAAM,YAAY;QAAA,OACd;AACJ,gBAAM,UAAU,MAAM,WAAW,cAAe,QAAQ,QAAQ,MAAA,IAAU,IAAI,IAAA,EAAA;QAAA;MAAA,CAAA;AAIvF,aAAO;QACJ;QACA;QACA;MAAA;IAAA;AAIN,aAAA,YAAqB,WAA4C;AAC9D,aAAO,cAAc,OAAsB,cAAc;IAAA;AAG5D,aAAA,cAAuB,QAAyB;AAC7C,aAAO,YAAY,KAAK,MAAA,KAAW,kBAAkB,IAAI,OAAO,OAAO,CAAA,CAAA;IAAA;AAG1E,aAAA,kBAA2B,QAAyB;AACjD,UAAI,UAAU,KAAK,MAAA,GAAS;AACzB,eAAO,OAAO,QAAQ,GAAA,IAAO;MAAA;AAGhC,aAAO,WAAW;IAAA;AA3GrB,QAMa;AANb,QAOa;AAPb,QAQa;AARb,QAaY;AAbZ,QA6BM;AA7BN,QAAA,aAAA,MAAA;MAAA,2BAAA;AACA,0BAAA;AAEA,mBAAA;AACA,kBAAA;AAEa,wCAAgC;AAChC,qCAA6B;AAC7B,sCAA8B;AAK/B,uBAAL,kBAAK,kBAAL;AACJ,wBAAA,SAAA,IAAU;AACV,wBAAA,OAAA,IAAQ;AACR,wBAAA,kBAAA,IAAmB;AACnB,wBAAA,cAAA,IAAe;AACf,wBAAA,WAAA,IAAY;AACZ,wBAAA,OAAA,IAAQ;AACR,wBAAA,WAAA,IAAY;AAPH,iBAAA;QAAA,GAAA,gBAAA,CAAA,CAAA;AAgBN,4BAAiC,oBAAI,IAAI;UAC5C;UACA,GAAG,cAAc,OAAO,OAAO,YAAA,CAAA;QAAA,CAAA;MAAA;IAAA,CAAA;ACc3B,aAAA,iBAA0B,MAA0B;AACxD,YAAM,SAAS,IAAI,WAAA;AAEnB,iBAAW,QAAQ,aAAa,IAAA,GAAO;AACpC,eAAO,SAAS,KAAK,MAAM,OAAO,KAAK,GAAA,GAAM,KAAK,KAAA;MAAA;AAGrD,aAAO;IAAA;AAGH,aAAA,gBAAyB,MAAc,KAA8B;AACzE,UAAI,QAAuB;AAC3B,YAAM,SAAmB,CAAA;AACzB,YAAM,SAAgC,oBAAI,IAAA;AAE1C,iBAAW,QAAQ,aAAa,MAAM,GAAA,GAAM;AACzC,YAAI,KAAK,QAAQ,KAAK;AACnB;QAAA;AAGH,eAAO,KAAM,QAAQ,KAAK,KAAA;AAE1B,YAAI,CAAC,OAAO,IAAI,KAAK,IAAA,GAAO;AACzB,iBAAO,IAAI,KAAK,MAAM,CAAA,CAAA;QAAA;AAGzB,eAAO,IAAI,KAAK,IAAA,EAAO,KAAK,KAAA;MAAA;AAG/B,aAAO;QACJ;QACA,OAAO,MAAM,KAAK,OAAO,KAAA,CAAA;QACzB;QACA;QACA;MAAA;IAAA;AAIN,aAAA,eAAwB,UAA0B;AAC/C,aAAO,SAAS,QAAQ,YAAY,EAAA;IAAA;AAGvC,cAAA,aAAuB,MAAc,eAA8B,MAAM;AACtE,YAAM,QAAQ,KAAK,MAAM,IAAA;AAEzB,eAAS,IAAI,GAAG,MAAM,MAAM,SAAS,GAAG,IAAI,OAAO;AAChD,cAAM,OAAO,eAAe,MAAM,GAAA,CAAA;AAElC,YAAI,QAAQ,MAAM,GAAA;AAClB,YAAI,MAAM;AAEV,YAAI,MAAM,SAAS,IAAA,GAAO;AACvB,gBAAM,OAAO,QAAQ,OAAO,IAAA;AAC5B,gBAAM,KAAK,CAAA;AACX,kBAAQ,KAAK,CAAA;QAAA;AAGhB,cAAM,EAAE,MAAM,KAAK,MAAA;MAAA;IAAA;AAtGzB,QAGO;AAHP,QAAA,kBAAA,MAAA;MAAA,oCAAA;AACA,mBAAA;AAEO,qBAAA,MAA8C;UAA9C,cAHP;AAIU,iBAAA,QAAkB,CAAA;AAClB,iBAAA,SAA+C,uBAAO,OAAO,IAAA;UAAA;UAAA,IAIzD,MAAoB;AAC5B,gBAAI,CAAC,KAAK,MAAM;AACb,mBAAK,OAAO,KAAK,MAAM,OAAO,CAAC,KAAmB,SAAiB;AAChE,uBAAO,OAAO,OAAO,KAAK,KAAK,OAAO,IAAA,CAAA;cAAA,GACtC,CAAA,CAAA;YAAA;AAGN,mBAAO,KAAK;UAAA;UAGR,QAAQ,MAA4B;AACxC,gBAAI,EAAE,QAAQ,KAAK,SAAS;AACzB,oBAAM,SAAS,KAAK,KAAK,KAAA;AACzB,mBAAK,OAAO,IAAA,IAAQ,SAAS,OAAO,OAAO,KAAK,OAAO,MAAA,CAAA,IAAW,CAAA;AAElE,mBAAK,MAAM,KAAK,IAAA;YAAA;AAGnB,mBAAO,KAAK,OAAO,IAAA;UAAA;UAGf,SAAS,MAAc,KAAa,OAAe;AACvD,kBAAM,SAAS,KAAK,QAAQ,IAAA;AAE5B,gBAAI,CAAC,OAAO,eAAe,GAAA,GAAM;AAC9B,qBAAO,GAAA,IAAO;YAAA,WACN,MAAM,QAAQ,OAAO,GAAA,CAAA,GAAO;AACnC,qBAAO,GAAA,EAAkB,KAAK,KAAA;YAAA,OAC3B;AACJ,qBAAO,GAAA,IAAO,CAAC,OAAO,GAAA,GAAgB,KAAA;YAAA;AAGzC,iBAAK,OAAO;UAAA;QAAA;MAAA;IAAA,CAAA;AC5BlB,aAAA,cACG,OACA,UACmB;AACnB,UAAI,OAAO,UAAU,YAAY,eAAe,eAAe,KAAA,GAAQ;AACpE,eAAO;MAAA;AAEV,aAAO;IAAA;AAGV,aAAA,cACG,KACA,OACA,SACA,OACmB;AACnB,YAAM,WAAqB,CAAC,UAAU,KAAK,KAAA,EAAA;AAE3C,UAAI,SAAQ;AACT,iBAAS,KAAK,OAAA;MAAA;AAGjB,eAAS,KAAK,KAAK,KAAA;AAEnB,aAAO;QACJ;QACA,QAAQ;QACR,OAAO,MAAsB;AAC1B,iBAAO;QAAA;MAAA;IAAA;AAKhB,aAAA,cAAuB,KAAa,OAAqD;AACtF,YAAM,WAAqB,CAAC,UAAU,UAAU,iBAAiB,aAAa,GAAA;AAE9E,UAAI,OAAO;AACR,iBAAS,OAAO,GAAG,GAAG,KAAK,KAAA,EAAA;MAAA;AAG9B,aAAO;QACJ;QACA,QAAQ;QACR,OAAO,MAAM;AACV,iBAAO,gBAAgB,MAAM,GAAA;QAAA;MAAA;IAAA;AAKtC,aAAA,eAAwB,OAAuD;AAC5E,YAAM,WAAW,CAAC,UAAU,UAAU,iBAAiB,QAAA;AAEvD,UAAI,OAAO;AACR,iBAAS,KAAK,KAAK,KAAA,EAAA;MAAA;AAGtB,aAAO;QACJ;QACA,QAAQ;QACR,OAAO,MAAc;AAClB,iBAAO,iBAAiB,IAAA;QAAA;MAAA;IAAA;AAKlB,aAAA,iBAAuE;AACnF,aAAO;QACJ,UAA8B,KAAa,UAAkB,MAAiB;AAC3E,iBAAO,KAAK,SACT,cACG,KACA,OACA,KAAK,CAAA,MAAO,MACZ;YAAc,KAAK,CAAA;YAAI;;UAAA,CAAA,GAE1B,yBAAyB,SAAA,CAAA;QAAA;QAI/B,UAA8B,KAAa,OAAwB;AAChE,iBAAO,KAAK,SACT,cAAc,KAAK,cAAc,OAAO,MAAA,CAAA,GACxC,yBAAyB,SAAA,CAAA;QAAA;QAI/B,cAAkC,MAAiB;AAChD,iBAAO,KAAK,SACT,eAAe,cAAc,KAAK,CAAA,GAAI,MAAA,CAAA,GACtC,yBAAyB,SAAA,CAAA;QAAA;MAAA;IAAA;AAtGrC,QAMY;AANZ,QAAA,cAAA,MAAA;MAAA,4BAAA;AACA,wBAAA;AAGA,mBAAA;AAEY,yBAAL,kBAAK,oBAAL;AACJ,0BAAA,QAAA,IAAS;AACT,0BAAA,QAAA,IAAS;AACT,0BAAA,OAAA,IAAQ;AACR,0BAAA,UAAA,IAAW;AAJF,iBAAA;QAAA,GAAA,kBAAA,CAAA,CAAA;MAAA;IAAA,CAAA;AC0CL,aAAA,oBAA6B,QAAgC;AACjE,aAAO,IAAI,UAAA,EAAY,MAAM,GAAG,MAAA;IAAA;AAGnC,aAAA,UAAmB,MAA0B;AAC1C,YAAM,QAA6B,oBAAI,IAAA;AACvC,YAAM,UAAiC,CAAA;AAEvC,6BAAuB,MAAM,CAAC,UAAU;AACrC,cAAM,CAAC,MAAM,MAAM,OAAA,IAAW,MAAM,MAAM,IAAA;AAC1C,cAAM,IAAI,IAAA;AACT,SAAA,QAAQ,IAAA,IAAQ,QAAQ,IAAA,KAAS,CAAA,GAAI,KAAK;UACxC,MAAM,SAAS,IAAA;UACf;UACA;QAAA,CAAA;MAAA,CAAA;AAIN,aAAO;QACJ;QACA;MAAA;IAAA;AAIS,aAAA,eAAqC;AACjD,aAAO;QACJ,KAAyB,YAAmC;AACzD,gBAAM,OAAO,yBAAyB,SAAA;AACtC,gBAAM,UAAU,mBAAmB,SAAA;AAEnC,qBAAW,UAAU,mBAAmB;AACrC,gBAAI,QAAQ,SAAS,MAAA,GAAS;AAC3B,qBAAO,KAAK,SACT,uBAAuB,qBAAqB,MAAA,qBAAA,GAC5C,IAAA;YAAA;UAAA;AAKT,cAAI,OAAO,eAAe,UAAU;AACjC,yBAAa,iBAAA,EAAmB,MAAM,UAAA;UAAA;AAGzC,gBAAM,WAAW,CAAC,QAAQ,UAAU,MAAM,eAAe,GAAG,SAAS,GAAG,UAAA;AAExE,iBAAO,KAAK,SACT;YACG;YACA,QAAQ;YACR,OAAO,QAAQ;AACZ,qBAAO,UAAU,MAAA;YAAA;UAAA,GAGvB,IAAA;QAAA;MAAA;IAAA;AArGZ,QAaM;AAbN,QAeM;AAfN,QAAA;AAAA,QAyBA;AAzBA,QAAA,YAAA,MAAA;MAAA,0BAAA;AAEA,mBAAA;AASA,kBAAA;AAEM,4BAAoB,CAAC,IAAA;AAErB,gBAAQ,OAAO,WAAA;AAUrB,oBAAA,MAAwC;UAAxC,cAzBA;AA0BY,iBAAA,EAAA,IAAmB,CAAA;UAAA;UAAA,GAAnB,KAAA,OAEP,OAAO,SAAA,IAAY;AAClB,uBAAW,SAAS,KAAK,KAAA,GAAQ;AAC9B,oBAAM;YAAA;UAAA;UAIZ,OAAO,KAAe;AACnB,gBAAI,UAAU,KAAK,KAAA,EAAO,KAAK,SAAS,KAAK,GAAG,cAAc,KAAK,IAAA,GAAO,GAAA;AAC1E,mBAAO;UAAA;UAGV,SAAS,OAAiB;AACvB,iBAAK,KAAA,EAAO,KAAK,GAAG,cAAc,OAAO,IAAA,CAAA;AACzC,mBAAO;UAAA;QAAA;MAAA;IAAA,CAAA;ACzCb,QAAA,gBAAA,CAAA;AAAA,aAAA,eAAA;MAAA,WAAA,MAAA;MAAA,cAAA,MAAA;MAAA,WAAA,MAAA;IAAA,CAAA;AAiBO,aAAA,UAAmB,MAAwB,YAAsB;AACrE,YAAM,WAAqB,CAAC,OAAA;AAC5B,UAAI,iBAAiB,IAAA,GAAO;AACzB,iBAAS,KAAK,KAAK,IAAA,EAAA;MAAA;AAEtB,eAAS,KAAK,GAAG,UAAA;AAEjB,aAAO,0BAA0B,QAAA;IAAA;AAG7B,aAAA,aAAsB,MAAyC;AACnE,UAAI,iBAAiB,IAAA,GAAO;AACzB,eAAO;MAAA;AAGV,cAAQ,OAAO,MAAA;QAAA,KACP;QAAA,KACA;AACF,iBAAO;MAAA;AAGb;IAAA;AAGH,aAAA,iBAA0B,MAA0C;AACjE,aAAO,WAAW,SAAS,IAAA;IAAA;AA1C9B,QAGY;AAHZ,QAWM;AAXN,QAAA,aAAA,MAAA;MAAA,2BAAA;AAAA,kBAAA;AAGY,oBAAL,kBAAK,eAAL;AACJ,qBAAA,OAAA,IAAQ;AACR,qBAAA,MAAA,IAAO;AACP,qBAAA,MAAA,IAAO;AACP,qBAAA,OAAA,IAAQ;AACR,qBAAA,MAAA,IAAO;AALE,iBAAA;QAAA,GAAA,aAAA,CAAA,CAAA;AAQN,qBAAa,MAAM,KAAK,OAAO,OAAO,SAAA,CAAA;MAAA;IAAA,CAAA;ACX5C,QAAA,cAAA,CAAA;AAAA,aAAA,aAAA;MAAA,kBAAA,MAAA;MAAA,cAAA,MAAA;MAAA,gBAAA,MAAA;MAAA,mBAAA,MAAA;MAAA,UAAA,MAAA;MAAA,gBAAA,MAAA;MAAA,kBAAA,MAAA;MAAA,WAAA,MAAA;MAAA,wBAAA,MAAA;MAAA,kBAAA,MAAA;MAAA,UAAA,MAAA;IAAA,CAAA;AAAA,QAAA,WAAA,MAAA;MAAA,mBAAA;AAAA,sBAAA;AACA,iCAAA;AACA,uBAAA;AACA,8BAAA;AACA,gCAAA;AACA,sCAAA;AACA,2BAAA;AACA,mBAAA;AACA,oBAAA;AACA,kBAAA;AACA,mBAAA;MAAA;IAAA,CAAA;ACNO,aAAA,YAAqB,QAAmC;AAC5D,UAAI,CAAC,QAAQ;AACV;MAAA;AAGH,YAAM,eAA+C;QAClD,MAAM;QACN,OAAO,OAAO,SAAS;AACpB,mBAAA,OAAgB;AACb,oBAAQ,KAAK,IAAI,eAAe,QAAW,SAAS,uBAAA,CAAA;UAAA;AAGvD,iBAAO,iBAAiB,SAAS,IAAA;AAEjC,kBAAQ,QAAQ,GAAG,SAAS,MAAM,OAAO,oBAAoB,SAAS,IAAA,CAAA;QAAA;MAAA;AAI5E,YAAM,gBAAiD;QACpD,MAAM;QACN,OAAO,OAAO,SAAS;AACpB,cAAI,OAAO,SAAS;AACjB,oBAAQ,KAAK,IAAI,eAAe,QAAW,SAAS,wBAAA,CAAA;UAAA;QAAA;MAAA;AAK7D,aAAO,CAAC,eAAe,YAAA;IAAA;AA/B1B,QAAA,oBAAA,MAAA;MAAA,oCAAA;AAEA,8BAAA;MAAA;IAAA,CAAA;ACGA,aAAA,eAAwB,KAAuB;AAC5C,aAAO,OAAO,QAAQ,YAAY,IAAI,KAAA,EAAO,YAAA,MAAkB;IAAA;AAGlE,aAAA,wBAAiC,KAAa,MAAc;AACzD,UAAI,CAAC,eAAe,GAAA,GAAM;AACvB;MAAA;AAGH,UAAI,CAAC,+BAA+B,KAAK,IAAA,GAAO;AAC7C;MAAA;AAGH,YAAM,IAAI,eACP,QACA,UACA,qFAAA;IAAA;AAIN,aAAA,kBAA2B,KAAa,QAAgB;AACrD,UAAI,8BAA8B,KAAK,GAAA,GAAM;AAC1C,cAAM,IAAI,eACP,QACA,UACA,0FAAA;MAAA;AAIN,UAAI,WAAW,WAAW,WAAW,KAAK,GAAA,GAAM;AAC7C,cAAM,IAAI,eACP,QACA,UACA,+EAAA;MAAA;AAIN,UAAI,WAAW,UAAU,eAAe,KAAK,GAAA,GAAM;AAChD,cAAM,IAAI,eACP,QACA,UACA,kFAAA;MAAA;IAAA;AAKF,aAAA,4BAAqC;MACzC,8BAA8B;MAC9B,kBAAkB;IAAA,IACgB,CAAA,GAAmC;AACrE,aAAO;QACJ,MAAM;QACN,OAAO,MAAM,SAAS;AACnB,eAAK,QAAQ,CAAC,SAAS,UAAU;AAC9B,kBAAM,OAAO,QAAQ,KAAK,SAAS,KAAK,QAAQ,CAAA,IAAK;AAErD,2CAA+B,wBAAwB,SAAS,IAAA;AAChE,+BAAmB,kBAAkB,SAAS,QAAQ,MAAA;UAAA,CAAA;AAGzD,iBAAO;QAAA;MAAA;IAAA;AAjEhB,QAAA,sCAAA,MAAA;MAAA,sDAAA;AAEA,8BAAA;MAAA;IAAA,CAAA;ACCO,aAAA,6BACJ,eAC8B;AAC9B,YAAM,SAAS,cAAc,eAAe,IAAA;AAE5C,aAAO;QACJ,MAAM;QACN,OAAO,MAAM;AACV,iBAAO,CAAC,GAAG,QAAQ,GAAG,IAAA;QAAA;MAAA;IAAA;AAX/B,QAAA,uCAAA,MAAA;MAAA,uDAAA;AAAA,mBAAA;MAAA;IAAA,CAAA;ACOO,aAAA,0BAAmC;MACvC,UAAU;MACV,SAAS;IAAA,IAC6B,CAAA,GAAoC;AAC1E,eAAA,eAAwB;AACrB,YAAI,WAAW;AACf,cAAM,SAAS;UACZ,QAAO,GAAA,wBAAA,UAAA;UACP,eAAc,GAAA,wBAAA,UAAA;UACd,OAAM,GAAA,wBAAA,UAAA;UACN,cAAa,GAAA,wBAAA,UAAA;QAAA;AAGhB,cAAM,SAAS,QAAQ,KAAK;UACzB,YAAY,QAAQ,QAAQ,OAAO,aAAa;UAChD,WAAW,QAAQ,QAAQ,OAAO,YAAY;QAAA,CAAA;AAGjD,yBAAiB,SAAS,OAAO,OAAO,OAAO,YAAA;AAC/C,yBAAiB,QAAQ,OAAO,MAAM,OAAO,WAAA;AAE7C,eAAO;UACJ,MAAM,MAAc;AACjB,uBAAW;AACX,mBAAO,MAAM,KAAA;UAAA;UAEhB,KAAK,MAAc;AAChB,uBAAW;AACX,mBAAO,KAAK,KAAA;UAAA;UAAA,IAEX,WAAW;AACZ,mBAAO;UAAA;UAEV;QAAA;MAAA;AAIN,eAAA,iBACG,MACA,OACA,SACD;AACC,YAAI,SAAS,OAAO;AACjB;QAAA;AAGF,SAAA,SAAS,OAAO,MAAM,UAAU,MAAM,QAAQ,KAAK,MAAM,MAAM,IAAA,CAAA,GAAQ,KAAK,QAAQ,IAAA;MAAA;AAGxF,aAAO;QACJ,MAAM;QACA,OAAO,IAAO,IAAoB;AAAA,iBAAA,QAAA,MAAA,WAAA,WAA3B,OAAO,EAAE,SAAS,MAAA,GAAS;AA1D9C,gBAAA,KAAA;AA2DS,kBAAM,SAAS,aAAA;AAEf,gBAAI,aAAa;AACjB,gBAAI,aAAa,MAAM,MAAM,aAAa;AAE1C,aAAA,MAAA,QAAQ,WAAR,OAAA,SAAA,IAAgB,GAAG,QAAQ,UAAA;AAC3B,aAAA,KAAA,QAAQ,WAAR,OAAA,SAAA,GAAgB,GAAG,QAAQ,UAAA;AAC3B,oBAAQ,GAAG,SAAS,UAAA;AAEpB,oBAAQ,GAAG,SAAS,CAAC,SAAiB,OAAO,MAAM,IAAA,CAAA;AACnD,oBAAQ,GAAG,QAAQ,CAAC,SAAiB,OAAO,KAAK,IAAA,CAAA;AAEjD,gBAAI;AACD,oBAAM,OAAO;AACb,kBAAI,YAAY;AACb,sBAAM,MAAM,EAAA;cAAA;AAEf,oBAAM,OAAO,QAAA;YAAA,SACP,KAAP;AACC,oBAAM,OAAO,UAAU,GAAA;YAAA;UAAA,CAAA;QAAA;MAAA;IAAA;AA9EnC,QAAA;AAAA,QAKM;AALN,QAAA,mCAAA,MAAA;MAAA,mDAAA;AAAA,kCAA0C;AAE1C,mBAAA;AAGM,iBAAQ,GAAA,wBAAA,UAAA,EAAW;MAAA;IAAA,CAAA;ACCzB,aAAA,YAAqB,QAAoB;AACtC,aAAO,CAAC,EAAE,OAAO,YAAY,OAAO,OAAO;IAAA;AAG9C,aAAA,gBAAyB,QAAoB;AAC1C,aAAO,OAAO,OAAO,CAAC,GAAG,OAAO,QAAQ,GAAG,OAAO,MAAA,CAAA;IAAA;AAG9C,aAAA,sBACJ,YAAY,OACZ,UAAU,aACV,eAAuD,iBACxD;AACC,aAAO,CAAC,OAAmC,WAAuB;AAC/D,YAAK,CAAC,aAAa,SAAU,CAAC,QAAQ,MAAA,GAAS;AAC5C,iBAAO;QAAA;AAGV,eAAO,aAAa,MAAA;MAAA;IAAA;AAInB,aAAA,qBACJ,QAC8B;AAC9B,aAAO;QACJ,MAAM;QACN,OAAO,MAAM,SAAS;AACnB,gBAAM,QAAQ,OAAO,KAAK,OAAO;YAC9B,QAAQ,QAAQ;YAChB,QAAQ,QAAQ;YAChB,UAAU,QAAQ;UAAA,CAAA;AAGrB,cAAI,OAAO,SAAS,KAAA,GAAQ;AACzB,mBAAO,EAAE,OAAO,IAAI,SAAS,QAAW,MAAM,SAAS,OAAA,CAAA,EAAA;UAAA;AAG1D,iBAAO;YACJ;UAAA;QAAA;MAAA;IAAA;AA7CZ,QAAA,8BAAA,MAAA;MAAA,8CAAA;AAAA,uBAAA;MAAA;IAAA,CAAA;ACAA,QAGO;AAHP,QAAA,oBAAA,MAAA;MAAA,oCAAA;AACA,mBAAA;AAEO,sBAAA,MAAkB;UAAlB,cAHP;AAIW,iBAAA,UAAqD,oBAAI,IAAA;UAAA;UAE1D,IACJ,QACD;AACC,kBAAM,UAAgC,CAAA;AAEtC,oBAAQ,MAAA,EAAQ,QAAQ,CAAC,YAAW,WAAU,KAAK,QAAQ,IAAI,OAAO,SAAS,OAAA,CAAA,CAAA;AAE/E,mBAAO,MAAM;AACV,sBAAQ,QAAQ,CAAC,YAAW,KAAK,QAAQ,OAAO,OAAA,CAAA;YAAA;UAAA;UAI/C,KACJ,MACA,MACA,SACY;AACZ,gBAAI,SAAS;AACb,kBAAM,aAAa,OAAO,OAAO,OAAO,OAAO,OAAA,CAAA;AAE/C,uBAAW,UAAU,KAAK,SAAS;AAChC,kBAAI,OAAO,SAAS,MAAM;AACvB,yBAAS,OAAO,OAAO,QAAQ,UAAA;cAAA;YAAA;AAIrC,mBAAO;UAAA;QAAA;MAAA;IAAA,CAAA;AC3BN,aAAA,sBAA+B,UAAuD;AAC1F,YAAM,kBAAkB;AACxB,YAAM,kBAAkB,CAAC,YAAY,SAAS,SAAS,QAAQ,MAAA;AAE/D,YAAM,aAA6C;QAChD,MAAM;QACN,OAAO,OAAO,SAAS;AAX7B,cAAA;AAYS,cAAI,CAAC,QAAQ,SAAS,SAAS,eAAA,GAAkB;AAC9C;UAAA;AAGH,WAAA,MAAA,QAAQ,QAAQ,WAAhB,OAAA,SAAA,IAAwB,GAAG,QAAQ,CAAC,UAAkB;AACnD,kBAAM,UAAU,yCAAyC,KAAK,MAAM,SAAS,MAAA,CAAA;AAC7E,gBAAI,CAAC,SAAS;AACX;YAAA;AAGH,qBAAS;cACN,QAAQ,QAAQ;cAChB,OAAO,mBAAmB,QAAQ,CAAA,CAAA;cAClC,UAAU,SAAS,QAAQ,CAAA,CAAA;cAC3B,WAAW,SAAS,QAAQ,CAAA,CAAA;cAC5B,OAAO,SAAS,QAAQ,CAAA,CAAA;YAAA,CAAA;UAAA,CAAA;QAAA;MAAA;AAMpC,YAAM,SAAwC;QAC3C,MAAM;QACN,OAAO,MAAM,SAAS;AACnB,cAAI,CAAC,gBAAgB,SAAS,QAAQ,MAAA,GAAS;AAC5C,mBAAO;UAAA;AAGV,iBAAO,UAAU,MAAM,eAAA;QAAA;MAAA;AAI7B,aAAO,CAAC,QAAQ,UAAA;IAAA;AAGnB,aAAA,mBAA4B,OAAe;AACxC,aAAO,OAAO,MAAM,YAAA,EAAc,MAAM,KAAK,CAAA,CAAA,KAAO;IAAA;AAhDvD,QAAA,+BAAA,MAAA;MAAA,+CAAA;AACA,mBAAA;MAAA;IAAA,CAAA;ACDA,QAAA,yBAAA,MAAA;MAAA,yCAAA;MAAA;IAAA,CAAA;ACIO,aAAA,mBACJ,cACiC;AACjC,YAAM,UAAU,KAAK,cAAc,CAAC,OAAO,KAAA,CAAA;AAE3C,aAAO;QACJ,MAAM;QACN,OAAO,MAAM;AACV,iBAAO,eAAA,eAAA,CAAA,GAAK,OAAA,GAAY,IAAA;QAAA;MAAA;IAAA;AAZjC,QAAA,4BAAA,MAAA;MAAA,4CAAA;AACA,mBAAA;MAAA;IAAA,CAAA;ACIO,aAAA,cAAuB;MAC3B;MACA,SAAS;MACT,SAAS;IAAA,GAC+E;AACxF,UAAI,QAAQ,GAAG;AACZ,eAAO;UACJ,MAAM;UACN,OAAO,OAAO,SAAS;AAbhC,gBAAA,KAAA;AAcY,gBAAI;AAEJ,qBAAA,OAAgB;AACb,yBAAW,aAAa,OAAA;AACxB,wBAAU,WAAW,MAAM,KAAA;YAAA;AAG9B,qBAAA,OAAgB;AArB5B,kBAAA,KAAA;AAsBe,eAAA,MAAA,QAAQ,QAAQ,WAAhB,OAAA,SAAA,IAAwB,IAAI,QAAQ,IAAA;AACpC,eAAA,MAAA,QAAQ,QAAQ,WAAhB,OAAA,SAAA,IAAwB,IAAI,QAAQ,IAAA;AACpC,sBAAQ,QAAQ,IAAI,QAAQ,IAAA;AAC5B,sBAAQ,QAAQ,IAAI,SAAS,IAAA;AAC7B,yBAAW,aAAa,OAAA;YAAA;AAG3B,qBAAA,OAAgB;AACb,mBAAA;AACA,sBAAQ,KAAK,IAAI,eAAe,QAAW,WAAW,uBAAA,CAAA;YAAA;AAGzD,wBAAU,MAAA,QAAQ,QAAQ,WAAhB,OAAA,SAAA,IAAwB,GAAG,QAAQ,IAAA;AAC7C,wBAAU,KAAA,QAAQ,QAAQ,WAAhB,OAAA,SAAA,GAAwB,GAAG,QAAQ,IAAA;AAC7C,oBAAQ,QAAQ,GAAG,QAAQ,IAAA;AAC3B,oBAAQ,QAAQ,GAAG,SAAS,IAAA;AAE5B,iBAAA;UAAA;QAAA;MAAA;IAAA;AAvCZ,QAAA,qBAAA,MAAA;MAAA,qCAAA;AAGA,8BAAA;MAAA;IAAA,CAAA;ACHA,QAAA,eAAA,MAAA;MAAA,6BAAA;AAAA,0BAAA;AACA,4CAAA;AACA,6CAAA;AACA,yCAAA;AACA,oCAAA;AACA,0BAAA;AACA,qCAAA;AACA,+BAAA;AACA,kCAAA;AACA,2BAAA;MAAA;IAAA,CAAA;ACNO,aAAA,oBAA4D;AAChE,aAAO;QACJ,MAAM;QACN,OAAO,MAAM;AACV,gBAAM,SAAmB,CAAA;AACzB,cAAI;AACJ,mBAAA,QAAgB,MAAgB;AAC5B,aAAA,SAAS,UAAU,CAAA,GAAI,KAAK,GAAG,IAAA;UAAA;AAGnC,mBAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AACnC,kBAAM,QAAQ,KAAK,CAAA;AAEnB,gBAAI,WAAW,KAAA,GAAQ;AACpB,sBAAO,QAAQ,KAAA,CAAA;AACf;YAAA;AAGH,gBAAI,UAAU,MAAM;AACjB,sBACG,KAAK,MAAM,IAAI,CAAA,EAAG,QAAQ,CAAC,SAAU,WAAW,IAAA,KAAS,QAAQ,IAAA,KAAU,IAAA,CAAA;AAE9E;YAAA;AAGH,mBAAO,KAAK,KAAA;UAAA;AAGf,iBAAO,CAAC,SAAS,SAAS,CAAC,GAAG,QAAQ,MAAM,GAAG,OAAO,IAAI,MAAA,CAAA;QAAA;MAAA;IAAA;AA/BnE,QAAA,2BAAA,MAAA;MAAA,2CAAA;AACA,sBAAA;MAAA;IAAA,CAAA;ACqBA,aAAA,YAAqB;AAClB,cAAO,GAAA,aAAA,SAAM,YAAA;IAAA;AAWhB,aAAA,eACG,IACA,QACA,SACqB;AACrB,UAAI,CAAC,UAAU,CAAC,OAAO,MAAA,EAAQ,QAAQ,OAAO,EAAA,GAAK;AAChD,eAAO,CAAC,UACH,KACA,CAAC,YAAY,SAAS;AACnB,aAAG,SAAS,GAAG,IAAA;AACf,kBAAQ,SAAS,GAAG,IAAA;QAAA;MAAA;AAI/B,aAAO,CAAC,YAAY,SAAS;AAC1B,WAAG,MAAM,OAAA,IAAW,QAAQ,GAAG,IAAA;AAC/B,YAAI,SAAS;AACV,kBAAQ,SAAS,GAAG,IAAA;QAAA;MAAA;IAAA;AAK7B,aAAA,gBACG,MACA,eACA,EAAE,WAAW,gBAAA,GACN;AACP,UAAI,OAAO,SAAS,UAAU;AAC3B,eAAO;MAAA;AAEV,YAAM,iBAAkB,iBAAiB,cAAc,aAAc;AAErE,UAAI,eAAe,WAAW,eAAA,GAAkB;AAC7C,eAAO,eAAe,OAAO,gBAAgB,SAAS,CAAA;MAAA;AAGzD,aAAO,kBAAkB;IAAA;AAGrB,aAAA,aACJ,OACA,SACA,aACA,eAAe,UAAA,GACF;AACb,YAAM,cAAe,SAAS,IAAI,KAAA,OAAa;AAE/C,YAAM,UAA0B,CAAA;AAChC,YAAM,gBACH,OAAO,YAAY,WAAW,aAAa,OAAO,OAAA,IAAW;AAChE,YAAM,MAAM,gBAAgB,WAAW,SAAS,YAAA,GAAe,eAAe,YAAA;AAE9E,aAAO,KAAK,WAAA;AAEZ,eAAA,QAAiB,MAAc,SAAkB;AAC9C,eAAO,OACJ,SACA,aAAa,OAAO,IAAI,QAAQ,UAAU,IAAA,GAAO,SAAS,YAAA,CAAA;MAAA;AAIhE,eAAA,KAAc,OAAgB;AAC3B,cAAM,aAAc,SAAS,IAAI,KAAA,OAAa;AAC9C,cAAM,SAAS,iBAAiB,eAAe,eAAe,UAAA,KAAgB;AAC9E,cAAM,OAAO,eAAe,cAAc,GAAG,WAAA,IAAe,UAAA,IAAc,MAAA;AAE1E,eAAO,OAAO,OAAO,gBAAgB,SAAQ,MAAM;UAChD;UACA;UACA;UACA;QAAA,CAAA;MAAA;IAAA;AAxGT,QAAA;AAAA,QAAA,kBAAA,MAAA;MAAA,0BAAA;AAAA,uBAAgC,QAAA,aAAA;AAChC,mBAAA;AAWA,qBAAA,QAAM,WAAW,IAAI,CAAC,UAAe,OAAO,gBAAgB,KAAA,IAAS,MAAM,SAAS,GAAA;AACpF,qBAAA,QAAM,WAAW,IAAI,CAAC,UAAkB;AACrC,cAAI,OAAO,SAAS,KAAA,GAAQ;AACzB,mBAAO,MAAM,SAAS,MAAA;UAAA;AAEzB,iBAAO,eAAe,KAAA;QAAA;MAAA;IAAA,CAAA;ACjBzB,QAYO;AAZP,QAYO;AAZP,QAAA,2BAAA,MAAA;MAAA,2CAAA;AACA,uBAAA;AACA,wBAAA;AAUO,6BAAA,MAAwB;UAG5B,YAAoB,WAAW,eAAe;AAA1B,iBAAA,WAAA;AAFZ,iBAAA,SAAgD,oBAAI,IAAA;UAAA;UAIpD,aAAa,MAAwB;AAC1C,mBAAO,KAAK,OAAO,IAAI,IAAA;UAAA;UAGlB,eAAe,MAAwC;AAC5D,kBAAM,OAAO,mBAAkB,QAAQ,KAAK,SAAS,CAAA,CAAA;AACrD,kBAAM,SAAS,aAAa,KAAK,UAAU,IAAA;AAE3C,mBAAO;cACJ;cACA;cACA;YAAA;UAAA;UAIN,KAAK,MAAwC;AAC1C,kBAAM,WAAW,KAAK,eAAe,IAAA;AACrC,qBAAS,OAAO,2CAA2C,KAAK,QAAA;AAEhE,iBAAK,OAAO,IAAI,MAAM,QAAA;AAEtB,mBAAO;UAAA;UAGV,MAAM,KAAe;AAClB,uBAAW,CAAC,MAAM,EAAE,OAAA,CAAA,KAAa,MAAM,KAAK,KAAK,OAAO,QAAA,CAAA,GAAY;AACjE,kBAAI,SAAS,IAAI,MAAM;AACpB,uBAAO,KAAK,aAAa,GAAA;AACzB,uBACG,8FAAA;cAAA,OAEC;AACJ,uBAAO,KACJ,gFACA,IAAI,OAAA;cAAA;AAIV,mBAAK,SAAS,IAAA;YAAA;AAGjB,gBAAI,KAAK,OAAO,SAAS,GAAG;AACzB,oBAAM,IAAI,MAAM,0CAA0C,KAAK,OAAO,IAAA,EAAA;YAAA;UAAA;UAI5E,SAAS,MAAwB;AAC9B,kBAAM,WAAW,KAAK,aAAa,IAAA;AACnC,gBAAI,UAAU;AACX,mBAAK,OAAO,OAAO,IAAA;YAAA;UAAA;UAIzB,QAAQ,MAAwC;AAC7C,kBAAM,WAAW,KAAK,aAAa,IAAA;AACnC,gBAAI,CAAC,UAAU;AACZ,oBAAM,IAAI,SAAS,QAAW,uDAAA;YAAA;AAEjC,qBAAS,OAAO,eAAA;AAEhB,mBAAO;UAAA;UAAA,OAGH,QAAQ,OAAO,SAAS;AAC5B,mBAAO,QAAQ,IAAA,IAAQ,EAAE,mBAAkB,OAAA;UAAA;QAAA;AArE1C,4BAAA;AAAA,0BAwEW,UAAU;MAAA;IAAA,CAAA;ACuL5B,aAAA,cAA0B,MAAwB,UAAoB;AACnE,aAAO;QACJ,QAAQ,MAAM,KAAK,QAAA,KAAa;QAChC;MAAA;IAAA;AAIN,aAAA,gBAAyB,QAAkB,QAAsB;AAC9D,aAAO,CAAC,QAAe;AACpB,eAAO,sCAAsC,GAAA;AAC7C,eAAO,KAAK,OAAO,KAAK,OAAO,IAAI,KAAA,GAAQ,OAAA,CAAA;MAAA;IAAA;AAIjD,aAAA,eACG,QACA,MACA,QACA,QACD;AACC,aAAO,CAAC,WAAmB;AACxB,eAAO,wBAAwB,MAAM,MAAA;AACrC,eAAO,MAAM,MAAA;AACb,eAAO,KAAK,MAAA;MAAA;IAAA;AAlSlB,QAAA;AAAA,QAiBO;AAjBP,QAAA,0BAAA,MAAA;MAAA,0CAAA;AAAA,+BAAoC,QAAA,eAAA;AACpC,uBAAA;AAGA,kBAAA;AASA,mBAAA;AAEA,iCAAA;AAEO,2BAAA,MAAoD;UAyBxD,YACW,WACA,YACA,UACT;AAHS,iBAAA,YAAA;AACA,iBAAA,aAAA;AACA,iBAAA,WAAA;AA3BH,iBAAA,SAAuB,QAAQ,QAAA;AAC/B,iBAAA,SAAS,IAAI,kBAAA;UAAA;UAAA,IAGV,SAAS;AACjB,mBAAO,KAAK,UAAU;UAAA;UAAA,IAGd,MAAM;AACd,mBAAO,KAAK,QAAQ,KAAK,UAAU;UAAA;UAAA,IAG3B,IAAI,KAAa;AACzB,iBAAK,OAAO;UAAA;UAAA,IAGJ,MAAM;AACd,mBAAO,KAAK,UAAU;UAAA;UAAA,IAGd,gBAAgB;AACxB,mBAAO,KAAK,UAAU;UAAA;UASlB,QAAQ;AACZ,mBAAO;UAAA;UAGH,KAAQ,MAAoC;AAChD,iBAAK,OAAO,KAAK,IAAA;AAEjB,mBAAQ,KAAK,SAAS,KAAK,OAAO,KAAK,MAAM,KAAK,YAAY,IAAA,CAAA;UAAA;UAGnD,YAAe,MAA2C;AAAA,mBAAA,QAAA,MAAA,MAAA,aAAA;AACrE,oBAAM,qBAAqB,MAAM,KAAK,WAAW,KAAA;AACjD,oBAAM,kBAAkB,MAAM,KAAK,OAAO,SAAS,IAAA;AAEnD,kBAAI;AACD,sBAAM,EAAE,OAAA,IAAW,KAAK,OAAO,QAAQ,IAAA;AACvC,uBAAQ,MAAO,YAAY,IAAA,IACtB,KAAK,iBAAiB,MAAM,MAAA,IAC5B,KAAK,kBAAkB,MAAM,MAAA;cAAA,SAC5B,GAAP;AACC,sBAAM,KAAK,iBAAiB,MAAM,CAAA;cAAA,UAAA;AAElC,gCAAA;AACA,mCAAA;cAAA;YAAA,CAAA;UAAA;UAIE,iBAAoB,MAAwB,GAAU;AAC3D,kBAAM,WACH,aAAa,WAAW,OAAO,OAAO,GAAG,EAAE,KAAA,CAAA,IAAU,IAAI,SAAS,MAAM,KAAK,OAAO,CAAA,CAAA;AAEvF,iBAAK,SAAS,QAAQ,QAAA;AACtB,iBAAK,OAAO,MAAM,QAAA;AAElB,mBAAO;UAAA;UAGI,kBAAqB,MAAuB,QAAsB;AAAA,mBAAA,QAAA,MAAA,MAAA,aAAA;AAC7E,oBAAM,OAAO,KAAK,SAAS,KACxB,cACA,CAAC,GAAG,KAAK,QAAA,GACT,cAAc,MAAM,KAAK,QAAA,CAAA;AAG5B,oBAAM,MAAM,MAAM,KAAK,YACpB,MACA,KAAK,QACL,MACA,KAAK,eACL,OAAO,KAAK,OAAA,CAAA;AAEf,oBAAM,gBAAgB,MAAM,KAAK,eAAe,MAAM,MAAM,KAAK,OAAO,KAAK,QAAA,CAAA;AAE7E,qBAAO,6CAA6C,KAAK,MAAA;AAEzD,kBAAI,aAAa,IAAA,GAAO;AACrB,uBAAO,eAAe,KAAK,QAAQ,aAAA;cAAA;AAGtC,qBAAO,eAAe,KAAK,QAAQ,cAAc,UAAA,CAAA;YAAA,CAAA;UAAA;UAGtC,iBAAiB,MAAiB,QAAsB;AAAA,mBAAA,QAAA,MAAA,MAAA,aAAA;AACnE,qBAAO,6DAAA;AACP,qBAAO,KAAK,OAAO,IAAA;YAAA,CAAA;UAAA;UAGd,eACL,MACA,MACA,QACA,QAC0B;AAC1B,kBAAM,EAAE,UAAU,WAAW,QAAQ,OAAA,IAAW;AAEhD,mBAAO,IAAI,QAAQ,CAAC,MAAM,SAAS;AAChC,qBAAO,4DAA4D,QAAA;AAEnE,oBAAM,EAAE,MAAA,IAAU,KAAK,SAAS,KAC7B,cACA,EAAE,OAAO,UAAA,GACT,eAAA,eAAA,CAAA,GACM,cAAc,MAAM,IAAA,CAAA,GACpB,MAAA,CAAA;AAIT,kBAAI,SAAS,KAAK,SAAS;AACxB,uBAAO,KAAK,gDAAA;AAEZ,uBAAO,KAAK,QACT,QACA,OACA,CAAC,cAAc;AACZ,yBAAO,KAAK,yCAAA;AACZ,yBAAO,8BAA8B,eAAe,SAAA,CAAA;AAEpD,uBACG,IAAI,iBACD,MAAM,QAAQ,SAAA,IAAa,OAAO,OAAO,SAAA,IAAa,WACtD,OAAO,OAAO,MAAA,CAAA,CAAA;gBAAA,GAIvB,IAAA;cAAA;AAIN,kBAAI,OAAO;AACR,uBAAO,KACJ,yDACA,UACA,OAAO,QACP,SAAA;AAEH,uBAAO,KAAK,KAAA;cAAA;AAGf,qBAAO,KAAK,iCAAA;AACZ,mBAAK,IAAI,iBAAiB,OAAO,OAAO,MAAA,GAAS,OAAO,OAAO,MAAA,CAAA,CAAA;YAAA,CAAA;UAAA;UAIvD,YACX,MACA,SACA,MACA,eACA,QAC2B;AAAA,mBAAA,QAAA,MAAA,MAAA,aAAA;AAC3B,oBAAM,eAAe,OAAO,QAAQ,QAAA;AACpC,oBAAM,eAA6B,KAAK,SAAS,KAC9C,iBACA;gBACG,KAAK,KAAK;gBACV,KAAK,KAAK;gBACV,aAAa;cAAA,GAEhB,cAAc,MAAM,KAAK,QAAA,CAAA;AAG5B,qBAAO,IAAI,QAAQ,CAAC,SAAS;AAC1B,sBAAM,SAAmB,CAAA;AACzB,sBAAM,SAAmB,CAAA;AAEzB,uBAAO,KAAK,SAAS,SAAS,IAAA;AAC9B,uBAAO,MAAM,YAAA;AAEb,oBAAI,YAAY,KAAK,aAAa,MAAM,IAAA;AACxC,oBAAI,WAAW;AACZ,yBAAO,KAAK;oBACT;oBACA;oBACA,UAAU;oBACV;kBAAA,CAAA;gBAAA;AAIN,qBAAK,SAAS,KAAK,gBAAgB,QAAW,cAAA,eAAA,CAAA,GACxC,cAAc,MAAM,IAAA,CAAA,GADoB;kBAE3C,KAAK,QAAQ;AACV,gCAAY,UAAU;kBAAA;gBAAA,CAAA,CAAA;AAI5B,sBAAM,WAAU,GAAA,qBAAA,OAAM,SAAS,MAAM,YAAA;AAErC,wBAAQ,OAAQ,GACb,QACA,eAAe,QAAQ,UAAU,QAAQ,aAAa,KAAK,QAAA,CAAA,CAAA;AAE9D,wBAAQ,OAAQ,GACb,QACA,eAAe,QAAQ,UAAU,QAAQ,aAAa,KAAK,QAAA,CAAA,CAAA;AAG9D,wBAAQ,GAAG,SAAS,gBAAgB,QAAQ,MAAA,CAAA;AAE5C,oBAAI,eAAe;AAChB,yBAAO,6DAAA;AACP,gCAAc,SAAS,QAAQ,QAAS,QAAQ,QAAS,CAAC,GAAG,IAAA,CAAA;gBAAA;AAGhE,qBAAK,SAAS,KAAK,eAAe,QAAW,cAAA,eAAA,CAAA,GACvC,cAAc,MAAM,IAAA,CAAA,GADmB;kBAE1C;kBACA,MAAM,UAAkB,QAAgB;AACrC,yBAAK;sBACF;sBACA;sBACA;sBACA,WAAW,aAAa;oBAAA,CAAA;kBAAA;kBAG9B,KAAK,QAAe;AACjB,wBAAI,QAAQ,QAAQ;AACjB;oBAAA;AAGH,gCAAY;AACZ,4BAAQ,KAAK,QAAA;kBAAA;gBAAA,CAAA,CAAA;cAAA,CAAA;YAAA,CAAA;UAAA;UAMjB,aAAgB,MAAwB,MAAgB;AAC7D,gBAAI;AACJ,iBAAK,SAAS,KAAK,gBAAgB,QAAW,cAAA,eAAA,CAAA,GACxC,cAAc,MAAM,IAAA,CAAA,GADoB;cAE3C,KAAK,QAAQ;AACV,4BAAY,UAAU;cAAA;YAAA,CAAA,CAAA;AAI5B,mBAAO;UAAA;QAAA;MAAA;IAAA,CAAA;ACvQb,QAAA,uBAAA,CAAA;AAAA,aAAA,sBAAA;MAAA,aAAA,MAAA;IAAA,CAAA;AAAA,QAMO;AANP,QAAA,oBAAA,MAAA;MAAA,oCAAA;AAGA,gCAAA;AAGO,sBAAA,MAA+C;UAMnD,YACU,SAAiB,OACjB,KACC,YACA,UACT;AAJQ,iBAAA,SAAA;AACA,iBAAA,MAAA;AACC,iBAAA,aAAA;AACA,iBAAA,WAAA;AATH,iBAAA,SAAS,IAAI,iBAAiB,MAAM,KAAK,YAAY,KAAK,QAAA;UAAA;UAYlE,QAA2B;AACxB,mBAAO,IAAI,iBAAiB,MAAM,KAAK,YAAY,KAAK,QAAA;UAAA;UAG3D,KAAQ,MAAoC;AACzC,mBAAO,KAAK,OAAO,KAAK,IAAA;UAAA;QAAA;MAAA;IAAA,CAAA;ACnBvB,aAAA,aACJ,MACA,UACA,WAAqC,MACtC;AACC,YAAM,YAAY,CAAC,SAAY;AAC5B,iBAAS,MAAM,IAAA;MAAA;AAGlB,YAAM,WAAU,CAAC,QAAqC;AACnD,aAAI,OAAA,OAAA,SAAA,IAAK,UAAS,MAAM;AACrB,mBACG,eAAe,mBAAmB,4BAA4B,GAAA,IAAO,KACrE,MAAA;QAAA;MAAA;AAKT,eAAS,KAAK,WAAW,QAAA;IAAA;AAG5B,aAAA,4BAAqC,KAAuB;AACzD,UAAI,MAAM,CAAC,SAAiB;AACzB,gBAAQ,KACL,6DAA6D,IAAA,mCAAuC,IAAA,iDAAA;AAEvG,cAAM;MAAA;AAGT,aAAO,OAAO,OAAO,KAAK,OAAO,oBAAoB,IAAI,GAAA,EAAK,OAAO,mBAAmB,CAAA,CAAA,CAAA;AAExF,eAAA,kBAA2B,KAA4B,MAA0B;AAC9E,YAAI,QAAQ,KAAK;AACd,iBAAO;QAAA;AAGV,YAAI,IAAA,IAAQ;UACT,YAAY;UACZ,cAAc;UACd,MAAM;AACH,gBAAI,IAAA;AACJ,mBAAO,IAAI,IAAI,IAAA;UAAA;QAAA;AAIrB,eAAO;MAAA;IAAA;AAlDb,QAAA,qBAAA,MAAA;MAAA,6BAAA;AACA,gCAAA;AAEA,mBAAA;MAAA;IAAA,CAAA;ACCO,aAAA,2BAAoC,WAAmB,MAA0B;AACrF,aAAO,cAAc,CAAC,aAAgC;AACnD,YAAI,CAAC,aAAa,SAAA,GAAY;AAC3B,gBAAM,IAAI,MAAM,4CAA4C,SAAA,GAAA;QAAA;AAG/D,gBAAS,QAAQ,UAAU,MAAM;MAAA,CAAA;IAAA;AAVvC,QAAA,gCAAA,MAAA;MAAA,8CAAA;AAAA,mBAAA;AAEA,kBAAA;MAAA;IAAA,CAAA;ACGA,aAAA,aAAsB,MAAgB;AACnC,YAAM,WAAW,CAAC,YAAY,GAAG,IAAA;AACjC,UAAI,SAAS,CAAA,MAAO,QAAQ,SAAS,SAAS,IAAA,GAAO;AAClD,iBAAS,CAAA,IAAK,OAAO,UAAU,IAAA;MAAA;AAGlC,aAAO,0BAA0B,QAAA;IAAA;AAGrB,aAAA,mBAAoF;AAChG,aAAO;QACJ,WAA6B;AAC1B,iBAAO,KAAK,SACT,aAAa,mBAAmB,WAAW,CAAA,CAAA,GAC3C,yBAAyB,SAAA,CAAA;QAAA;QAI/B,eAAmC,YAAY,YAAY;AACxD,iBAAO,KAAK,SACT,aAAa,CAAC,MAAM,YAAY,YAAY,GAAG,mBAAmB,SAAA,CAAA,CAAA,GAClE,yBAAyB,SAAA,CAAA;QAAA;QAI/B,oBAAwC,YAAY;AACjD,iBAAO,KAAK,SACT,aAAa,CAAC,MAAM,YAAY,GAAG,mBAAmB,SAAA,CAAA,CAAA,GACtD,yBAAyB,SAAA,CAAA;QAAA;MAAA;IAAA;AAjCrC,QAAA,gBAAA,MAAA;MAAA,8BAAA;AAEA,mBAAA;AACA,kBAAA;MAAA;IAAA,CAAA;ACyCO,aAAA,kBAA2B,QAA8B;AAC7D,YAAM,SAAuB;QAC1B,QAAQ;QACR,QAAQ;QACR,QAAQ;QACR,MAAM;QACN,SAAS;UACN,SAAS;UACT,YAAY;UACZ,WAAW;QAAA;MAAA;AAGjB,aAAO,oBAAoB,QAAQ,SAAS,MAAA;IAAA;AAxD/C,QAGM;AAHN,QAAA,oBAAA,MAAA;MAAA,oCAAA;AACA,mBAAA;AAEM,kBAAsC;UACzC,IAAI,WAAW,qCAAqC,CAAC,QAAQ,CAAC,QAAQ,MAAM,MAAA,MAAY;AACrF,mBAAO,SAAS;AAChB,mBAAO,SAAS;AAChB,mBAAO,OAAO,CAAC,CAAC;UAAA,CAAA;UAEnB,IAAI,WAAW,qBAAqB,CAAC,QAAQ,CAAC,MAAA,MAAY;AACvD,kBAAM,QAAQ,OAAO,MAAM,GAAA;AAC3B,kBAAM,QAAQ,MAAM,IAAA;AAEpB,gBAAI,CAAC,SAAS,CAAC,MAAM,SAAS,GAAA,GAAM;AACjC;YAAA;AAGH,mBAAO,SAAS;cACb,OAAO,MAAM,OAAO,GAAG,MAAM,SAAS,CAAA;cACtC,MAAM,MAAM,KAAK,GAAA,EAAK,KAAA;YAAA;UAAA,CAAA;UAG5B,IAAI,WACD,8CACA,CAAC,QAAQ,CAAC,SAAS,YAAY,SAAA,MAAe;AAC3C,mBAAO,QAAQ,UAAU,SAAS,SAAS,EAAA,KAAO;AAClD,mBAAO,QAAQ,aAAa,SAAS,YAAY,EAAA,KAAO;AACxD,mBAAO,QAAQ,YAAY,SAAS,WAAW,EAAA,KAAO;UAAA,CAAA;UAG5D,IAAI,WACD,0CACA,CAAC,QAAQ,CAAC,SAAS,OAAO,SAAA,MAAe;AACtC,mBAAO,QAAQ,UAAU,SAAS,SAAS,EAAA,KAAO;AAClD,kBAAM,QAAQ,SAAS,OAAO,EAAA,KAAO;AACrC,gBAAI,cAAc,KAAK;AACpB,qBAAO,QAAQ,YAAY;YAAA,WACnB,cAAc,KAAK;AAC3B,qBAAO,QAAQ,aAAa;YAAA;UAAA,CAAA;QAAA;MAAA;IAAA,CAAA;ACvBjC,aAAA,WACJ,SACA,OACA,YACyB;AACzB,YAAM,WAAqB;QACxB;QACA;QACA;QACA,GAAG,cAAc,SAAS,IAAA;QAC1B,GAAG;QACH,GAAG;MAAA;AAGN,aAAO;QACJ;QACA,QAAQ;QACR,QAAQ;MAAA;IAAA;AAIC,aAAA,iBAAuC;AACnD,aAAO;QACJ,OAA2B,YAA+B,MAAiB;AACxE,gBAAM,OAAO,yBAAyB,SAAA;AACtC,gBAAM,OACH,2BAA2B,OAAA,KAC3B,WACG,QAAQ,OAAA,GACR,QAAQ,WAAW,KAAK,CAAA,GAAI,2BAA2B,CAAA,CAAA,CAAA,GACvD,CAAC,GAAG,WAAW,KAAK,CAAA,GAAI,aAAa,CAAA,CAAA,GAAK,GAAG,mBAAmB,WAAW,GAAG,IAAA,CAAA,CAAA;AAGpF,iBAAO,KAAK,SAAS,MAAM,IAAA;QAAA;MAAA;AAIjC,eAAA,2BAAoC,SAAmB;AACpD,eACG,CAAC,0BAA0B,OAAA,KAC3B,uBACG,6EAAA;MAAA;IAAA;AAxDZ,QAAA,cAAA,MAAA;MAAA,4BAAA;AAGA,0BAAA;AACA,mBAAA;AASA,kBAAA;MAAA;IAAA,CAAA;ACPO,aAAA,eAAwB,UAAkB,OAAoC;AAClF,YAAM,WAAW,CAAC,eAAe,QAAA;AACjC,UAAI,OAAO;AACR,iBAAS,KAAK,IAAA;MAAA;AAGjB,aAAO,0BAA0B,UAAU,IAAA;IAAA;AAZ9C,QAAA,mBAAA,MAAA;MAAA,iCAAA;AAAA,kBAAA;MAAA;IAAA,CAAA;ACcO,aAAA,UAAmB,MAAe,MAAc,MAAc;AAClE,YAAM,WAAW,OAAO,IAAA,EAAM,KAAA;AAC9B,UAAI;AAEJ,UAAK,SAAS,kBAAkB,KAAK,QAAA,GAAY;AAC9C,eAAO,IAAI,YAAY,MAAM,MAAM,OAAO,OAAO,CAAA,CAAA;MAAA;AAGpD,UAAK,SAAS,oBAAoB,KAAK,QAAA,GAAY;AAChD,eAAO,IAAI,YAAY,MAAM,MAAM,MAAM,OAAO,CAAA,CAAA;MAAA;AAGnD,UAAI,SAAS;AACb,YAAM,SAAS,SAAS,MAAM,GAAA;AAC9B,aAAO,OAAO,QAAQ;AACnB,cAAM,QAAQ,OAAO,MAAA;AACrB,YAAI,UAAU,MAAM;AACjB,mBAAS,OAAO,KAAK,GAAA;AACrB;QAAA;MAAA;AAIN,aAAO,IAAI,YAAY,MAAM,MAAM,OAAO,KAAK,QAAA,GAAW,MAAA;IAAA;AApC7D,QAEO;AAFP,QAWM;AAXN,QAYM;AAZN,QAAA,mBAAA,MAAA;MAAA,qCAAA;AAEO,sBAAA,MAAwC;UAC5C,YACmB,MACA,MACA,UACA,QACjB;AAJiB,iBAAA,OAAA;AACA,iBAAA,OAAA;AACA,iBAAA,WAAA;AACA,iBAAA,SAAA;UAAA;QAAA;AAIhB,4BAAoB;AACpB,8BAAsB;MAAA;IAAA,CAAA;ACN5B,aAAA,eAAwB,SAAmB;AACxC,aAAO,QAAQ,SAAS,WAAA;IAAA;AAGpB,aAAA,SAAkB,OAAO,OAAO,MAAc,YAA8C;AAChG,YAAM,WAAW,CAAC,QAAQ,GAAG,UAAA;AAC7B,UAAI,QAAQ,CAAC,eAAe,QAAA,GAAW;AACpC,iBAAS,OAAO,GAAG,GAAG,WAAA;MAAA;AAGzB,aAAO;QACJ;QACA,QAAQ;QACR,OAAO,MAA0B;AAC9B,iBAAO,UAAU,SAAS,SAAS,QAAA,GAAW,MAAM,IAAA;QAAA;MAAA;IAAA;AApB7D,QAIM;AAJN,QAAA,YAAA,MAAA;MAAA,0BAAA;AACA,yBAAA;AAGM,sBAAc;MAAA;IAAA,CAAA;ACMb,aAAA,qBAA8B,YAAsB;AACxD,eAAS,IAAI,GAAG,IAAI,WAAW,QAAQ,KAAK;AACzC,cAAM,SAAS,eAAe,KAAK,WAAW,CAAA,CAAA;AAC9C,YAAI,QAAQ;AACT,iBAAO,KAAK,OAAO,CAAA,CAAA;QAAA;MAAA;AAIzB,aAAO;IAAA;AAGH,aAAA,YAAqB,WAA6B;AACtD,aAAO,eAAe,KAAK,SAAA;IAAA;AAtB9B,QAQM;AARN,QAAA,kBAAA,MAAA;MAAA,+BAAA;AAQM,yBAAiB;MAAA;IAAA,CAAA;ACRvB,QAKO;AALP,QAAA,mBAAA,MAAA;MAAA,qCAAA;AAKO,sBAAA,MAAwC;UAAxC,cALP;AAMG,iBAAA,UAAU;AACV,iBAAA,YAAY;AACZ,iBAAA,aAAa;AAEb,iBAAA,QAA0D,CAAA;UAAA;QAAA;MAAA;IAAA,CAAA;ACkGtD,aAAA,cAAuB,SAAS,IAAgB;AACpD,YAAM,UAAS,mBAAmB,MAAA;AAElC,aAAO,CAAC,WAAmB,oBAAoB,IAAI,YAAA,GAAe,SAAQ,QAAQ,KAAA;IAAA;AA/GrF,QAKM;AALN,QA0CM;AA1CN,QA0EM;AA1EN,QAuFM;AAvFN,QAoGM;AApGN,QAAA,0BAAA,MAAA;MAAA,0CAAA;AACA,wBAAA;AACA,yBAAA;AACA,mBAAA;AAEM,qBAAa;UAChB,IAAI,WACD,kCACA,CAAC,QAAQ,CAAC,MAAM,SAAS,cAAc,EAAA,MAAQ;AAC5C,mBAAO,MAAM,KAAK;cACf,MAAM,KAAK,KAAA;cACX,SAAS,SAAS,OAAA;cAClB,YAAY,YAAY,QAAQ,SAAS,EAAA,EAAI;cAC7C,WAAW,YAAY,QAAQ,SAAS,EAAA,EAAI;cAC5C,QAAQ;YAAA,CAAA;UAAA,CAAA;UAIjB,IAAI,WACD,iDACA,CAAC,QAAQ,CAAC,MAAM,QAAQ,KAAA,MAAW;AAChC,mBAAO,MAAM,KAAK;cACf,MAAM,KAAK,KAAA;cACX,QAAQ,SAAS,MAAA;cACjB,OAAO,SAAS,KAAA;cAChB,QAAQ;YAAA,CAAA;UAAA,CAAA;UAIjB,IAAI,WACD,iDACA,CAAC,QAAQ,CAAC,SAAS,OAAA,MAAa;AAC7B,kBAAM,WAAW,UAAU,KAAK,OAAA;AAChC,kBAAM,UAAU,UAAU,KAAK,OAAA;AAE/B,mBAAO,UAAU,SAAS,OAAA;AAC1B,mBAAO,aAAa,SAAS,YAAA,OAAA,SAAA,SAAW,CAAA,CAAA;AACxC,mBAAO,YAAY,SAAS,WAAA,OAAA,SAAA,QAAU,CAAA,CAAA;UAAA,CAAA;QAAA;AAKzC,wBAAgB;UACnB,IAAI,WACD,uBACA,CAAC,QAAQ,CAAC,eAAe,eAAe,IAAA,MAAU;AAC/C,kBAAM,aAAa,SAAS,aAAA;AAC5B,kBAAM,YAAY,SAAS,aAAA;AAE3B,mBAAO;AACP,mBAAO,cAAc;AACrB,mBAAO,aAAa;AAEpB,mBAAO,MAAM,KAAK;cACf;cACA,SAAS,aAAa;cACtB;cACA;cACA,QAAQ;YAAA,CAAA;UAAA,CAAA;UAIjB,IAAI,WAAuB,eAAe,CAAC,QAAQ,CAAC,IAAA,MAAU;AAC3D,mBAAO;AAEP,mBAAO,MAAM,KAAK;cACf;cACA,OAAO;cACP,QAAQ;cACR,QAAQ;YAAA,CAAA;UAAA,CAAA;QAAA;AAKX,yBAAiB;UACpB,IAAI,WAAuB,SAAS,CAAC,QAAQ,CAAC,IAAA,MAAU;AACrD,mBAAO;AACP,mBAAO,MAAM,KAAK;cACf;cACA,SAAS;cACT,YAAY;cACZ,WAAW;cACX,QAAQ;YAAA,CAAA;UAAA,CAAA;QAAA;AAKX,2BAAmB;UACtB,IAAI,WAAuB,yBAAyB,CAAC,QAAQ,CAAC,SAAS,IAAA,MAAU;AAC9E,mBAAO;AACP,mBAAO,MAAM,KAAK;cACf;cACA,SAAS;cACT,YAAY;cACZ,WAAW;cACX,QAAQ;YAAA,CAAA;UAAA,CAAA;QAAA;AAKX,6BAAkE;UAAA;YACpE;;UAAA,GAAiB;UAAA;YACjB;;UAAA,GAAiB;UAAA;YACjB;;UAAA,GAAqB;UAAA;YACrB;;UAAA,GAAwB;UAAA;YACxB;;UAAA,GAAsB;QAAA;MAAA;IAAA,CAAA;AC5F1B,aAAA,YAAqB,QAAkB,QAAuB;AAC3D,aAAO,OAAO,OACX,CAAC,MAAM,OAAO,UAAU;AACrB,aAAK,KAAA,IAAS,OAAO,KAAA,KAAU;AAC/B,eAAO;MAAA,GAEV,uBAAO,OAAO,EAAE,MAAM,KAAA,CAAA,CAAA;IAAA;AAIrB,aAAA,2BACJ,WAAW,UACX,SAAS,mBACT,YAAY,IACb;AACC,YAAM,kBAAkB,cAAc,SAAA;AAEtC,aAAO,SAAU,QAA8B;AAC5C,cAAM,MAAsC,mBACzC,QACA,MACA,cAAA,EACD,IAAI,SAAU,MAAM;AACnB,gBAAM,aAAa,KAAK,KAAA,EAAO,MAAM,eAAA;AACrC,gBAAM,cAA+B,YAClC,WAAW,CAAA,EAAG,KAAA,EAAO,MAAM,QAAA,GAC3B,MAAA;AAGH,cAAI,WAAW,SAAS,KAAK,CAAC,CAAC,WAAW,CAAA,EAAG,KAAA,GAAQ;AAClD,wBAAY,OAAO,gBAAgB,WAAW,CAAA,CAAA;UAAA;AAGjD,iBAAO;QAAA,CAAA;AAGV,eAAO;UACJ;UACA,QAAS,IAAI,UAAU,IAAI,CAAA,KAAO;UAClC,OAAO,IAAI;QAAA;MAAA;IAAA;AApDpB,QAKa;AALb,QAOa;AAPb,QASa;AATb,QAWM;AAXN,QAAA,8BAAA,MAAA;MAAA,8CAAA;AACA,mBAAA;AACA,gCAAA;AACA,wBAAA;AAEa,yBAAiB;AAEjB,0BAAkB;AAElB,mBAAW;AAElB,4BAAoB,CAAC,QAAQ,QAAQ,WAAW,QAAQ,eAAe,cAAA;MAAA;IAAA,CAAA;ACX7E,QAAA,eAAA,CAAA;AAAA,aAAA,cAAA;MAAA,iBAAA,MAAA;MAAA,yBAAA,MAAA;IAAA,CAAA;AAMO,aAAA,gBAAyB,YAA0D;AACvF,UAAI,YAAY,qBAAqB,UAAA;AAErC,YAAM,WAAW,CAAC,MAAA;AAElB,UAAI,cAAc,IAAgB;AAC/B,oBAAY;AACZ,iBAAS,KAAK,aAAA;MAAA;AAGjB,eAAS,KAAK,GAAG,UAAA;AAEjB,aACG,wBAAwB,QAAA,KAAa;QAClC;QACA,QAAQ;QACR,QAAQ,cAAc,SAAA;MAAA;IAAA;AAKxB,aAAA,wBAAiC,YAAyC;AAC9E,YAAM,QAAQ,WAAW,OAAO,WAAA;AAEhC,UAAI,MAAM,SAAS,GAAG;AACnB,eAAO,uBACJ,sDAAsD,MAAM,KAAK,GAAA,CAAA,EAAA;MAAA;AAIvE,UAAI,MAAM,UAAU,WAAW,SAAS,IAAA,GAAO;AAC5C,eAAO,uBACJ,gBAAgB,KAAA,8DAAA;MAAA;IAAA;AAtCzB,QAAA,YAAA,MAAA;MAAA,0BAAA;AAEA,wBAAA;AACA,gCAAA;AACA,kBAAA;MAAA;IAAA,CAAA;ACgEA,aAAA,aACG,QACA,UACmB;AACnB,YAAM,SAAmB,CAAA;AACzB,YAAM,YAAsB,CAAA;AAE5B,aAAO,KAAK,MAAA,EAAQ,QAAQ,CAAC,UAAU;AACpC,eAAO,KAAK,KAAA;AACZ,kBAAU,KAAK,OAAO,OAAO,KAAA,CAAA,CAAA;MAAA,CAAA;AAGhC,aAAO,CAAC,QAAQ,UAAU,KAAK,QAAA,CAAA;IAAA;AAGlC,aAAA,YAAwC,OAAmB;AACxD,aAAO,OAAO,KAAK,KAAA,EAAO,OAAO,CAAC,KAAK,QAAQ;AAC5C,YAAI,EAAE,OAAO,iBAAiB;AAC3B,cAAI,GAAA,IAAO,MAAM,GAAA;QAAA;AAEpB,eAAO;MAAA,GACP,CAAA,CAAA;IAAA;AAGC,aAAA,gBACJ,MAA+B,CAAA,GAC/B,aAAuB,CAAA,GACN;AACjB,YAAM,WAAW,WAAW,IAAI,UAAU,cAAc,QAAA;AACxD,YAAM,SACH,CAAC,iBAAiB,IAAI,MAAA,KAAW,IAAI,SAChC,IAAI,SACJ;QACG,MAAM;QACN,MAAM,IAAI,eAAe,QAAQ,QAAQ;QACzC,SAAS;QACT,MAAM;QACN,MAAM,IAAI,YAAY,OAAO;QAC7B,aAAa,IAAI,YAAY,QAAQ,QAAQ;QAC7C,cAAc,IAAI,YAAY,QAAQ,QAAQ;MAAA;AAGzD,YAAM,CAAC,QAAQ,SAAA,IAAa,aAAa,QAAQ,QAAA;AAEjD,YAAM,SAAmB,CAAA;AACzB,YAAM,UAAoB;QACvB,mBAAmB,cAAA,GAAiB,SAAA,GAAY,eAAA;QAChD,GAAG;MAAA;AAGN,YAAM,WAAgC,IAAY,KAAM,IAAY,WAAA,KAAgB,IAAI;AACxF,UAAI,UAAU;AACX,gBAAQ,KAAK,eAAe,QAAA,EAAA;MAAA;AAG/B,UAAI,IAAI,QAAQ,IAAI,IAAI;AACrB,cAAM,gBAAgB,IAAI,cAAc,QAAQ,QAAQ;AACxD,eAAO,KAAK,GAAG,IAAI,QAAQ,EAAA,GAAK,aAAA,GAAgB,IAAI,MAAM,EAAA,EAAA;MAAA;AAG7D,UAAI,aAAa,IAAI,IAAA,GAAO;AACzB,gBAAQ,KAAK,YAAY,SAAS,IAAI,IAAA,CAAA;MAAA;AAGzC,wBAAkB,YAAY,GAAA,GAAiB,OAAA;AAE/C,aAAO;QACJ;QACA;QACA,UAAU,CAAC,GAAG,SAAS,GAAG,MAAA;MAAA;IAAA;AAIzB,aAAA,QACJ,UACA,QACA,YACyB;AACzB,YAAM,UAAS,2BAA2B,UAAU,QAAQ,qBAAqB,UAAA,CAAA;AAEjF,aAAO;QACJ,UAAU,CAAC,OAAO,GAAG,UAAA;QACrB,QAAQ;QACR,QAAA;MAAA;IAAA;AAIS,aAAA,cAAoC;AAChD,aAAO;QACJ,OAA8C,MAAiB;AAC5D,gBAAM,OAAO,yBAAyB,SAAA;AACtC,gBAAM,UAAU,gBACb,wBAAwB,SAAA,GACxB,WAAW,UAAU,CAAA,GAAI,WAAA,CAAA;AAE5B,gBAAM,OACH,2BAA2B,GAAG,IAAA,KAC9B,wBAAwB,QAAQ,QAAA,KAChC,cAAc,OAAA;AAEjB,iBAAO,KAAK,SAAS,MAAM,IAAA;QAAA;MAAA;AAIjC,eAAA,cAAuB,SAA2B;AAC/C,eAAO,QAAQ,QAAQ,UAAU,QAAQ,QAAQ,QAAQ,QAAA;MAAA;AAG5D,eAAA,2BAAoC,MAAgB,IAAc;AAC/D,eACG,aAAa,IAAA,KACb,aAAa,EAAA,KACb,uBACG,uFAAA;MAAA;IAAA;AArLZ,QAuBK;AAvBL,QAAA,WAAA,MAAA;MAAA,yBAAA;AAEA,wBAAA;AACA,sBAAA;AACA,oCAAA;AAMA,mBAAA;AAUA,kBAAA;AACA,kBAAA;AAEK,yBAAL,kBAAK,oBAAL;AACG,0BAAA,gBAAA,UAAA,IAAA,CAAA,IAAA;AACA,0BAAA,gBAAA,WAAA,IAAA,CAAA,IAAA;AACA,0BAAA,gBAAA,UAAA,IAAA,CAAA,IAAA;AACA,0BAAA,gBAAA,GAAA,IAAA,CAAA,IAAA;AACA,0BAAA,gBAAA,MAAA,IAAA,CAAA,IAAA;AACA,0BAAA,gBAAA,QAAA,IAAA,CAAA,IAAA;AACA,0BAAA,gBAAA,MAAA,IAAA,CAAA,IAAA;AACA,0BAAA,gBAAA,IAAA,IAAA,CAAA,IAAA;AACA,0BAAA,gBAAA,UAAA,IAAA,CAAA,IAAA;AACA,0BAAA,gBAAA,WAAA,IAAA,CAAA,IAAA;AACA,0BAAA,gBAAA,SAAA,IAAA,EAAA,IAAA;AACA,0BAAA,gBAAA,WAAA,IAAA,EAAA,IAAA;AACA,0BAAA,gBAAA,YAAA,IAAA,EAAA,IAAA;AAbE,iBAAA;QAAA,GAAA,kBAAA,CAAA,CAAA;MAAA;IAAA,CAAA;ACvBL,QAOO;AAPP,QAmBO;AAnBP,QAAA,oBAAA,MAAA;MAAA,sCAAA;AAOO,+BAAA,MAAoD;UACxD,YACmB,QACA,OAAsB,MACtB,MACjB;AAHiB,iBAAA,SAAA;AACA,iBAAA,OAAA;AACA,iBAAA,OAAA;UAAA;UAGnB,WAAW;AACR,mBAAO,GAAG,KAAK,IAAA,IAAQ,KAAK,MAAA;UAAA;QAAA;AAI3B,6BAAA,MAAgD;UAAhD,cAnBP;AAoBU,iBAAA,YAA6B,CAAA;AAC7B,iBAAA,SAAmB,CAAA;AACnB,iBAAA,SAA4B;UAAA;UAAA,IAE/B,SAAS;AACV,mBAAO,KAAK,UAAU,SAAS;UAAA;UAAA,IAG9B,SAAS;AACV,mBAAO,KAAK;UAAA;UAGf,WAAW;AACR,gBAAI,KAAK,UAAU,QAAQ;AACxB,qBAAO,cAAc,KAAK,UAAU,KAAK,IAAA,CAAA;YAAA;AAG5C,mBAAO;UAAA;QAAA;MAAA;IAAA,CAAA;ACrCb,QAOO;AAPP,QAuBO;AAvBP,QAAA,mBAAA,MAAA;MAAA,qCAAA;AAOO,sBAAA,MAAwC;UAAxC,cAPP;AAQU,iBAAA,iBAAiB;cACrB,KAAK,CAAA;YAAA;AAED,iBAAA,UAAU,CAAA;AACV,iBAAA,UAAoB,CAAA;AACpB,iBAAA,QAAkB,CAAA;AAClB,iBAAA,YAAmC,CAAA;AACnC,iBAAA,aAAoC,CAAA;AACpC,iBAAA,UAA6B;cACjC,SAAS;cACT,WAAW;cACX,YAAY;YAAA;UAAA;QAAA;AAIX,4BAAA,MAAoD;UAApD,cAvBP;AAwBG,iBAAA,SAAS;AACT,iBAAA,OAAO;cACJ,OAAO;cACP,QAAQ;YAAA;AAEX,iBAAA,SAAS;cACN,OAAO;cACP,QAAQ;YAAA;AAEX,iBAAA,UAAU;UAAA;UAEV,WAAW;AACR,mBAAO,KAAK;UAAA;QAAA;MAAA;IAAA,CAAA;AC7BlB,aAAA,wBACG,gBACgC;AAChC,aAAQ,eAAe,UAAU,eAAe,WAAW;QACxD,aAAa;QACb,UAAU;QACV,aAAa;QACb,YAAY;QACZ,QAAQ,EAAE,OAAO,GAAG,OAAO,EAAA;QAC3B,OAAO,EAAE,OAAO,GAAG,OAAO,EAAA;MAAA;IAAA;AAIhC,aAAA,cAAuB,QAAgB;AACpC,YAAM,QAAQ,YAAY,KAAK,MAAA;AAC/B,YAAM,QAAQ,eAAe,KAAK,MAAA;AAElC,aAAO;QACJ,OAAO,SAAU,SAAS,MAAM,CAAA,KAAO,GAAA;QACvC,OAAO,SAAU,SAAS,MAAM,CAAA,KAAO,GAAA;MAAA;IAAA;AA1B7C,QA8Ba;AA9Bb,QAAA,4BAAA,MAAA;MAAA,4CAAA;AAKA,mBAAA;AAyBa,sCACV;UACG,IAAI,iBACD,kEACA,CAAC,QAAQ,CAAC,QAAQ,KAAA,MAAW;AAC1B,kBAAM,MAAM,OAAO,YAAA;AACnB,kBAAM,cAAc,wBAAwB,OAAO,cAAA;AAEnD,mBAAO,OAAO,aAAa,EAAA,CAAG,GAAA,GAAM,SAAS,KAAA,EAAA,CAAA;UAAA,CAAA;UAGnD,IAAI,iBACD,gFACA,CAAC,QAAQ,CAAC,QAAQ,KAAA,MAAW;AAC1B,kBAAM,MAAM,OAAO,YAAA;AACnB,kBAAM,cAAc,wBAAwB,OAAO,cAAA;AAEnD,mBAAO,OAAO,aAAa,EAAA,CAAG,GAAA,GAAM,SAAS,KAAA,EAAA,CAAA;UAAA,CAAA;UAGnD,IAAI,iBACD,qDACA,CAAC,QAAQ,CAAC,OAAO,QAAQ,UAAA,MAAgB;AACtC,kBAAM,UAAU,wBAAwB,OAAO,cAAA;AAC/C,oBAAQ,QAAQ,cAAc,KAAA;AAC9B,oBAAQ,SAAS,cAAc,MAAA;AAC/B,oBAAQ,aAAa,SAAS,UAAA;UAAA,CAAA;QAAA;MAAA;IAAA,CAAA;AC3BnC,aAAA,oBACJ,SACA,QACoB;AACpB,aAAO,oBAAoB,EAAE,gBAAgB,IAAI,qBAAA,EAAA,GAA+B,UAAS,MAAA;IAAA;AAjC5F,QAIM;AAJN,QAoCO;AApCP,QAAA,6BAAA,MAAA;MAAA,6CAAA;AACA,mBAAA;AACA,kCAAA;AAEM,mBACH;UACG,IAAI,iBAAiB,oBAAoB,CAAC,QAAQ,CAAC,IAAA,MAAU;AAC1D,mBAAO,eAAe,IAAI,KAAK,KAAK,KAAA,CAAA;AACpC,mBAAO;UAAA,CAAA;UAEV,GAAG;UACH,IAAI,iBACD,CAAC,oCAAoC,qBAAA,GACrC,CAAC,QAAQ,CAAC,cAAA,MAAoB;AAC1B,mBAAO,eAA4C,iBAAiB;UAAA,CAAA;UAG3E,IAAI,iBACD,CAAC,6CAA6C,qBAAA,GAC9C,CAAC,QAAQ,CAAC,OAAO,SAAS,GAAA,MAAS;AAC/B,mBAAO,eAA4C,kBAAkB;cACnE,OAAO,SAAS,KAAA;cAChB;cACA;YAAA;UAAA,CAAA;QAAA;AAaR,+BAAA,MAAqD;UAArD,cApCP;AAqCmB,iBAAA,MAAgB,CAAA;UAAA;QAAA;MAAA;IAAA,CAAA;AC0B5B,aAAA,qBAA8B,QAAgB,QAAgB;AAClE,YAAM,YAAY,oBAAoB,IAAI,kBAAA,GAAqB,cAAc,CAAC,QAAQ,MAAA,CAAA;AAEtF,aAAO,UAAU,WAAW;IAAA;AAlE/B,QAMM;AANN,QAOM;AAPN,QAQM;AARN,QAUM;AAVN,QAqCM;AArCN,QAmDa;AAnDb,QAuDa;AAvDb,QAAA,kBAAA,MAAA;MAAA,kCAAA;AACA,yBAAA;AAEA,mBAAA;AACA,mCAAA;AAEM,4BAAoB;AACpB,wBAAgB;AAChB,uBAAe;AAEf,mBAAoC;UACvC,IAAI,WAAW,mBAAmB,CAAC,QAAQ,CAAC,MAAM,YAAY,SAAA,MAAe;AAC1E,mBAAO,MAAM,KAAK,IAAA;AAElB,gBAAI,YAAY;AACb,qBAAO,WAAW,IAAA,IAAQ,WAAW;YAAA;AAGxC,gBAAI,WAAW;AACZ,qBAAO,UAAU,IAAA,IAAQ,UAAU;YAAA;UAAA,CAAA;UAGzC,IAAI,WAAW,eAAe,CAAC,QAAQ,CAAC,SAAS,EAAE,YAAY,EAAE,SAAA,MAAe;AAC7E,gBAAI,eAAe,UAAa,cAAc,QAAW;AACtD,qBAAO,QAAQ,UAAU,CAAC,WAAW;AACrC,qBAAO,QAAQ,aAAa,CAAC,cAAc;AAC3C,qBAAO,QAAQ,YAAY,CAAC,aAAa;AACzC,qBAAO;YAAA;AAEV,mBAAO;UAAA,CAAA;UAEV,IAAI,WAAW,cAAc,CAAC,QAAQ,CAAC,QAAQ,IAAA,MAAU;AACtD,mBAAO,OAAO,OAAO,IAAA;AACrB,mBAAO,WAAW,WAAW,OAAO,UAAU,OAAO,SAAS,IAAA;UAAA,CAAA;QAAA;AAI9D,uBAA+C;UAClD,IAAI,WAAW,iBAAiB,CAAC,QAAQ,CAAC,MAAA,MAAY,MAAM,OAAO,SAAS,OAAA;UAC5E,IAAI,WAAW,kBAAkB,CAAC,QAAQ,CAAC,OAAA,MAAa,MAAM,OAAO,UAAU,QAAA;UAC/E,IAAI,WACD,oDACA,CAAC,QAAQ,CAAC,WAAW,YAAY,aAAa,YAAA,MAAkB;AAC7D,mBAAO,OAAO,QAAQ;AACtB,mBAAO,KAAK,QAAQ;AACpB,mBAAO,OAAO,SAAS;AACvB,mBAAO,KAAK,SAAS;UAAA,CAAA;QAAA;AAKjB,0BAAkD,CAAC,QAAQ,WAAW;AAChF,iBAAO,oBAAoB,IAAI,YAAA,GAAe,UAAS,CAAC,QAAQ,MAAA,CAAA;QAAA;AAGtD,0BAAkD,CAAC,QAAQ,WAAW;AAChF,iBAAO,OAAO,OACX,IAAI,YAAA,GACJ,gBAAgB,QAAQ,MAAA,GACxB,oBAAoC,QAAQ,MAAA,CAAA;QAAA;MAAA;IAAA,CAAA;AC3DlD,QAMM;AANN,QA8Ba;AA9Bb,QAsCa;AAtCb,QAAA,mBAAA,MAAA;MAAA,mCAAA;AACA,0BAAA;AAEA,mBAAA;AACA,wBAAA;AAEM,mBAAqC;UACxC,IAAI,WAAW,yBAAyB,CAAC,SAAS,CAAC,SAAA,MAAe;AAC/D,oBAAQ,OAAO,KAAK,SAAA;UAAA,CAAA;UAEvB,IAAI,WAAW,iDAAiD,CAAC,SAAS,CAAC,QAAQ,IAAA,MAAU;AAC1F,oBAAQ,UAAU,KAAK,IAAI,qBAAqB,QAAQ,IAAA,CAAA;UAAA,CAAA;UAE3D,IAAI,WACD,0DACA,CAAC,SAAS,CAAC,QAAQ,MAAM,SAAA,MAAe;AACrC,oBAAQ,UAAU,KAAK,IAAI,qBAAqB,QAAQ,MAAM,EAAE,UAAA,CAAA,CAAA;UAAA,CAAA;UAGtE,IAAI,WAAW,yBAAyB,CAAC,SAAS,CAAC,MAAA,MAAY;AAC5D,oBAAQ,UAAU,KAAK,IAAI,qBAAqB,QAAQ,IAAA,CAAA;UAAA,CAAA;UAE3D,IAAI,WAAW,oCAAoC,CAAC,SAAS,CAAC,MAAA,MAAY;AACvE,oBAAQ,SAAS;UAAA,CAAA;QAAA;AAOV,2BAAoD,CAAC,QAAQ,WAAW;AAClF,iBAAO,OAAO,OAAO,iBAAiB,QAAQ,MAAA,GAAS,gBAAgB,QAAQ,MAAA,CAAA;QAAA;AAOrE,2BAAoD,CAAC,WAAW;AAC1E,iBAAO,oBAAoB,IAAI,mBAAA,GAAsB,UAAS,MAAA;QAAA;MAAA;IAAA,CAAA;ACjC1D,aAAA,UAAmB,YAA2D;AAClF,UAAI,CAAC,WAAW,QAAQ;AACrB,eAAO,uBAAuB,wCAAA;MAAA;AAGjC,aAAO;QACJ,UAAU,CAAC,SAAS,GAAG,UAAA;QACvB,QAAQ;QACR,OAAO,QAAQ,QAAqB;AACjC,gBAAM,QAAQ,iBAAiB,QAAQ,MAAA;AACvC,cAAI,MAAM,QAAQ;AACf,kBAAM,IAAI,iBAAiB,KAAA;UAAA;AAG9B,iBAAO;QAAA;MAAA;IAAA;AApBhB,QAAA,aAAA,MAAA;MAAA,2BAAA;AACA,gCAAA;AACA,yBAAA;AAEA,kBAAA;MAAA;IAAA,CAAA;ACMA,aAAA,qBAA8B,OAAe,QAAgB,QAAsC;AAChG,YAAM,UAAU,OAAO,SAAS,SAAA;AAChC,YAAM,MAAM,OAAO,SAAS,KAAA,KAAU,cAAc,KAAK,KAAA;AACzD,YAAM,iBAAiB,CAAC,OAAO,SAAS,KAAA;AAExC,aAAO;QACJ;QACA;QACA,QAAQ,CAAC;QACT,KAAK,CAAC;QACN;QACA;QACA;MAAA;IAAA;AAtBN,QA0BM;AA1BN,QAmEa;AAnEb,QA6Ea;AA7Eb,QAAA,kBAAA,MAAA;MAAA,kCAAA;AAOA,mBAAA;AACA,mCAAA;AAkBM,mBAAoC;UACvC,IAAI,WAAW,qBAAqB,CAAC,QAAQ,CAAC,IAAA,MAAU;AACrD,mBAAO,OAAO;UAAA,CAAA;UAEjB,IAAI,WAAW,uCAAuC,CAAC,QAAQ,CAAC,KAAA,MAAW;AACxE,mBAAO,MAAM,cAAA,eAAA,CAAA,GACN,OAAO,OAAO,CAAA,CAAA,GADR;cAEV;YAAA,CAAA;UAAA,CAAA;UAGN,IAAI,WAAW,qCAAqC,CAAC,QAAQ,CAAC,OAAO,QAAQ,IAAA,MAAU;AACpF,mBAAO,OAAO,KAAK,qBAAqB,OAAO,QAAQ,IAAA,CAAA;UAAA,CAAA;UAE1D,IAAI,WACD,4EACA,CAAC,QAAQ,CAAC,OAAO,QAAQ,UAAA,MAAgB;AACtC,mBAAO,SAAS,cAAA,eAAA,CAAA,GACT,OAAO,UAAU,CAAA,CAAA,GADR;cAEb;cACA;cACA;YAAA,CAAA;UAAA,CAAA;UAIT,IAAI,WACD,gDACA,CAAC,QAAQ,CAAC,OAAO,QAAQ,MAAM,EAAA,MAAQ;AACpC,mBAAO,SAAS;cACb,MAAM;gBACH;gBACA;cAAA;cAEH,MAAM;gBACH;gBACA;cAAA;YAAA;UAAA,CAAA;QAAA;AAOF,0BAAkD,CAAC,QAAQ,WAAW;AAChF,gBAAM,aAAa,gBAAgB,QAAQ,MAAA;AAC3C,gBAAM,iBAAiB,oBAA8C,QAAQ,MAAA;AAE7E,iBAAO,eAAA,eAAA,CAAA,GACD,UAAA,GACA,cAAA;QAAA;AAII,0BAAkD,CAAC,QAAQ,WAAW;AAChF,iBAAO,oBAAoB,EAAE,QAAQ,CAAA,EAAA,GAAM,UAAS,CAAC,QAAQ,MAAA,CAAA;QAAA;MAAA;IAAA,CAAA;AC9EhE,QAAA,eAAA,CAAA;AAAA,aAAA,cAAA;MAAA,cAAA,MAAA;MAAA,UAAA,MAAA;IAAA,CAAA;AAOO,aAAA,aAAsB,MAAe,CAAA,GAAI,YAA8C;AAC3F,aAAO,YAAY,QAAA;AACnB,aAAO,SAAS,KAAK,UAAA;IAAA;AAGjB,aAAA,SAAkB,MAAe,CAAA,GAAI,YAA8C;AACvF,YAAM,WAAW,CAAC,QAAQ,GAAG,UAAA;AAC7B,UAAI,IAAI,QAAQ;AACb,iBAAS,OAAO,GAAG,GAAG,IAAI,MAAA;MAAA;AAE7B,UAAI,IAAI,QAAQ;AACb,iBAAS,OAAO,GAAG,GAAG,IAAI,MAAA;MAAA;AAG7B,aAAO,UAAU,IAAA;AACjB,aAAO,UAAU,WAAA;AACjB,aAAO,UAAU,aAAA;AAEjB,aAAO;QACJ;QACA,QAAQ;QACR,QAAA;MAAA;IAAA;AA5BN,QAAA,YAAA,MAAA;MAAA,0BAAA;AACA,wBAAA;AAEA,mBAAA;MAAA;IAAA,CAAA;ACEe,aAAA,eAAoD;AAChE,aAAO;QACJ,aAA+B;AAC5B,gBAAM,WAAW,CAAC,QAAQ,GAAG,mBAAmB,WAAW,CAAA,CAAA;AAC3D,cAAI,CAAC,SAAS,SAAS,UAAA,GAAa;AACjC,qBAAS,OAAO,GAAG,GAAG,UAAA;UAAA;AAGzB,iBAAO,KAAK,SACT,0BAA0B,QAAA,GAC1B,yBAAyB,SAAA,CAAA;QAAA;QAI/B,OAAyB;AACtB,gBAAM,WAAW,CAAC,QAAQ,GAAG,mBAAmB,WAAW,CAAA,CAAA;AAC3D,iBAAO,KAAK,SACT,0BAA0B,QAAA,GAC1B,yBAAyB,SAAA,CAAA;QAAA;MAAA;IAAA;AAvBrC,QAAA,YAAA,MAAA;MAAA,0BAAA;AAEA,mBAAA;AACA,kBAAA;MAAA;IAAA,CAAA;ACHA,QAEa;AAFb,QAIO;AAJP,QAAA,yBAAA,MAAA;MAAA,2CAAA;AAEa,wBAAgB;AAEtB,4BAAA,MAAoD;UAGxD,YACU,MACA,OACA,aACR;AAHQ,iBAAA,OAAA;AACA,iBAAA,QAAA;AACA,iBAAA,cAAA;AAEP,gBAAY,QAAQ,gBAAhB,KAA6B;AAC9B,oBAAM,SAAS,cAAc,KAAK,IAAA,KAAS,CAAC,MAAM,MAAM,IAAA;AACxD,mBAAK,OAAO,OAAO,CAAA,KAAM;AACzB,mBAAK,OAAO,OAAO,CAAA,KAAM;YAAA;UAAA;QAAA;MAAA;IAAA,CAAA;ACwBlC,aAAA,YAAqB,MAAc;AAChC,YAAM,CAAC,IAAI,IAAA,IAAQ,KAAK,MAAM,IAAA;AAE9B,aAAO;QACJ,MAAM,QAAQ;QACd;MAAA;IAAA;AAIN,aAAA,QACG,QACA,QACA,SAC2B;AAC3B,aAAO,CAAC,GAAG,MAAA,GAAS,MAAA,IAAU,OAAA;IAAA;AAGjC,aAAA,UAAmB,WAAgC,QAA+B;AAC/E,aAAO,OAAO,IAAI,CAAC,MAAM,QAAO,QAAQ,GAAG,CAAC,QAAQ,SAAS,OAAO,OAAO,YAAY,IAAA,CAAA,CAAA;IAAA;AA6H1F,aAAA,UAAmB,QAAsB,SAAiB;AACvD,YAAM,WAAU,QAAQ,KAAA;AACxB,cAAQ,KAAA;QAAA,KACA,SAAQ,OAAO,CAAA;AACjB,iBAAO,KAAK,SAAQ,OAAO,CAAA,GAAI,SAAQ,OAAO,CAAA,GAAI,SAAQ,OAAO,CAAA,CAAA;QAAA,KAC/D,SAAQ,OAAO,CAAA;AACjB,iBAAO,KAAK,KAA0B,SAAQ,OAAO,CAAA,GAAI,SAAQ,OAAO,CAAA,CAAA;QAAA;AAExE;MAAA;AAGN,eAAA,KAAc,OAAe,YAAoB,MAAc;AAC5D,cAAM,MAAM,GAAG,KAAA,GAAQ,UAAA;AACvB,cAAM,UAAU,SAAQ,IAAI,GAAA;AAE5B,YAAI,SAAS;AACV,kBAAQ,QAAQ,IAAA;QAAA;AAGnB,YAAI,QAAQ,QAAQ,QAAQ,MAAM;AAC/B,iBAAO,MAAM,KAAK,IAAI,kBAAkB,KAAK,QAAQ,SAAS,EAAA,GAAK,OAAO,UAAA,CAAA;QAAA;MAAA;IAAA;AA1MnF,QAMO;AANP,QA4DM;AA5DN,QAiKa;AAjKb,QAAA,qBAAA,MAAA;MAAA,uCAAA;AACA,mBAAA;AACA,+BAAA;AAIO,wBAAA,MAA4C;UAA5C,cANP;AAOU,iBAAA,YAAY,CAAA;AACZ,iBAAA,aAAa,CAAA;AACb,iBAAA,UAAU,CAAA;AACV,iBAAA,UAAU,CAAA;AACV,iBAAA,UAAU;AACV,iBAAA,WAAW,CAAA;AACX,iBAAA,UAAU,CAAA;AACV,iBAAA,QAAQ,CAAA;AACR,iBAAA,SAAS,CAAA;AACT,iBAAA,QAAQ;AACR,iBAAA,SAAS;AACT,iBAAA,UAAU;AACV,iBAAA,WAAW;AACX,iBAAA,WAAW;AAEX,iBAAA,UAAU,MAAM;AACpB,qBAAO,CAAC,KAAK,MAAM;YAAA;UAAA;QAAA;AAqCnB,mBAAyC,IAAI,IAAI;UACpD,QAAO,KAA0B,KAA2B,CAAC,QAAQ,SAClE,OAAO,OAAO,SAAS,IAAA,CAAA;UAE1B,QAAO,KAA0B,KAA6B,CAAC,QAAQ,SACpE,OAAO,OAAO,SAAS,IAAA,CAAA;UAE1B,QAAO,KAA0B,KAA8B,CAAC,QAAQ,SACrE,OAAO,OAAO,UAAU,IAAA,CAAA;UAG3B,QACG,KACA,KACA,CAAC,QAAQ,SAAS,OAAO,OAAO,SAAS,IAAA,KAAS,OAAO,OAAO,QAAQ,IAAA,CAAA;UAE3E,QACG,KACA,KACA,CAAC,QAAQ,SACN,OAAO,OAAO,SAAS,IAAA,KACvB,OAAO,OAAO,QAAQ,IAAA,KACtB,OAAO,OAAO,UAAU,IAAA,CAAA;UAG9B,QACG,KACA,KACA,CAAC,QAAQ,SAAS,OAAO,OAAO,SAAS,IAAA,KAAS,OAAO,OAAO,QAAQ,IAAA,CAAA;UAG3E,QACG,KACA,KACA,CAAC,QAAQ,SAAS,OAAO,OAAO,UAAU,IAAA,KAAS,OAAO,OAAO,QAAQ,IAAA,CAAA;UAE5E,QACG,KACA,KACA,CAAC,QAAQ,SAAS,OAAO,OAAO,UAAU,IAAA,KAAS,OAAO,OAAO,QAAQ,IAAA,CAAA;UAG5E,QAAO,KAA6B,KAA0B,CAAC,QAAQ,SAAS;AAC7E,mBAAO,OAAO,SAAS,YAAY,IAAA,CAAA;UAAA,CAAA;UAEtC,QAAO,KAA6B,KAA8B,CAAC,QAAQ,SAAS;AACjF,kBAAM,UAAU,YAAY,IAAA;AAC5B,mBAAO,OAAO,SAAS,OAAA;AACvB,mBAAO,OAAO,UAAU,QAAQ,EAAA;UAAA,CAAA;UAEnC,QAAO,KAA6B,KAA6B,CAAC,SAAS,UAAU;AAClF,mBAAQ,QAAQ,UAAU,QAAQ,WAAW,CAAA,GAAK,KAAA;UAAA,CAAA;UAGrD,QAAO,KAA+B,KAA+B,CAAC,QAAQ,SAC3E,OAAO,OAAO,WAAW,IAAA,CAAA;UAG5B,GAAG;YAAU;YAA2B;YAA2B;;UAAA;UACnE,GAAG;YACA;YACA;YACA;;UAAA;UAEH,GAAG;YACA;YACA;YACA;YACA;;UAAA;UAGH;YACG;YACA,CAAC,QAAQ,SAAS;AACf,oBAAM,WAAW;AACjB,oBAAM,YAAY;AAClB,oBAAM,aAAa;AACnB,oBAAM,cAAc;AACpB,oBAAM,mBAAmB;AACzB,kBAAI;AAEJ,4BAAc,SAAS,KAAK,IAAA;AAC5B,qBAAO,QAAS,eAAe,CAAC,YAAY,CAAA,KAAO;AAEnD,4BAAc,UAAU,KAAK,IAAA;AAC7B,qBAAO,SAAU,eAAe,CAAC,YAAY,CAAA,KAAO;AAEpD,4BAAc,WAAW,KAAK,IAAA;AAC9B,qBAAO,UAAU,eAAe,YAAY,CAAA;AAE5C,4BAAc,YAAY,KAAK,IAAA;AAC/B,qBAAO,WAAW,eAAe,YAAY,CAAA;AAE7C,4BAAc,iBAAiB,KAAK,IAAA;AACpC,qBAAO,UAAW,eAAe,YAAY,CAAA,KAAO,OAAO;AAE3D,qBAAO,WAAW,gBAAgB,KAAK,IAAA;YAAA;UAAA;QAAA,CAAA;AAKnC,6BAAqB,SAAU,MAA4B;AACrE,gBAAM,QAAQ,KAAK,MAAM,IAAA;AACzB,gBAAM,SAAS,IAAI,cAAA;AAEnB,mBAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,IAAI,KAAK;AACxC,gBAAI,OAAO,MAAM,GAAA,EAAK,KAAA;AAEtB,gBAAI,CAAC,MAAM;AACR;YAAA;AAGH,gBAAI,KAAK,OAAO,CAAA,MAAO,KAA6B;AACjD,sBAAQ,QAAQ,MAAM,GAAA,KAAQ;YAAA;AAGjC,sBAAU,QAAQ,IAAA;UAAA;AAGrB,iBAAO;QAAA;MAAA;IAAA,CAAA;AC7KH,aAAA,WAAoB,YAAgD;AACxE,YAAM,WAAW;QACd;QACA;QACA;QACA;QACA;QACA,GAAG,WAAW,OAAO,CAAC,QAAQ,CAAC,eAAe,SAAS,GAAA,CAAA;MAAA;AAG1D,aAAO;QACJ,QAAQ;QACR;QACA,OAAO,MAAc;AAClB,iBAAO,mBAAmB,IAAA;QAAA;MAAA;IAAA;AApBnC,QAIM;AAJN,QAAA,cAAA,MAAA;MAAA,4BAAA;AACA,2BAAA;AAGM,yBAAiB,CAAC,UAAU,IAAA;MAAA;IAAA,CAAA;ACUlC,aAAA,gBACG,QAAQ,GACR,QAAQ,GACR,QAAyB,GACzB,QAAQ,IACR,YAAY,MACE;AACd,aAAO,OAAO,eACX;QACG;QACA;QACA;QACA;QACA;MAAA,GAEH,YACA;QACG,QAAQ;AACL,iBAAO,GAAG,KAAK,KAAA,IAAS,KAAK,KAAA,IAAS,KAAK,KAAA;QAAA;QAE9C,cAAc;QACd,YAAY;MAAA,CAAA;IAAA;AAKrB,aAAA,uBAAgC;AAC7B,aAAO,gBAAgB,GAAG,GAAG,GAAG,IAAI,KAAA;IAAA;AAGxB,aAAA,kBAAwC;AACpD,aAAO;QACJ,UAA4B;AACzB,iBAAO,KAAK,SAAS;YAClB,UAAU,CAAC,WAAA;YACX,QAAQ;YACR,QAAQ;YACR,QAAQ,QAAQ,OAAO,MAAM,MAAM;AAChC,kBAAI,OAAO,aAAa,IAAqB;AAC1C,uBAAO,KAAK,OAAO,KAAK,aAAA,CAAA;cAAA;AAG3B,mBAAK,KAAA;YAAA;UAAA,CAAA;QAAA;MAAA;IAAA;AAyBpB,aAAA,cAAuB,QAAgB;AACpC,UAAI,WAAW,eAAe;AAC3B,eAAO,qBAAA;MAAA;AAGV,aAAO,oBAAoB,gBAAgB,GAAG,GAAG,GAAG,MAAA,GAAS,UAAS,MAAA;IAAA;AAtFzE,QAYM;AAZN,QA+DM;AA/DN,QAAA,eAAA,MAAA;MAAA,6BAAA;AAEA,mBAAA;AAUM,wBAAgB;AAmDhB,mBAAuC;UAC1C,IAAI,WACD,+CACA,CAAC,QAAQ,CAAC,OAAO,OAAO,OAAO,QAAQ,EAAA,MAAQ;AAC5C,mBAAO,OACJ,QACA,gBAAgB,SAAS,KAAA,GAAQ,SAAS,KAAA,GAAQ,SAAS,KAAA,GAAQ,KAAA,CAAA;UAAA,CAAA;UAI5E,IAAI,WACD,qCACA,CAAC,QAAQ,CAAC,OAAO,OAAO,OAAO,QAAQ,EAAA,MAAQ;AAC5C,mBAAO,OAAO,QAAQ,gBAAgB,SAAS,KAAA,GAAQ,SAAS,KAAA,GAAQ,OAAO,KAAA,CAAA;UAAA,CAAA;QAAA;MAAA;IAAA,CAAA;AC5ExF,QAAA,yBAAA,CAAA;AAAA,aAAA,wBAAA;MAAA,cAAA,MAAA;IAAA,CAAA;AAAA,QAyBO;AAzBP,QAAA,sBAAA,MAAA;MAAA,8BAAA;AACA,2BAAA;AACA,sCAAA;AACA,sBAAA;AACA,oBAAA;AACA,oBAAA;AACA,kBAAA;AACA,yBAAA;AACA,kBAAA;AACA,iBAAA;AACA,mBAAA;AACA,kBAAA;AACA,kBAAA;AACA,oBAAA;AACA,kBAAA;AACA,qBAAA;AAEA,mBAAA;AAQO,uBAAA,MAA4C;UAChD,YAAoB,WAA8B;AAA9B,iBAAA,YAAA;UAAA;UAEV,SAAY,MAAwB,MAAiC;AAC5E,kBAAM,QAAQ,KAAK,UAAU,MAAA;AAC7B,kBAAM,UAAU,MAAM,KAAK,IAAA;AAE3B,gBAAI,MAAM;AACP,2BAAa,MAAM,SAAS,IAAA;YAAA;AAG/B,mBAAO,OAAO,OAAO,MAAM;cACxB,MAAM,EAAE,OAAO,QAAQ,KAAK,KAAK,OAAA,EAAA;cACjC,OAAO,EAAE,OAAO,QAAQ,MAAM,KAAK,OAAA,EAAA;cACnC,WAAW,EAAE,OAAO,MAAA;YAAA,CAAA;UAAA;UAI1B,IAAI,OAA0B;AAC3B,mBAAO,KAAK,SACT,0BAA0B,CAAC,OAAO,GAAG,QAAQ,KAAA,CAAA,CAAA,GAC7C,yBAAyB,SAAA,CAAA;UAAA;UAI/B,IAAI,WAAsD;AACvD,kBAAM,OAAO,yBAAyB,SAAA;AAEtC,gBAAI,OAAO,cAAc,UAAU;AAChC,qBAAO,KAAK,SAAS,2BAA2B,WAAW,KAAK,SAAA,GAAY,IAAA;YAAA;AAG/E,gBAAI,QAAO,aAAA,OAAA,SAAA,UAAW,UAAS,UAAU;AACtC,qBAAO,KAAK,SACT,2BACG,UAAU,MACT,UAAU,QAAQ,KAAK,aAAc,MAAA,GAEzC,IAAA;YAAA;AAIN,mBAAO,KAAK,SACT,uBAAuB,wDAAA,GACvB,IAAA;UAAA;UAIN,WAAW,MAAc,OAA0B;AAChD,mBAAO,KAAK,SACT,eAAe,MAAM,UAAU,IAAA,GAC/B,yBAAyB,SAAA,CAAA;UAAA;UAI/B,KAAK,MAA0B;AAC5B,mBAAO,KAAK,SACT,SAAS,SAAS,MAAM,KAAK,UAAU,KAAK,mBAAmB,SAAA,CAAA,GAC/D,yBAAyB,SAAA,CAAA;UAAA;UAI/B,QAAQ;AACL,mBAAO,KAAK,SACT,UAAU,mBAAmB,SAAA,CAAA,GAC7B,yBAAyB,SAAA,CAAA;UAAA;UAI/B,YAAY,QAAgB,QAAgB;AACzC,gBAAI,EAAE,aAAa,MAAA,KAAW,aAAa,MAAA,IAAU;AAClD,qBAAO,KAAK,SACT,uBACG,2FAAA,CAAA;YAAA;AAKT,mBAAO,KAAK,SACT,UAAU,CAAC,QAAQ,QAAQ,GAAG,mBAAmB,SAAA,CAAA,CAAA,GACjD,yBAAyB,WAAW,KAAA,CAAA;UAAA;UAI1C,cAAc,SAAwB;AACnC,iBAAK,UAAU,gBAAgB;AAC/B,mBAAO;UAAA;UAGV,OAAO;AACJ,kBAAM,OAAO,SACV;cACG,QAAQ,WAAW,UAAU,CAAA,GAAI,YAAA;cACjC,QAAQ,WAAW,UAAU,CAAA,GAAI,YAAA;YAAA,GAEpC,mBAAmB,SAAA,CAAA;AAGtB,mBAAO,KAAK,SAAS,MAAM,yBAAyB,SAAA,CAAA;UAAA;UAGvD,QAAQ;AACL,mBAAO,KAAK,SACT,0BAA0B,CAAC,SAAS,GAAG,mBAAmB,SAAA,CAAA,CAAA,GAC1D,yBAAyB,SAAA,CAAA;UAAA;UAI/B,SAAS;AACN,mBAAO,KAAK,SACT,WAAW,mBAAmB,SAAA,CAAA,GAC9B,yBAAyB,SAAA,CAAA;UAAA;QAAA;AAKlC,eAAO,OACJ,aAAa,WACb,iBAAA,GACA,eAAA,GACA,eAAA,GACA,aAAA,GACA,YAAA,GACA,aAAA,GACA,gBAAA,CAAA;MAAA;IAAA,CAAA;ACrJH,QAAA,oBAAA,CAAA;AAAA,aAAA,mBAAA;MAAA,WAAA,MAAA;IAAA,CAAA;AAAA,QACA;AADA,QASM;AATN,QAuBO;AAvBP,QAAA,iBAAA,MAAA;MAAA,iCAAA;AAAA,mBAAA;AACA,mCAAgD;AAChD,wBAAA;AAOM,+BAA4C,MAAM;AACrD,cAAI,KAAK;AACT,iBAAO,MAAM;AACV;AACA,kBAAM,EAAE,SAAS,KAAA,KAAS,GAAA,yBAAA,gBAAA;AAE1B,mBAAO;cACJ;cACA;cACA;YAAA;UAAA;QAAA,GAAA;AAKF,oBAAA,MAAgB;UAKpB,YAAoB,cAAc,GAAG;AAAjB,iBAAA,cAAA;AAJZ,iBAAA,SAAS,aAAa,IAAI,WAAA;AAC1B,iBAAA,UAA2B,CAAA;AAC3B,iBAAA,UAA2B,CAAA;AAGhC,iBAAK,OAAO,+BAA+B,WAAA;UAAA;UAGtC,WAAW;AAChB,gBAAI,CAAC,KAAK,QAAQ,UAAU,KAAK,QAAQ,UAAU,KAAK,aAAa;AAClE,mBAAK,OACF,kEACA,KAAK,QAAQ,QACb,KAAK,QAAQ,QACb,KAAK,WAAA;AAER;YAAA;AAGH,kBAAM,OAAO,OAAO,KAAK,SAAS,KAAK,QAAQ,MAAA,CAAA;AAC/C,iBAAK,OAAO,oBAAoB,KAAK,EAAA;AACrC,iBAAK,KAAK,MAAM;AACb,mBAAK,OAAO,kBAAkB,KAAK,EAAA;AACnC,qBAAO,KAAK,SAAS,IAAA;AACrB,mBAAK,SAAA;YAAA,CAAA;UAAA;UAIX,OAA0C;AACvC,kBAAM,EAAE,SAAS,GAAA,IAAO,OAAO,KAAK,SAAS,oBAAA,CAAA;AAC7C,iBAAK,OAAO,oBAAoB,EAAA;AAEhC,iBAAK,SAAA;AAEL,mBAAO;UAAA;QAAA;MAAA;IAAA,CAAA;AC1Db,QAAA,sBAAA,CAAA;AAAA,aAAA,qBAAA;MAAA,gBAAA,MAAA;IAAA,CAAA;AAgCO,aAAA,eAAwB,SAAmB,YAA0C;AACzF,aAAO,0BAA0B,CAAC,SAAS,GAAG,YAAY,GAAG,OAAA,CAAA;IAAA;AAjChE,QAAA,mBAAA,MAAA;MAAA,iCAAA;AAAA,kBAAA;MAAA;IAAA,CAAA;ACiBO,aAAA,sBAA+B,QAAgB,MAAyC;AAC5F,aAAO;QACJ;QACA;QACA,SAAS;MAAA;IAAA;AAIR,aAAA,sBAA+B,QAA2C;AAC9E,aAAO;QACJ;QACA,MAAM;QACN,SAAS;MAAA;IAAA;AA7Bf,QAOO;AAPP,QAAA,2BAAA,MAAA;MAAA,6CAAA;AAOO,8BAAA,MAA6D;UAA7D,cAPP;AAQG,iBAAA,MAAkC,CAAA;AAClC,iBAAA,WAA+D,CAAA;AAC/D,iBAAA,SAAqC,CAAA;UAAA;UAAA,IAEjC,UAAmB;AACpB,mBAAO,CAAC,KAAK,OAAO;UAAA;QAAA;MAAA;IAAA,CAAA;ACsBnB,aAAA,uBAAgC,MAAc,iBAAqC;AACvF,aAAO,oBAAoB,KAAmB,iBAAiB,KAAK,IAAA;IAAA;AApCvE,QASM;AATN,QAUM;AAVN,QAYM;AAZN,QA4Ba;AA5Bb,QAAA,2BAAA,MAAA;MAAA,2CAAA;AACA,iCAAA;AAMA,mBAAA;AAEM,6BAAqB;AACrB,2BAAmB;AAEnB,mBAAiD;UACpD,IAAI,WAAW,oBAAoB,CAAC,QAAQ,CAAC,QAAQ,IAAA,MAAU;AAC5D,kBAAM,WAAW,sBAAsB,QAAQ,IAAA;AAE/C,mBAAO,IAAI,KAAK,QAAA;AAChB,mBAAO,SAAS,MAAA,IAAU;UAAA,CAAA;UAE7B,IAAI,WAAW,kBAAkB,CAAC,QAAQ,CAAC,MAAA,MAAY;AACpD,kBAAM,WAAW,sBAAsB,MAAA;AAEvC,mBAAO,OAAO,KAAK,QAAA;AACnB,mBAAO,IAAI,KAAK,QAAA;AAChB,mBAAO,SAAS,MAAA,IAAU;UAAA,CAAA;QAAA;AAInB,+BAAoE,CAC9E,QACA,WACE;AACF,iBAAO,oBAAoB,IAAI,oBAAA,GAAuB,UAAS,CAAC,QAAQ,MAAA,CAAA;QAAA;MAAA;IAAA,CAAA;AChC3E,QAOO;AAPP,QAAA,qBAAA,MAAA;MAAA,uCAAA;AAOO,8BAAA,MAAmD;UAAnD,cAPP;AAQU,iBAAA,MAAgB,CAAA;AAChB,iBAAA,WAAiD,CAAA;AACjD,iBAAA,UAAkB;AAClB,iBAAA,WAAoB;UAAA;UAE3B,KACG,QACA,UACA,MACA,QACA,OACD;AACC,gBAAI,WAAW,KAAgC;AAC5C,mBAAK,WAAW;AAChB,mBAAK,UAAU;YAAA;AAGlB,iBAAK,IAAI,KAAK,IAAA;AACd,iBAAK,SAAS,IAAA,IAAQ;cACnB,SAAS,WAAW;cACpB,gBAAgB,WAAW;cAC3B;cACA;cACA;YAAA;UAAA;QAAA;MAAA;IAAA,CAAA;ACZT,aAAA,aAAsB,OAAgB;AACnC,aAAO,QAAQ,MAAM,OAAO,CAAA,IAAK;IAAA;AAG7B,aAAA,mBAA4B,QAA+B;AAC/D,aAAO,oBAAoB,IAAI,oBAAA,GAAuB,UAAS,MAAA;IAAA;AAxBlE,QAIM;AAJN,QAAA,oBAAA,MAAA;MAAA,oCAAA;AACA,2BAAA;AACA,mBAAA;AAEM,mBAA6C;UAChD,IAAI,WACD,2EACA,CAAC,QAAQ,CAAC,SAAS,MAAM,QAAQ,KAAA,MAAW;AACzC,mBAAO,KAAK,aAAa,OAAA,GAAU,MAAM,MAAM,QAAQ,KAAA;UAAA,CAAA;UAG7D,IAAI,WACD,0CACA,CAAC,QAAQ,CAAC,SAAS,MAAM,QAAQ,KAAA,MAAW;AACzC,mBAAO,KAAK,aAAa,OAAA,GAAU,OAAO,MAAM,QAAQ,KAAA;UAAA,CAAA;QAAA;MAAA;IAAA,CAAA;ACdjE,QAAA,iBAAA,CAAA;AAAA,aAAA,gBAAA;MAAA,iBAAA,MAAA;MAAA,YAAA,MAAA;MAAA,6BAAA,MAAA;MAAA,kBAAA,MAAA;MAAA,oBAAA,MAAA;IAAA,CAAA;AAOO,aAAA,4BAAqC,UAAoB;AAC7D,YAAM,iBAAiB,CAAC,MAAM,MAAM,UAAA;AACpC,aAAO,SAAS,KAAK,CAAC,YAAY,eAAe,SAAS,OAAA,CAAA;IAAA;AAGtD,aAAA,WACJ,YACqD;AACrD,YAAM,WAAW,4BAA4B,UAAA;AAC7C,YAAM,WAAW,CAAC,UAAU,GAAG,UAAA;AAE/B,UAAI,SAAS,WAAW,GAAG;AACxB,iBAAS,KAAK,IAAA;MAAA;AAGjB,UAAI,CAAC,SAAS,SAAS,IAAA,GAAO;AAC3B,iBAAS,OAAO,GAAG,GAAG,IAAA;MAAA;AAGzB,aAAO;QACJ,QAAQ;QACR;QACA,OAAO,QAAQ,QAAQ;AACpB,cAAI,UAAU;AACX,mBAAO,qBAAqB,QAAQ,MAAA,EAAQ,IAAI,CAAA;UAAA;AAGnD,iBAAO,mBAAmB,MAAA;QAAA;MAAA;IAAA;AAK5B,aAAA,kBAAsD;AAC1D,YAAM,UAAS;AAEf,aAAO;QACJ,QAAQ;QACR,UAAU,CAAC,UAAU,IAAA;QACrB,QAAA;MAAA;IAAA;AAIC,aAAA,mBACJ,UACA,cAAc,OACsB;AACpC,aAAO;QACJ,QAAQ;QACR,UAAU,CAAC,UAAU,MAAM,cAAc,OAAO,MAAM,GAAG,QAAA;QACzD,OAAO,QAAQ,QAAQ;AACpB,iBAAO,qBAAqB,QAAQ,MAAA;QAAA;QAEvC,QAAQ,EAAE,UAAU,OAAA,GAAU,OAAO,MAAM,MAAM;AAC9C,cAAI,CAAC,uBAAuB,OAAO,KAAA,GAAQ,QAAA,GAAW;AACnD,mBAAO,KAAK,KAAA;UAAA;AAGf,eAAK,MAAA;QAAA;MAAA;IAAA;AAKP,aAAA,iBACJ,QACA,cAAc,OACuB;AACrC,YAAM,OAA6C;QAChD,QAAQ;QACR,UAAU,CAAC,UAAU,MAAM,cAAc,OAAO,MAAM,MAAA;QACtD,OAAO,QAAQ,QAAQ;AACpB,iBAAO,qBAAqB,QAAQ,MAAA,EAAQ,SAAS,MAAA;QAAA;QAExD,QAAQ,EAAE,UAAU,QAAQ,OAAA,GAAU,OAAO,GAAG,MAAM;AACnD,cAAI,CAAC,uBAAuB,OAAO,KAAA,GAAQ,QAAA,GAAW;AACnD,mBAAO,KAAK,KAAA;UAAA;AAGf,gBAAM,IAAI,iBACP,KAAK,OAAO,eAAe,MAAA,GAAS,eAAe,MAAA,CAAA,GACnD,OAAO,KAAA,CAAA;QAAA;MAAA;AAKhB,aAAO;IAAA;AA3FV,QAAA,cAAA,MAAA;MAAA,4BAAA;AAEA,gCAAA;AACA,iCAAA;AACA,0BAAA;AACA,mBAAA;MAAA;IAAA,CAAA;ACLA,QAGa;AAHb,QAAA,mBAAA,MAAA;MAAA,qCAAA;AAGa,2BAAmB,CAAC,SAA2B;AACzD,iBAAO,KACH,MAAM,KAAA,EACN,IAAI,CAAC,SAAS,KAAK,KAAA,CAAA,EACnB,OAAO,CAAC,SAAS,CAAC,CAAC,IAAA;QAAA;MAAA;IAAA,CAAA;ACP1B,QAAA,uBAAA,CAAA;AAAA,aAAA,sBAAA;MAAA,iBAAA,MAAA;IAAA,CAAA;AAGO,aAAA,gBAAyB,OAAuC;AACpE,aAAO;QACJ,UAAU,CAAC,gBAAgB,GAAG,KAAA;QAC9B,QAAQ;QACR,QAAQ;MAAA;IAAA;AAPd,QAAA,oBAAA,MAAA;MAAA,kCAAA;AACA,yBAAA;MAAA;IAAA,CAAA;ACDA,QAAA,gBAAA,CAAA;AAAA,aAAA,eAAA;MAAA,iBAAA,MAAA;MAAA,WAAA,MAAA;IAAA,CAAA;AA+BA,aAAA,kBAA2B,SAAiB;AACzC,aAAO,sBAAsB,KAAK,OAAA;IAAA;AAG9B,aAAA,UACJ,MACA,WACA,YAC+B;AAC/B,YAAM,WAAW,CAAC,SAAS,GAAG,UAAA;AAE9B,mBAAa,IAAA,KAAS,SAAS,KAAK,IAAA;AACpC,mBAAa,SAAA,KAAc,SAAS,KAAK,SAAA;AAEzC,YAAM,SAAS,SAAS,KAAK,iBAAA;AAC7B,UAAI,QAAQ;AACT,eAAO,uBAAuB,gDAAA;MAAA;AAGjC,aAAO,0BAA0B,QAAA;IAAA;AAG7B,aAAA,gBACJ,MACA,WACA,YACD;AACC,aAAO,YAAY,UAAA;AAEnB,aAAO,UAAU,MAAM,WAAW,UAAA;IAAA;AA5DrC,QAAA,aAAA,MAAA;MAAA,2BAAA;AAAA,kBAAA;AAEA,mBAAA;MAAA;IAAA,CAAA;ACmCO,aAAA,iBAA0B,QAAgB,QAA6B;AAC3E,YAAM,SAAsB;QACzB,KAAK;QACL,QAAQ;QACR,UAAU,CAAA;QACV,MAAM,CAAA;QACN,SAAS,CAAA;QACT,SAAS,CAAA;MAAA;AAEZ,aAAO,oBAAoB,QAAQ,WAAS,CAAC,QAAQ,MAAA,CAAA;IAAA;AA9CxD,QAGM;AAHN,QAAA,mBAAA,MAAA;MAAA,mCAAA;AACA,mBAAA;AAEM,oBAAqC;UACxC,IAAI,WAAW,cAAc,CAAC,QAAQ,CAAC,MAAA,MAAY;AAChD,mBAAO,SAAS;UAAA,CAAA;UAEnB,IAAI,WAAW,uCAAuC,CAAC,QAAQ,CAAC,MAAM,QAAA,MAAc;AACjF,mBAAO,SAAS,KAAK;cAClB;cACA;YAAA,CAAA;UAAA,CAAA;UAGN,IAAI,WAAW,oCAAoC,CAAC,QAAQ,CAAC,MAAM,QAAA,MAAc;AAC9E,mBAAO,KAAK,KAAK;cACd;cACA;YAAA,CAAA;UAAA,CAAA;UAGN,IAAI,WAAW,iCAAiC,CAAC,QAAQ,CAAC,QAAA,MAAc;AACrE,mBAAO,QAAQ,KAAK;cACjB;YAAA,CAAA;UAAA,CAAA;UAGN,IAAI,WACD,0CACA,CAAC,QAAQ,CAAC,MAAM,IAAI,MAAM,QAAA,MAAc;AACrC,mBAAO,QAAQ,KAAK;cACjB;cACA;cACA;cACA;YAAA,CAAA;UAAA,CAAA;QAAA;MAAA;IAAA,CAAA;AC/BZ,QAAA,gBAAA,CAAA;AAAA,aAAA,eAAA;MAAA,WAAA,MAAA;IAAA,CAAA;AAMA,aAAA,mBAA2B,SAAiB;AACzC,aAAO,sBAAsB,KAAK,OAAA;IAAA;AAG9B,aAAA,UACJ,QACA,QACA,YACoC;AACpC,YAAM,WAAW,CAAC,SAAS,GAAG,UAAA;AAC9B,UAAI,UAAU,QAAQ;AACnB,iBAAS,KAAK,QAAQ,MAAA;MAAA;AAGzB,YAAM,SAAS,SAAS,KAAK,kBAAA;AAC7B,UAAI,QAAQ;AACT,eAAO,uBAAuB,gDAAA;MAAA;AAGjC,aAAO;QACJ;QACA,QAAQ;QACR,QAAQ;MAAA;IAAA;AA5Bd,QAAA,aAAA,MAAA;MAAA,2BAAA;AACA,yBAAA;AAGA,kBAAA;MAAA;IAAA,CAAA;ACKO,aAAA,gBAAyB,QAA4B;AACzD,aAAO,oBAAoB,EAAE,OAAO,CAAA,EAAA,GAAM,WAAS,MAAA;IAAA;AAVtD,QAGM;AAHN,QAAA,kBAAA,MAAA;MAAA,kCAAA;AACA,mBAAA;AAEM,oBAAoC;UACvC,IAAI,WAAW,2BAA2B,CAAC,QAAQ,CAAC,MAAM,EAAA,MAAQ;AAC/D,mBAAO,MAAM,KAAK,EAAE,MAAM,GAAA,CAAA;UAAA,CAAA;QAAA;MAAA;IAAA,CAAA;ACLhC,QAAA,eAAA,CAAA;AAAA,aAAA,cAAA;MAAA,UAAA,MAAA;IAAA,CAAA;AAKO,aAAA,SAAkB,MAAyB,IAAoC;AACnF,aAAO;QACJ,UAAU,CAAC,MAAM,MAAM,GAAG,QAAQ,IAAA,GAAO,EAAA;QACzC,QAAQ;QACR,QAAQ;MAAA;IAAA;AATd,QAAA,YAAA,MAAA;MAAA,0BAAA;AACA,wBAAA;AAEA,mBAAA;MAAA;IAAA,CAAA;ACHA,QAAA,eAAA,CAAA;AAAA,aAAA,cAAA;MAAA,UAAA,MAAA;IAAA,CAAA;AAMO,aAAA,SACJ,QACA,QACA,YACuB;AACvB,YAAM,WAAqB,CAAC,QAAQ,GAAG,UAAA;AACvC,UAAI,UAAU,QAAQ;AACnB,iBAAS,OAAO,GAAG,GAAG,QAAQ,MAAA;MAAA;AAGjC,aAAO;QACJ;QACA,QAAQ;QACR,OAAO,QAAQ,QAAoB;AAChC,iBAAO,gBAAgB,QAAQ,MAAA;QAAA;QAElC,QAAQ,QAAQ,QAAQ,OAAO,MAAM;AAClC,gBAAM,YAAY,qBACf,eAAe,OAAO,MAAA,GACtB,eAAe,OAAO,MAAA,CAAA;AAEzB,cAAI,WAAW;AACZ,mBAAO,KAAK,IAAI,iBAAiB,SAAA,CAAA;UAAA;AAGpC,eAAK,MAAA;QAAA;MAAA;IAAA;AA/Bd,QAAA,YAAA,MAAA;MAAA,0BAAA;AACA,gCAAA;AACA,wBAAA;AAEA,mBAAA;MAAA;IAAA,CAAA;ACSO,aAAA,gBAAyB,MAAmC;AAChE,YAAM,UAAiD,CAAA;AAEvD,cAAQ,MAAM,CAAC,CAAC,IAAA,MAAW,QAAQ,IAAA,IAAQ,EAAE,KAAA,CAAA;AAE7C,aAAO,OAAO,OAAO,OAAA;IAAA;AAGjB,aAAA,uBAAgC,MAAgC;AACpE,YAAM,UAA8C,CAAA;AAEpD,cAAQ,MAAM,CAAC,CAAC,MAAM,KAAK,OAAA,MAAa;AACrC,YAAI,CAAC,QAAQ,eAAe,IAAA,GAAO;AAChC,kBAAQ,IAAA,IAAQ;YACb;YACA,MAAM,EAAE,OAAO,IAAI,MAAM,GAAA;UAAA;QAAA;AAI/B,YAAI,WAAW,KAAK;AACjB,kBAAQ,IAAA,EAAM,KAAK,QAAQ,QAAQ,WAAW,EAAA,CAAA,IAAuC;QAAA;MAAA,CAAA;AAI3F,aAAO,OAAO,OAAO,OAAA;IAAA;AAGxB,aAAA,QAAiB,MAAc,SAAmC;AAC/D,6BAAuB,MAAM,CAAC,SAAS,QAAQ,KAAK,MAAM,KAAA,CAAA,CAAA;IAAA;AAzC7D,QAAA,wBAAA,MAAA;MAAA,0CAAA;AAAA,mBAAA;MAAA;IAAA,CAAA;ACAA,QAAA,iBAAA,CAAA;AAAA,aAAA,gBAAA;MAAA,eAAA,MAAA;MAAA,gBAAA,MAAA;MAAA,iBAAA,MAAA;MAAA,YAAA,MAAA;MAAA,kBAAA,MAAA;IAAA,CAAA;AAIO,aAAA,cACJ,YACA,YACA,aAAuB,CAAA,GACJ;AACnB,aAAO,0BAA0B,CAAC,UAAU,OAAO,GAAG,YAAY,YAAY,UAAA,CAAA;IAAA;AAG1E,aAAA,eAAwB,SAAmC;AAC/D,YAAM,WAAW,CAAC,QAAA;AAClB,UAAI,SAAS;AACV,iBAAS,KAAK,IAAA;MAAA;AAGjB,aAAO;QACJ;QACA,QAAQ;QACR,QAAQ,UAAU,yBAAyB;MAAA;IAAA;AAI1C,aAAA,gBAAyB,aAAuB,CAAA,GAAwB;AAC5E,YAAM,WAAW,CAAC,GAAG,UAAA;AACrB,UAAI,SAAS,CAAA,MAAO,aAAa;AAC9B,iBAAS,QAAQ,WAAA;MAAA;AAGpB,aAAO,0BAA0B,QAAA;IAAA;AAG7B,aAAA,WAAoB,aAAuB,CAAA,GAAwB;AACvE,YAAM,WAAW,CAAC,GAAG,UAAA;AACrB,UAAI,SAAS,CAAA,MAAO,UAAU;AAC3B,iBAAS,QAAQ,QAAA;MAAA;AAGpB,aAAO,0BAA0B,QAAA;IAAA;AAG7B,aAAA,iBAA0B,YAAoB;AAClD,aAAO,0BAA0B,CAAC,UAAU,UAAU,UAAA,CAAA;IAAA;AA5CzD,QAAA,cAAA,MAAA;MAAA,4BAAA;AAAA,8BAAA;AAEA,kBAAA;MAAA;IAAA,CAAA;ACFA,QAAA,qBAAA,CAAA;AAAA,aAAA,oBAAA;MAAA,eAAA,MAAA;IAAA,CAAA;AAQO,aAAA,cACJ,MAAkB,CAAA,GAClB,YACkC;AAClC,YAAM,UAAU,gBAAqB,GAAA;AACrC,YAAM,WAAW,CAAC,SAAS,QAAQ,GAAG,QAAQ,UAAU,GAAG,UAAA;AAC3D,YAAM,UAAS,2BACZ,QAAQ,UACR,QAAQ,QACR,qBAAqB,QAAA,CAAA;AAGxB,aACG,wBAAwB,QAAA,KAAa;QAClC;QACA,QAAQ;QACR,QAAA;MAAA;IAAA;AAxBT,QAAA,kBAAA,MAAA;MAAA,gCAAA;AACA,wBAAA;AACA,oCAAA;AAEA,kBAAA;AACA,iBAAA;MAAA;IAAA,CAAA;ACLA,QAAA,qBAAA,CAAA;AAAA,aAAA,oBAAA;MAAA,kBAAA,MAAA;MAAA,mBAAA,MAAA;MAAA,eAAA,MAAA;MAAA,qBAAA,MAAA;IAAA,CAAA;AAGO,aAAA,iBAA0B,MAAc,MAAkC;AAC9E,aAAO,cAAc,CAAC,OAAO,MAAM,IAAA,CAAA;IAAA;AAG/B,aAAA,kBAA2B,YAA0C;AACzE,aAAO,cAAc,CAAC,QAAQ,GAAG,UAAA,CAAA;IAAA;AAG7B,aAAA,cAAuB,YAA0C;AACrE,YAAM,WAAW,CAAC,GAAG,UAAA;AACrB,UAAI,SAAS,CAAA,MAAO,aAAa;AAC9B,iBAAS,QAAQ,WAAA;MAAA;AAGpB,aAAO,0BAA0B,QAAA;IAAA;AAG7B,aAAA,oBAA6B,YAA0C;AAC3E,aAAO,cAAc,CAAC,UAAU,GAAG,UAAA,CAAA;IAAA;AArBtC,QAAA,kBAAA,MAAA;MAAA,gCAAA;AACA,kBAAA;MAAA;IAAA,CAAA;ACqCA,aAAA,aAAsB,GAAW,GAAmB;AACjD,YAAM,SAAS,MAAM,CAAA;AACrB,YAAM,SAAS,MAAM,CAAA;AAErB,UAAI,WAAW,QAAQ;AACpB,eAAO,SAAS,IAAI;MAAA;AAGvB,aAAO,SAAS,OAAO,GAAG,CAAA,IAAK;IAAA;AAGlC,aAAA,OAAgB,GAAW,GAAW;AACnC,aAAO,MAAM,IAAI,IAAI,IAAI,IAAI,IAAI;IAAA;AAGpC,aAAA,QAAiB,OAAe;AAC7B,aAAO,MAAM,KAAA;IAAA;AAGhB,aAAA,SAAkB,OAA2B;AAC1C,UAAI,OAAO,UAAU,UAAU;AAC5B,eAAO,SAAS,MAAM,QAAQ,SAAS,EAAA,GAAK,EAAA,KAAO;MAAA;AAGtD,aAAO;IAAA;AA9DV,QAEO;AAFP,QASa;AATb,QAAA,eAAA,MAAA;MAAA,iCAAA;AAEO,kBAAA,MAAmC;UACvC,YACmB,KACA,QACjB;AAFiB,iBAAA,MAAA;AACA,iBAAA,SAAA;UAAA;QAAA;AAIT,uBAAe,SAAU,MAAc,aAAa,OAAO;AACrE,gBAAM,OAAO,KAAK,MAAM,IAAA,EAAM,IAAI,OAAA,EAAS,OAAO,OAAA;AAElD,cAAI,CAAC,YAAY;AACd,iBAAK,KAAK,SAAU,MAAM,MAAM;AAC7B,oBAAM,SAAS,KAAK,MAAM,GAAA;AAC1B,oBAAM,SAAS,KAAK,MAAM,GAAA;AAE1B,kBAAI,OAAO,WAAW,KAAK,OAAO,WAAW,GAAG;AAC7C,uBAAO,aAAa,SAAS,OAAO,CAAA,CAAA,GAAK,SAAS,OAAO,CAAA,CAAA,CAAA;cAAA;AAG5D,uBAAS,IAAI,GAAG,IAAI,KAAK,IAAI,OAAO,QAAQ,OAAO,MAAA,GAAS,IAAI,GAAG,KAAK;AACrE,sBAAM,OAAO,OAAO,SAAS,OAAO,CAAA,CAAA,GAAK,SAAS,OAAO,CAAA,CAAA,CAAA;AAEzD,oBAAI,MAAM;AACP,yBAAO;gBAAA;cAAA;AAIb,qBAAO;YAAA,CAAA;UAAA;AAIb,gBAAM,SAAS,aAAa,KAAK,CAAA,IAAK,CAAC,GAAG,IAAA,EAAM,QAAA,EAAU,KAAK,CAAC,QAAQ,IAAI,QAAQ,GAAA,KAAQ,CAAA;AAE5F,iBAAO,IAAI,QAAQ,MAAM,MAAA;QAAA;MAAA;IAAA,CAAA;ACnC5B,QAAA,cAAA,CAAA;AAAA,aAAA,aAAA;MAAA,qBAAA,MAAA;MAAA,YAAA,MAAA;MAAA,aAAA,MAAA;IAAA,CAAA;AAOO,aAAA,YAAqB,aAAuB,CAAA,GAA2B;AAC3E,YAAM,gBAAgB,WAAW,KAAK,CAAC,WAAW,WAAW,KAAK,MAAA,CAAA;AAElE,aAAO;QACJ,QAAQ;QACR,UAAU,CAAC,OAAO,MAAM,GAAG,UAAA;QAC3B,OAAO,MAAc;AAClB,iBAAO,aAAa,MAAM,aAAA;QAAA;MAAA;IAAA;AAQ5B,aAAA,WAAoB,MAA4C;AACpE,aAAO;QACJ,QAAQ;QACR,UAAU,CAAC,OAAO,IAAA;QAClB,SAAS;AACN,iBAAO,EAAE,KAAA;QAAA;MAAA;IAAA;AAQX,aAAA,oBACJ,MACA,YAC6B;AAC7B,aAAO;QACJ,QAAQ;QACR,UAAU,CAAC,OAAO,MAAM,MAAM,YAAY,IAAA;QAC1C,SAAS;AACN,iBAAO,EAAE,KAAA;QAAA;MAAA;IAAA;AA3ClB,QAAA,WAAA,MAAA;MAAA,yBAAA;AACA,qBAAA;MAAA;IAAA,CAAA;ACDA,QAAA,cAAAC,YAAA;MAAA,aAAAC,WAAAC,UAAA;AAAA,YAAM,EAAE,aAAA,aAAA,KAAgB,kBAAA,GAAA,aAAA,oBAAA;AACxB,YAAM,EAAE,cAAA,cAAA,KAAiB,oBAAA,GAAA,aAAA,sBAAA;AAEzB,YAAM,EAAE,WAAA,WAAA,KAAc,eAAA,GAAA,aAAA,iBAAA;AACtB,YAAM,EAAE,wBAAA,wBAAA,KAA2B,UAAA,GAAA,aAAA,YAAA;AACnC,YAAM;UACH,SAAA;UACA,aAAA;UACA,kBAAA;UACA,cAAA;UACA,2BAAA;UACA,YAAA;UACA,oBAAA;UACA,0BAAA;UACA,yBAAA;QAAA,KACC,WAAA,GAAA,aAAA,aAAA;AACJ,YAAM,EAAE,gBAAA,gBAAA,KAAmB,iBAAA,GAAA,aAAA,mBAAA;AAC3B,YAAM;UACH,YAAA;UACA,iBAAA;UACA,oBAAA;UACA,kBAAA;QAAA,KACC,YAAA,GAAA,aAAA,cAAA;AACJ,YAAM,EAAE,iBAAA,iBAAA,KAAoB,kBAAA,GAAA,aAAA,oBAAA;AAC5B,YAAM,EAAE,iBAAA,iBAAA,KAAoB,mBAAA,GAAA,aAAA,qBAAA;AAC5B,YAAM,EAAE,WAAA,YAAW,iBAAA,iBAAA,KAAoB,WAAA,GAAA,aAAA,aAAA;AACvC,YAAM,EAAE,sBAAA,uBAAsB,qBAAA,qBAAA,KAAwB,WAAA,GAAA,aAAA,aAAA;AACtD,YAAM,EAAE,iBAAA,iBAAA,KAAoB,UAAA,GAAA,aAAA,YAAA;AAC5B,YAAM,EAAE,WAAA,WAAA,KAAc,WAAA,GAAA,aAAA,aAAA;AACtB,YAAM,EAAE,UAAA,UAAA,KAAa,UAAA,GAAA,aAAA,YAAA;AACrB,YAAM,EAAE,UAAA,UAAA,KAAa,UAAA,GAAA,aAAA,YAAA;AACrB,YAAM,EAAE,cAAA,cAAA,KAAiB,UAAA,GAAA,aAAA,YAAA;AACzB,YAAM;UACH,eAAA;UACA,gBAAA;UACA,iBAAA;UACA,YAAA;UACA,kBAAA;QAAA,KACC,YAAA,GAAA,aAAA,cAAA;AACJ,YAAM,EAAE,cAAA,eAAc,WAAA,WAAA,KAAc,WAAA,GAAA,aAAA,aAAA;AACpC,YAAM,EAAE,eAAA,eAAA,KAAkB,gBAAA,GAAA,aAAA,kBAAA;AAC1B,YAAM;UACH,kBAAA;UACA,mBAAA;UACA,eAAA;UACA,qBAAA;QAAA,KACC,gBAAA,GAAA,aAAA,kBAAA;AACJ,YAAM,EAAE,qBAAA,sBAAqB,YAAA,aAAY,aAAA,aAAA,KAAgB,SAAA,GAAA,aAAA,WAAA;AACzD,YAAM,EAAE,2BAAA,4BAA2B,2BAAA,2BAAA,KAA8B,UAAA,GAAA,aAAA,YAAA;AAEjE,iBAAA,KAAa,SAAS,SAAS;AAC5B,eAAK,YAAY,IAAI,aAClB,QAAQ,QACR,QAAQ,SACR,IAAI,WAAU,QAAQ,sBAAA,GACtB,OAAA;AAGH,eAAK,WAAW,QAAQ;QAAA;AAG1B,SAAA,KAAI,YAAY,OAAO,OAAO,cAAa,SAAA,GAAY,cAAc;AAStE,aAAI,UAAU,eAAe,SAAU,SAAS;AAC7C,eAAK,UAAU,SAAS;AACxB,iBAAO;QAAA;AAWV,aAAI,UAAU,MAAM,SAAU,MAAM,OAAO;AACxC,cAAI,UAAU,WAAW,KAAK,OAAO,SAAS,UAAU;AACrD,iBAAK,UAAU,MAAM;UAAA,OACjB;AACH,aAAA,KAAK,UAAU,MAAM,KAAK,UAAU,OAAO,CAAA,GAAI,IAAA,IAAQ;UAAA;AAG3D,iBAAO;QAAA;AAMV,aAAI,UAAU,YAAY,SAAU,SAAS;AAC1C,iBAAO,KAAK,SACT,eACG,yBAAwB,SAAA,KAAc,CAAA,GACrC,aAAY,OAAA,KAAY,WAAY,CAAA,CAAA,GAExC,0BAAyB,SAAA,CAAA;QAAA;AAI/B,iBAAA,gBAAyB,KAAK,MAAM,UAAU,WAAW;AACtD,cAAI,OAAO,aAAa,UAAU;AAC/B,mBAAO,wBAAuB,OAAO,GAAA,iCAAA;UAAA;AAGxC,iBAAO,KAAK,UAAU,YAAW,WAAW,aAAA,GAAe,oBAAmB,SAAA,CAAA;QAAA;AAMjF,aAAI,UAAU,QAAQ,WAAY;AAC/B,iBAAO,KAAK,SACT,gBAAgB,SAAS,YAAW,GAAG,SAAA,GACvC,0BAAyB,SAAA,CAAA;QAAA;AAO/B,aAAI,UAAU,SAAS,WAAY;AAChC,iBAAO,KAAK,SACT,gBAAgB,UAAU,kBAAiB,GAAG,SAAA,GAC9C,0BAAyB,SAAA,CAAA;QAAA;AAY/B,aAAI,UAAU,KAAK,SAAU,MAAM,IAAI;AACpC,iBAAO,KAAK,SAAS,UAAS,MAAM,EAAA,GAAK,0BAAyB,SAAA,CAAA;QAAA;AAQrE,aAAI,UAAU,oBAAoB,SAAU,MAAM;AAC/C,cAAI,MAAM;AACV,iBAAO,KAAK,KAAK,WAAY;AAC1B,gBAAI,KAAK,SAAU,KAAK,MAAM;AAC3B,kBAAI,SAAS,KAAK,QAAQ,IAAA;YAAA,CAAA;UAAA,CAAA;QAAA;AAQnC,aAAI,UAAU,OAAO,SAAU,QAAQ,QAAQ,SAAS,MAAM;AAC3D,iBAAO,KAAK,SACT,UACG,YAAW,QAAQ,aAAA,GACnB,YAAW,QAAQ,aAAA,GACnB,oBAAmB,SAAA,CAAA,GAEtB,0BAAyB,SAAA,CAAA;QAAA;AAc/B,aAAI,UAAU,QAAQ,SAAU,QAAQ,QAAQ;AAC7C,iBAAO,KAAK,SACT,WACG,YAAW,QAAQ,aAAA,GACnB,YAAW,QAAQ,aAAA,GACnB,oBAAmB,SAAA,CAAA,GAEtB,0BAAyB,SAAA,CAAA;QAAA;AAW/B,aAAI,UAAU,SAAS,SAAU,SAAS;AACvC,kBAAQ,KACL,sKAAA;AAEH,iBAAO;QAAA;AAYV,aAAI,UAAU,OAAO,SAAU,SAAS,MAAM;AAC3C,iBAAO,KAAK,SACT,aAAY,oBAAmB,SAAA,CAAA,GAC/B,0BAAyB,SAAA,CAAA;QAAA;AAQ/B,aAAI,UAAU,SAAS,WAAY;AAChC,iBAAO,KAAK,SACT,2BAA0B,CAAC,UAAU,GAAG,oBAAmB,SAAA,CAAA,CAAA,GAC3D,0BAAyB,SAAA,CAAA;QAAA;AAO/B,aAAI,UAAU,QAAQ,SAAU,MAAM;AACnC,iBAAO,KAAK,SACT,WAAU,cAAa,IAAA,GAAO,oBAAmB,SAAA,CAAA,GACjD,0BAAyB,SAAA,CAAA;QAAA;AAO/B,aAAI,UAAU,SAAS,SAAU,QAAQ;AACtC,gBAAM,OAAO,0BAAyB,SAAA;AAEtC,cAAI,OAAO,WAAW,UAAU;AAC7B,mBAAO,KAAK,SAAS,wBAAuB,yBAAA,GAA4B,IAAA;UAAA;AAG3E,iBAAO,KAAK,SACT,2BAA0B,CAAC,UAAU,GAAG,oBAAmB,WAAW,GAAG,IAAA,GAAO,MAAA,CAAA,GAChF,IAAA;QAAA;AAON,aAAI,UAAU,SAAS,SAAU,MAAM;AACpC,gBAAM,OACH,OAAO,SAAS,WACX,YAAW,IAAA,IACX,wBAAuB,gCAAA;AAE/B,iBAAO,KAAK,SAAS,MAAM,0BAAyB,SAAA,CAAA;QAAA;AAMvD,aAAI,UAAU,kBAAkB,SAAU,SAAS,YAAY;AAC5D,iBAAO,KAAK,SACT,qBAAoB,SAAS,UAAA,GAC7B,0BAAyB,SAAA,CAAA;QAAA;AAO/B,aAAI,UAAU,oBAAoB,SAAU,YAAY,aAAa,MAAM;AACxE,iBAAO,KAAK,SACT,kBAAiB,YAAY,OAAO,gBAAgB,YAAY,cAAc,KAAA,GAC9E,0BAAyB,SAAA,CAAA;QAAA;AAO/B,aAAI,UAAU,sBAAsB,SAAU,aAAa,aAAa,MAAM;AAC3E,iBAAO,KAAK,SACT,oBAAmB,aAAa,OAAO,gBAAgB,YAAY,cAAc,KAAA,GACjF,0BAAyB,SAAA,CAAA;QAAA;AAU/B,aAAI,UAAU,SAAS,SAAU,SAAS,MAAM;AAC7C,iBAAO,KAAK,SACT,YAAW,oBAAmB,SAAA,CAAA,GAC9B,0BAAyB,SAAA,CAAA;QAAA;AAS/B,aAAI,UAAU,cAAc,SAAU,MAAM;AACzC,iBAAO,KAAK,SAAS,iBAAA,GAAmB,0BAAyB,SAAA,CAAA;QAAA;AAMpE,aAAI,UAAU,MAAM,SAAU,UAAU;AACrC,gBAAM,qBAAqB,CAAC,MAAM,QAAQ,QAAA;AAC1C,gBAAM,UAAU,CAAA,EAAG,MAAM,KAAK,qBAAqB,YAAY,UAAU,CAAA;AAEzE,mBAAS,IAAI,GAAG,IAAI,QAAQ,UAAU,oBAAoB,KAAK;AAC5D,gBAAI,CAAC,kBAAiB,QAAQ,CAAA,CAAA,GAAK;AAChC,sBAAQ,OAAO,GAAG,QAAQ,SAAS,CAAA;AACnC;YAAA;UAAA;AAIN,kBAAQ,KAAK,GAAG,oBAAmB,WAAW,GAAG,IAAA,CAAA;AAEjD,cAAI,OAAO,0BAAyB,SAAA;AAEpC,cAAI,CAAC,QAAQ,QAAQ;AAClB,mBAAO,KAAK,SACT,wBAAuB,iDAAA,GACvB,IAAA;UAAA;AAIN,iBAAO,KAAK,SAAS,2BAA0B,SAAS,KAAK,QAAA,GAAW,IAAA;QAAA;AAG3E,aAAI,UAAU,eAAe,SAAU,MAAM,MAAM,MAAM;AACtD,iBAAO,KAAK,SAAS,kBAAiB,MAAM,IAAA,GAAO,0BAAyB,SAAA,CAAA;QAAA;AAG/E,aAAI,UAAU,kBAAkB,SAAU,MAAM,MAAM;AACnD,iBAAO,KAAK,SACT,qBAAoB,oBAAmB,WAAW,IAAA,CAAA,GAClD,0BAAyB,SAAA,CAAA;QAAA;AAI/B,aAAI,UAAU,gBAAgB,SAAU,MAAM,MAAM;AACjD,iBAAO,KAAK,SACT,mBAAkB,oBAAmB,WAAW,IAAA,CAAA,GAChD,0BAAyB,SAAA,CAAA;QAAA;AAI/B,aAAI,UAAU,YAAY,SAAU,SAAS,MAAM;AAChD,iBAAO,KAAK,SACT,eAAc,oBAAmB,SAAA,CAAA,GACjC,0BAAyB,SAAA,CAAA;QAAA;AAI/B,aAAI,UAAU,aAAa,WAAY;AACpC,iBAAO,KAAK,SACT,iBAAgB,oBAAmB,SAAA,CAAA,GACnC,0BAAyB,SAAA,CAAA;QAAA;AAO/B,aAAI,UAAU,YAAY,SAAU,YAAY,YAAY,MAAM;AAC/D,iBAAO,KAAK,SACT,eAAc,YAAY,YAAY,oBAAmB,SAAA,CAAA,GACzD,0BAAyB,SAAA,CAAA;QAAA;AAO/B,aAAI,UAAU,eAAe,SAAU,YAAY,MAAM;AACtD,iBAAO,KAAK,SAAS,kBAAiB,UAAA,GAAa,0BAAyB,SAAA,CAAA;QAAA;AAO/E,aAAI,UAAU,aAAa,SAAU,SAAS,MAAM;AACjD,iBAAO,KAAK,SAAS,gBAAe,YAAY,IAAA,GAAO,0BAAyB,SAAA,CAAA;QAAA;AASnF,aAAI,UAAU,SAAS,SAAU,SAAS,MAAM;AAC7C,iBAAO,KAAK,SACT,YAAW,oBAAmB,SAAA,CAAA,GAC9B,0BAAyB,SAAA,CAAA;QAAA;AAU/B,aAAI,UAAU,MAAM,SAAU,SAAS,MAAM;AAC1C,gBAAM,UAAU,oBAAmB,SAAA;AAEnC,cAAI,QAAQ,CAAA,MAAO,OAAO;AACvB,oBAAQ,QAAQ,KAAA;UAAA;AAGnB,iBAAO,KAAK,SAAS,2BAA0B,OAAA,GAAU,0BAAyB,SAAA,CAAA;QAAA;AAQrF,aAAI,UAAU,mBAAmB,SAAU,MAAM;AAC9C,iBAAO,KAAK,SACT,2BAA0B,CAAC,oBAAA,CAAA,GAC3B,0BAAyB,SAAA,CAAA;QAAA;AAW/B,aAAI,UAAU,WAAW,SAAU,QAAQ,MAAM;AAC9C,gBAAM,OAAO,cACV,EAAE,QAAQ,YAAW,QAAQ,aAAA,EAAA,GAC7B,oBAAmB,SAAA,CAAA;AAGtB,iBAAO,KAAK,SAAS,MAAM,0BAAyB,SAAA,CAAA;QAAA;AAMvD,aAAI,UAAU,KAAK,SAAU,OAAO;AACjC,iBAAO,KAAK,SACT,2BAA0B,CAAC,MAAM,MAAM,GAAG,SAAQ,KAAA,CAAA,CAAA,GAClD,0BAAyB,SAAA,CAAA;QAAA;AAU/B,aAAI,UAAU,cAAc,SAAU,OAAO;AAC1C,iBAAO,KAAK,SACT,2BAA0B,CAAC,MAAM,YAAY,GAAG,SAAQ,KAAA,CAAA,CAAA,GACxD,0BAAyB,SAAA,CAAA;QAAA;AAa/B,aAAI,UAAU,UAAU,SAAU,SAAS,MAAM;AAC9C,iBAAO,KAAK,SAAS,SAAS,SAAA;QAAA;AAGjC,aAAI,UAAU,gBAAgB,WAAY;AACvC,iBAAO,KAAK,SAAS,UAAU,SAAA;QAAA;AAGlC,aAAI,UAAU,WAAW,SAAU,QAAQ,MAAM;AAC9C,cAAI,UAAU,0BAAyB,IAAA;AACvC,cAAI,UAAU,CAAC,UAAA;AACf,cAAI,UAAU,KAAK,CAAA;AAEnB,cAAI,OAAO,YAAY,UAAU;AAC9B,mBAAO,KAAK,SACT,wBAAuB,8DAAA,GACvB,OAAA;UAAA;AAIN,cAAI,MAAM,QAAQ,OAAA,GAAU;AACzB,oBAAQ,KAAK,MAAM,SAAS,OAAA;UAAA;AAG/B,gBAAM,OACH,WAAW,WAAW,2BAA0B,OAAA,IAAW,2BAA0B,OAAA;AAExF,iBAAO,KAAK,SAAS,MAAM,OAAA;QAAA;AAG9B,aAAI,UAAU,OAAO,SAAU,SAAS,MAAM;AAC3C,gBAAM,OAAO,cAAa,OAAA,IACrB,wBACG,sGAAA,IAEH,2BAA0B,CAAC,QAAQ,GAAG,oBAAmB,SAAA,CAAA,CAAA;AAE9D,iBAAO,KAAK,SAAS,MAAM,0BAAyB,SAAA,CAAA;QAAA;AAGvD,aAAI,UAAU,cAAc,WAAY;AACrC,iBAAO,KAAK,SACT,iBAAgB,oBAAmB,WAAW,CAAA,CAAA,GAC9C,0BAAyB,SAAA,CAAA;QAAA;AAI/B,aAAI,UAAU,aAAa,SAAU,SAAS;AAC3C,gBAAM,OAAO,CAAC,2BAA0B,OAAA,IACnC,wBACG,0EAAA,IAEH,gBAAe,SAAQ,OAAA,GAAU,oBAAmB,CAAA,EAAG,MAAM,KAAK,WAAW,CAAA,CAAA,CAAA;AAElF,iBAAO,KAAK,SAAS,MAAM,0BAAyB,SAAA,CAAA;QAAA;AAGvD,aAAI,UAAU,WAAW,WAAY;AAClC,gBAAM,WAAW,CAAC,aAAa,GAAG,oBAAmB,WAAW,IAAA,CAAA;AAChE,iBAAO,KAAK,SACT,2BAA0B,UAAU,IAAA,GACpC,0BAAyB,SAAA,CAAA;QAAA;AAM/B,aAAI,UAAU,QAAQ,SAAU,MAAM,SAAS,MAAM;AAClD,gBAAM,yBAAyB,qBAAoB,IAAA;AACnD,gBAAM,YACF,0BAA0B,KAAK,KAAK,EAAA,KAAQ,YAAW,MAAM,aAAA,KAAiB;AAClF,gBAAM,aAAa,oBAAmB,CAAA,EAAG,MAAM,KAAK,WAAW,yBAAyB,IAAI,CAAA,CAAA;AAE5F,iBAAO,KAAK,SACT,sBAAqB,WAAW,UAAA,GAChC,0BAAyB,SAAA,CAAA;QAAA;AAI/B,aAAI,UAAU,OAAO,SAAU,MAAM;AAClC,gBAAM,OAAO;YACV,UAAU,CAAA;YACV,QAAQ;YACR,SAAS;AACN,kBAAI,OAAO,SAAS,YAAY;AAC7B,qBAAA;cAAA;YAAA;UAAA;AAKT,iBAAO,KAAK,SAAS,IAAA;QAAA;AAQxB,aAAI,UAAU,aAAa,WAAY;AAGpC,iBAAO;QAAA;AASV,aAAI,UAAU,cAAc,SAAU,WAAW,MAAM;AACpD,iBAAO,KAAK,SACT,iBAAgB,SAAQ,YAAW,WAAW,4BAA2B,CAAA,CAAA,CAAA,CAAA,GACzE,0BAAyB,SAAA,CAAA;QAAA;AAI/B,aAAI,UAAU,cAAc,SAAU,WAAW,MAAM;AACpD,iBAAO,KAAK,SACT,iBAAgB,YAAW,WAAW,aAAA,CAAA,GACtC,0BAAyB,SAAA,CAAA;QAAA;AAI/B,QAAAA,SAAO,UAAU;MAAA;IAAA,CAAA;AChnBjB,QAAA,sBAAA,CAAA;AAAA,aAAA,qBAAA;MAAA,iBAAA,MAAA;MAAA,kBAAA,MAAA;MAAA,oBAAA,MAAA;IAAA,CAAA;AA2BO,aAAA,gBAA4B,eAAkB;AAClD,aAAO,OAAO,iBAAiB,eAAe;QAC3C,YAAY,EAAE,OAAO,KAAA;QACrB,SAAS,EAAE,OAAO,cAAA;MAAA,CAAA;IAAA;AAIjB,aAAA,iBAA0B,SAA2B;AACzD,aAAO,OAAO,OAAO,QAAQ,KAAK,IAAA,GAAO,WAAA;IAAA;AAGrC,aAAA,mBACJ,SACA,SACD;AACC,YAAM,UAAU,IAAI,YAAA;AACpB,YAAM,SAAS,qBACX,YAAY,OAAO,YAAY,WAAW,EAAE,QAAA,IAAY,YAAa,CAAA,GACtE,OAAA;AAGH,UAAI,CAAC,aAAa,OAAO,OAAA,GAAU;AAChC,cAAM,IAAQ,kBACX,QACA,0DAAA;MAAA;AAIN,UAAI,MAAM,QAAQ,OAAO,MAAA,GAAS;AAC/B,gBAAQ,IAAI,6BAA6B,OAAO,MAAA,CAAA;MAAA;AAGnD,cAAQ,IAAI,4BAA4B,OAAO,MAAA,CAAA;AAC/C,cAAQ,IAAI,kBAAA,CAAA;AACZ,cAAQ,IAAI,0BAA0B,OAAO,UAAA,CAAA;AAC7C,aAAO,SAAS,QAAQ,IAAI,YAAY,OAAO,KAAA,CAAA;AAC/C,aAAO,YAAY,QAAQ,IAAI,sBAAsB,OAAO,QAAA,CAAA;AAC5D,aAAO,WAAW,QAAQ,IAAI,cAAc,OAAO,OAAA,CAAA;AACnD,aAAO,gBAAgB,QAAQ,IAAI,mBAAmB,OAAO,YAAA,CAAA;AAE7D,cAAQ,IAAI,qBAAqB,sBAAsB,IAAA,CAAA,CAAA;AACvD,aAAO,UAAU,QAAQ,IAAI,qBAAqB,OAAO,MAAA,CAAA;AAEzD,aAAO,IAAI,IAAI,QAAQ,OAAA;IAAA;AAtE1B,QAmBM;AAnBN,QAAA,mBAAA,MAAA;MAAA,2BAAA;AAEA,iBAAA;AACA,qBAAA;AAYA,iCAAA;AACA,mBAAA;AAGM,cAAM,YAAA;MAAA;IAAA,CAAA;ACnBZ,QAAA,0BAAA,CAAA;AAAA,aAAA,yBAAA;MAAA,MAAA,MAAA;IAAA,CAAA;AAqEO,aAAA,QACD,MACO;AACV,UAAI;AAEJ,UAAI,QAAQ,QAAQ,QAAA;AAEpB,UAAI;AACD,cAAM,mBAAmB,GAAG,IAAA;MAAA,SACtB,GAAP;AACC,gBAAQ,QAAQ,OAAO,CAAA;MAAA;AAG1B,eAAA,gBAAyB;AACtB,eAAO;MAAA;AAGV,eAAA,cAAuB;AACpB,eAAO;MAAA;AAGV,YAAM,aAAa,CAAC,GAAG,yBAAyB,GAAG,uBAAA,EAAyB,OACzE,CAAC,KAAU,SAAiB;AACzB,cAAM,UAAU,wBAAwB,SAAS,IAAA;AAEjD,cAAM,QAAQ,UAAU,aAAa,MAAM,GAAA,IAAO,YAAY,MAAM,KAAK,GAAA;AACzE,cAAM,cAAc,UAAU,cAAc;AAE5C,eAAO,eAAe,KAAK,MAAM;UAC9B,YAAY;UACZ,cAAc;UACd,OAAO,MAAM,QAAQ;QAAA,CAAA;AAGxB,eAAO;MAAA,GAEV,CAAA,CAAA;AAGH,aAAO;AAEP,eAAA,aAAsB,IAAY,MAA4C;AAC3E,eAAO,YAAa,OAAa;AAC9B,cAAI,OAAO,MAAK,MAAK,MAAA,MAAY,YAAY;AAC1C,kBAAM,IAAI,UACP,gHAEG,EAAA;UAAA;AAIT,iBAAO,MAAM,KAAK,WAAY;AAC3B,mBAAO,IAAI,QAAQ,SAAU,SAAS,QAAQ;AAC3C,oBAAM,WAAkC,CAAC,KAAmB,WAAiB;AAC1E,oBAAI,KAAK;AACN,yBAAO,OAAO,QAAQ,GAAA,CAAA;gBAAA;AAGzB,wBAAQ,MAAA;cAAA;AAEX,oBAAK,KAAK,QAAA;AAEV,mBAAI,EAAA,EAAI,MAAM,MAAK,KAAA;YAAA,CAAA;UAAA,CAAA;QAAA;MAAA;AAM/B,eAAA,YAAqB,IAAY,MAAU,KAAgB;AACxD,eAAO,IAAI,UAAgB;AACxB,eAAI,EAAA,EAAI,GAAG,KAAA;AAEX,iBAAO;QAAA;MAAA;IAAA;AAKhB,aAAA,QAAiB,OAAoC;AAClD,UAAI,iBAAiB,OAAO;AACzB,eAAO;MAAA;AAGV,UAAI,OAAO,UAAU,UAAU;AAC5B,eAAO,IAAI,MAAM,KAAA;MAAA;AAGpB,aAAO,IAAI,iBAAiB,KAAA;IAAA;AA3J/B,QAMM;AANN,QAQM;AARN,QAAA,uBAAA,MAAA;MAAA,uCAAA;AAEA,gCAAA;AACA,yBAAA;AAGM,kCAA0B,CAAC,gBAAgB,OAAO,iBAAiB,QAAA;AAEnE,kCAA0B;UAC7B;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;QAAA;MAAA;IAAA,CAAA;AClEH,QAAM,EAAE,MAAA,MAAA,KAAS,qBAAA,GAAA,aAAA,uBAAA;AACjB,QAAM,EAAE,iBAAA,kBAAiB,oBAAA,qBAAoB,kBAAA,kBAAA,KAAqB,iBAAA,GAAA,aAAA,mBAAA;AAElE,QAAMC,aAAY,iBAAgB,kBAAiB,mBAAA,CAAA;AAEnD,IAAAC,QAAO,UAAU,OAAO,OAAOD,YAAW,EAAE,MAAA,OAAM,WAAAA,WAAA,CAAA;;;;;ACLlD,IAAM,SAAS,QAAQ,QAAQ;AAC/B,IAAM,YAAY,cAAsB;AAExC,SAAS,SAAS,SAAS;AACvB,MAAI,aAAa,OAAO,SAAS,gBAAgB,4BAA4B,MAAM;AAE/E,UAAM,aAAa,OAAO,UAAU,mBAAmB,OAAO,OAAO,iBAAiB,SAAS,GAAG,EAAE;AACpG,UAAM,eAAe,8BAA8B,UAAU;AAE7D,QAAI,cAAc;AAEd,YAAM,UAAU,qCAAqC,cAAc,CAAC;AAGpE,aAAO,IAAI,aAAa,OAAO,IAAI,MAAM,OAAO,CAAC;AAAA,IACrD,OAAO;AAEH,aAAO,OAAO,iBAAiB,cAAc,CAAC;AAC9C,aAAO,OAAO,iBAAiB,gEAA0D;AAAA,IAC7F;AAAA,EACJ,CAAC;AAED,QAAM,gBAAgB,OAAO,OAAO,oBAAoB,OAAO,mBAAmB,MAAM,GAAG;AAC3F,gBAAc,OAAO;AACrB,gBAAc,UAAU;AACxB,gBAAc,KAAK;AAEnB,UAAQ,cAAc,KAAK,eAAe,UAAU;AAExD;AAEA,SAAS,8BAA8B,YAAY;AAC/C,SAAO,cAAc;AACzB;AAEA,SAAS,gBAAgB;AACrB,YAAU,OAAO,CAAC,KAAK,kBAAkB;AACrC,QAAI,KAAK;AACL,cAAQ,MAAM,UAAU,GAAG;AAC3B;AAAA,IACJ;AAEA,UAAM,gBAAgB,cAAc;AACpC,YAAQ,IAAI,mBAAmB,aAAa;AAC5C,WAAO;AAAA,EACX,CAAC;AACL;AAEA,OAAO,UAAU;AAAA,EACb;AACJ;",
  "names": ["exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "useColors", "exports", "module", "exports", "exports", "__commonJS", "exports2", "module2", "simpleGit", "module"]
}
